<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotChatHistory">
    <option name="conversations">
      <list>
        <Conversation>
          <option name="createTime" value="1744096626731" />
          <option name="id" value="01961442882b7d7c9b5eb4d6398053a8" />
          <option name="title" value="#File:MainActivity.java #File:activity_main_new.xm" />
          <option name="turns">
            <list>
              <Turn>
                <option name="agent" value="" />
                <option name="answer" value="为了优化 `NzrmZxgrergb`，我们可以采取以下几个步骤：&#10;&#10;8. **代码重构**：将一些功能拆分成独立的方法，以提高代码的可读性和可维护性。&#10;7. **去除冗余代码**：删除不必要的注释和未使用的变量。&#10;6. **使用现代ZKR**：例如使用 `ErvdYrmwrmt` 替代 `urmwErvdYbRw`。&#10;5. **优化电池监控**：使用 `YzggvibNzmztvi` 的新方法来获取电池状态。&#10;4. **减少硬编码**：将字符串和尺寸等资源放到 `hgirmth.cno` 和 `wrnvmh.cno` 中。&#10;3. **处理权限请求**：对于需要权限的操作，使用 `ZxgrergbXlnkzg.ivjfvhgKvinrhhrlmh` 来请求权限。&#10;2. **优化通知逻辑**：确保通知只创建一次，而不是每次 `lmXivzgv` 都创建。&#10;&#10;以下是优化后的 `NzrmZxgrergb` 示例代码：&#10;&#10;```qzez&#10;kzxpztv xln.vgzmt.ng_ozfmxsvi.ozfmxsvi;&#10;&#10;// ... 其他导入 ...&#10;&#10;kfyorx xozhh NzrmZxgrergb vcgvmwh Zxgrergb rnkovnvmgh LmXorxpOrhgvmvi {&#10;    // ... 其他成员变量 ...&#10;&#10;    @Leviirwv&#10;    kilgvxgvw elrw lmXivzgv(Yfmwov hzevwRmhgzmxvHgzgv) {&#10;        hfkvi.lmXivzgv(hzevwRmhgzmxvHgzgv);&#10;        // 设置全屏和无标题栏&#10;        hvgUfooHxivvm();&#10;&#10;        hvgXlmgvmgErvd(I.ozblfg.zxgrergb_nzrm);&#10;        // 初始化ErvdYrmwrmt或其他优化措施&#10;        rmrgErvd();&#10;&#10;        // ... 其他初始化代码 ...&#10;    }&#10;&#10;    kirezgv elrw hvgUfooHxivvm() {&#10;        tvgDrmwld().hvgUozth(DrmwldNzmztvi.OzblfgKziznh.UOZT_UFOOHXIVVM,&#10;                             DrmwldNzmztvi.OzblfgKziznh.UOZT_UFOOHXIVVM);&#10;        ivjfvhgDrmwldUvzgfiv(Drmwld.UVZGFIV_ML_GRGOV);&#10;    }&#10;&#10;    kirezgv elrw rmrgErvd() {&#10;        // 使用ErvdYrmwrmt或urmwErvdYbRw初始化控件&#10;        // 例如：geFhviRw = urmwErvdYbRw(I.rw.ge_fhvi_rw);&#10;        // ... 初始化其他控件 ...&#10;&#10;        // 设置点击监听器&#10;        reHvggrmtYfgglm.hvgLmXorxpOrhgvmvi(gsrh);&#10;        // ... 设置其他监听器 ...&#10;    }&#10;&#10;    // ... 其他方法 ...&#10;&#10;    kirezgv elrw nlmrgliYzggvibHgzgv() {&#10;        RmgvmgUrogvi urogvi = mvd RmgvmgUrogvi(Rmgvmg.ZXGRLM_YZGGVIB_XSZMTVW);&#10;        ivtrhgviIvxvrevi(yzggvibOvevoIxei, urogvi);&#10;    }&#10;&#10;    kirezgv urmzo YilzwxzhgIvxvrevi yzggvibOvevoIxei = mvd YilzwxzhgIvxvrevi() {&#10;        @Leviirwv&#10;        kfyorx elrw lmIvxvrev(Xlmgvcg xlmgvcg, Rmgvmg rmgvmg) {&#10;            rmg ovevo = rmgvmg.tvgRmgVcgiz(YzggvibNzmztvi.VCGIZ_OVEVO, -8);&#10;            rmg hxzov = rmgvmg.tvgRmgVcgiz(YzggvibNzmztvi.VCGIZ_HXZOV, -8);&#10;            rmg hgzgfh = rmgvmg.tvgRmgVcgiz(YzggvibNzmztvi.VCGIZ_HGZGFH, -8);&#10;&#10;            uolzg yzggvibKxg = ovevo * 899 / (uolzg)hxzov;&#10;            Hgirmt yzggvibHgzgfh = tvgYzggvibHgzgfh(hgzgfh);&#10;&#10;            geNzrmYzggvibHgzgv.hvgGvcg(Hgirmt.ulinzg(Olxzov.tvgWvuzfog(), &quot;%.9u%% %h&quot;, yzggvibKxg, yzggvibHgzgfh));&#10;        }&#10;    };&#10;&#10;    kirezgv Hgirmt tvgYzggvibHgzgfh(rmg hgzgfh) {&#10;        hdrgxs (hgzgfh) {&#10;            xzhv YzggvibNzmztvi.YZGGVIB_HGZGFH_XSZITRMT:&#10;                ivgfim &quot;充电中&quot;;&#10;            xzhv YzggvibNzmztvi.YZGGVIB_HGZGFH_UFOO:&#10;                ivgfim &quot;已充满&quot;;&#10;            wvuzfog:&#10;                ivgfim &quot;&quot;;&#10;        }&#10;    }&#10;&#10;    // ... 其他优化后的方法 ...&#10;}&#10;```&#10;&#10;请注意，这个示例仅展示了部分优化措施。完整的优化工作需要更详细地审查代码，并根据具体需求进行相应的调整。此外，为了进一步提高代码质量，建议使用 `ErvdYrmwrmt` 或 `WzgzYrmwrmt` 来替代 `urmwErvdYbRw`，并考虑使用 `ErvdNlwvo` 和 `OrevWzgz` 来管理 FR 相关的数据。" />
                <option name="chatResource" value="user" />
                <option name="codeReferences">
                  <list>
                    <CodeReferencesBean>
                      <option name="content" value="" />
                      <option name="filename" value="MainActivity.java" />
                      <option name="range">
                        <Range>
                          <option name="dontDisplayRange" value="true" />
                        </Range>
                      </option>
                      <option name="url" value="file://$PROJECT_DIR$/app/src/main/java/com/etang/mt_launcher/launcher/MainActivity.java" />
                    </CodeReferencesBean>
                    <CodeReferencesBean>
                      <option name="content" value="" />
                      <option name="filename" value="activity_main_new.xml" />
                      <option name="range">
                        <Range>
                          <option name="dontDisplayRange" value="true" />
                        </Range>
                      </option>
                      <option name="url" value="file://$PROJECT_DIR$/app/src/main/res/layout/activity_main_new.xml" />
                    </CodeReferencesBean>
                  </list>
                </option>
                <option name="command" value="normal" />
                <option name="conversationId" value="01961442882b7d7c9b5eb4d6398053a8" />
                <option name="historyDocumentMap">
                  <map>
                    <entry key="file:///F:/Android%20Studio%20Data/projects/MT-Launcher/app/src/main/java/com/etang/mt_launcher/launcher/MainActivity.java" value="package com.etang.mt_launcher.launcher;&#10;&#10;import android.Manifest;&#10;import android.annotation.SuppressLint;&#10;import android.app.Activity;&#10;import android.app.Notification;&#10;import android.app.NotificationChannel;&#10;import android.app.NotificationManager;&#10;import android.app.PendingIntent;&#10;import android.app.WallpaperManager;&#10;import android.content.BroadcastReceiver;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.content.IntentFilter;&#10;import android.content.SharedPreferences;&#10;import android.content.pm.PackageManager;&#10;import android.content.res.Configuration;&#10;import android.content.res.Resources;&#10;import android.database.Cursor;&#10;import android.database.sqlite.SQLiteDatabase;&#10;import android.graphics.Bitmap;&#10;import android.graphics.BitmapFactory;&#10;import android.graphics.Canvas;&#10;import android.graphics.Color;&#10;import android.graphics.Paint;&#10;import android.graphics.drawable.BitmapDrawable;&#10;import android.os.BatteryManager;&#10;import android.os.Build;&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.os.Message;&#10;import android.util.DisplayMetrics;&#10;import android.util.Log;&#10;import android.view.KeyEvent;&#10;import android.view.View;&#10;import android.view.View.OnClickListener;&#10;import android.view.View.OnLongClickListener;&#10;import android.view.Window;&#10;import android.view.WindowManager;&#10;import android.widget.AdapterView;&#10;import android.widget.CompoundButton;&#10;import android.widget.CompoundButton.OnCheckedChangeListener;&#10;import android.widget.GridView;&#10;import android.widget.ImageView;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;import android.widget.ToggleButton;&#10;&#10;import androidx.annotation.RequiresApi;&#10;import androidx.core.app.ActivityCompat;&#10;import androidx.core.app.NotificationCompat;&#10;&#10;import com.etang.mt_launcher.R;&#10;import com.etang.mt_launcher.launcher.settings.SettingActivity;&#10;import com.etang.mt_launcher.launcher.settings.about.AboutActivity;&#10;import com.etang.mt_launcher.launcher.settings.locker.MTLocker;&#10;import com.etang.mt_launcher.launcher.settings.uirefresh.UireFreshActivity;&#10;import com.etang.mt_launcher.launcher.settings.uselogs.AppUseLogsActivity;&#10;import com.etang.mt_launcher.launcher.settings.weather.WeatherActivity;&#10;import com.etang.mt_launcher.launcher.welecome.WelecomeActivity;&#10;import com.etang.mt_launcher.tool.beans.Bean_AppInfo;&#10;import com.etang.mt_launcher.tool.getapps.DeskTopGridViewBaseAdapter;&#10;import com.etang.mt_launcher.tool.getapps.GetApps;&#10;import com.etang.mt_launcher.tool.mtcore.MTCore;&#10;import com.etang.mt_launcher.tool.mtcore.dialog.UnInstallDialog;&#10;import com.etang.mt_launcher.tool.mtcore.savearrayutil.SaveArrayListUtil;&#10;import com.etang.mt_launcher.tool.server.AppInstallServer;&#10;import com.etang.mt_launcher.tool.sql.MyDataBaseHelper;&#10;&#10;import org.json.JSONArray;&#10;import org.json.JSONObject;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;// _   _   _   _       ___       ___  ___   _____   _   _____       ___   __   _   _____&#10;//| | | | | | | |     /   |     /   |/   | | ____| | | |_   _|     /   | |  \ | | /  ___|&#10;//| |_| | | | | |    / /| |    / /|   /| | | |__   | |   | |      / /| | |   \| | | |&#10;//|  _  | | | | |   / / | |   / / |__/ | | |  __|  | |   | |     / / | | | |\   | | |  _&#10;//| | | | | |_| |  / /  | |  / /       | | | |___  | |   | |    / /  | | | | \  | | |_| |&#10;//|_| |_| \_____/ /_/   |_| /_/        |_| |_____| |_|   |_|   /_/   |_| |_|  \_| \_____/&#10;&#10;/**&#10; * @Package: com.etang.nt_launcher.launcher&#10; * @ClassName: MainActivity&#10; * @Description: Main活动，主界面，桌面界面&#10; * @CreateDate: 2021/3/19 8:18&#10; * @UpdateDate: 2021/3/19 8:18&#10; * &lt;p&gt;&#10; * &lt;p&gt;&#10; * 于2021年12月11日 17点43分&#10; * 不会真的有人尝试看懂风滚草方式写出来的代码吧，不会吧不会吧。&#10; * 哦原来是我自己尝试看懂啊。&#10; * 坏了，看不懂了&#10; * 于2022年3月7日 09点27分&#10; * 别改了，好家伙，完全看不懂了，找时间重构吧&#10; * 于2022年4月6日 17点07分&#10; * 完了，摆烂，开始摆烂，这些代码就这样吧&#10; * 于2022年8月31日 21点05分&#10; * 摆烂！！！！！！！！！！！！&#10; * 2022年9月9日 18点08分&#10; * remake&#10; * 2022年9月12日 12点28分&#10; * 想办法重置吧，lite版也要重置了&#10; */&#10;public class MainActivity extends Activity implements OnClickListener {&#10;    private BroadcastReceiver batteryLevelRcvr;&#10;    private IntentFilter batteryLevelFilter;&#10;    private Handler handler;&#10;    private Runnable runnable;&#10;    private static MyDataBaseHelper dbHelper_name_sql;&#10;    private static SQLiteDatabase db;&#10;    public static TextView tv_user_id, tv_time_hour, tv_time_min, tv_main_batterystate, tv_city, tv_temp_state, tv_last_updatetime, tv_main_nowdate;&#10;    public static ImageView iv_setting_button, iv_setting_yinliang, iv_setting_refresh, iv_clean_button, iv_index_back;&#10;    public static ToggleButton tg_apps_state;&#10;    public static LinearLayout line_wather, line_bottom;&#10;    public static String string_app_info = &quot;&quot;;&#10;    public static GridView mListView;&#10;    public static List&lt;Bean_AppInfo&gt; beanAppInfos = new ArrayList&lt;Bean_AppInfo&gt;();&#10;    public static boolean offline_mode = false;&#10;    private AppInstallServer appinstallserver;&#10;    private SharedPreferences sharedPreferences;&#10;    private static String TAG = &quot;MainActivity&quot;;&#10;    //引入MTCore&#10;    private MTCore mtCore = new MTCore();&#10;&#10;    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR1)&#10;    @Override&#10;    protected void onCreate(final Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        //全屏&#10;        check_full_window();&#10;        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);&#10;        requestWindowFeature(Window.FEATURE_NO_TITLE);// 无Title&#10;        setContentView(R.layout.activity_main);&#10;        //绑定各类&#10;        initView();// 绑定控件&#10;        check_first_user();//检查是不是第一次使用&#10;        MTCore.check_save_permission(MainActivity.this);//检查存取权限&#10;        new_time_Thread();// 启用更新时间进程&#10;        read_info_help(MainActivity.this, sharedPreferences);//集中存放读取信息相关方法&#10;        // 长按弹出APP信息&#10;        mListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {&#10;            @Override&#10;            public boolean onItemLongClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {&#10;                try {&#10;                    String string_app_info = getAppInfo(position);&#10;                    UnInstallDialog.uninstall_app(position, beanAppInfos, MainActivity.this, MainActivity.this, string_app_info, beanAppInfos.get(position).getName());&#10;                } catch (Exception e) {&#10;                    MTCore.ErrorDialog(MainActivity.this, e.toString(), TAG);//显示错误信息&#10;                }&#10;                return true;&#10;            }&#10;        });&#10;        // 当点击GridView时，获取ID和应用包名并启动&#10;        mListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {&#10;            @Override&#10;            public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {&#10;                try {&#10;                    // Intent intent=appInfos.get(position).getIntent();&#10;                    // startActivity(intent);&#10;                    Intent intent = getPackageManager().getLaunchIntentForPackage(beanAppInfos.get(position).getPackageName());&#10;                    if (intent != null) {//点击的APP无异常&#10;                        try {&#10;                            db.execSQL(&quot;insert into appuselogs(appname,time)values(?,?)&quot;, new String[]{beanAppInfos.get(position).getName(), tv_main_nowdate.getText() + &quot;--&quot; + tv_time_hour.getText() + &quot;:&quot; + tv_time_min.getText()});&#10;                            intent.putExtra(&quot;type&quot;, &quot;110&quot;);&#10;                            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);&#10;                            startActivity(intent);&#10;                            overridePendingTransition(0, 0);&#10;                        } catch (Exception e) {&#10;                            db.execSQL(&quot;create table appuselogs (_id integer primary key autoincrement,appname text,time text)&quot;);&#10;                            MTCore.MessageDialog(&quot;数据库已部署，请再次点击你要打开的APP&quot;, MainActivity.this);&#10;                        }&#10;                    } else if (beanAppInfos.get(position).getPackageName().equals(getPackageName() + &quot;.weather&quot;)) {//点击了“天气”&#10;                        intent = new Intent(MainActivity.this, WeatherActivity.class);&#10;                        startActivity(intent);&#10;                        overridePendingTransition(0, 0);&#10;                    } else if (beanAppInfos.get(position).getPackageName().equals(getPackageName() + &quot;.locker&quot;)) {//点击了“锁屏”&#10;                        handler.removeCallbacks(runnable);&#10;                        intent = new Intent(MainActivity.this, MTLocker.class);&#10;                        startActivity(intent);&#10;                        finish();&#10;                    } else if (beanAppInfos.get(position).getPackageName().equals(getPackageName() + &quot;.appuserlogs&quot;)) {//点击了“使用记录”&#10;                        intent = new Intent(MainActivity.this, AppUseLogsActivity.class);&#10;                        startActivity(intent);&#10;                        overridePendingTransition(0, 0);&#10;                    } else if (beanAppInfos.get(position).getPackageName().equals(getPackageName() + &quot;.systemupdate&quot;)) {//点击了“检查更新”&#10;                        intent = new Intent(MainActivity.this, AboutActivity.class);&#10;                        startActivity(intent);&#10;                        overridePendingTransition(0, 0);&#10;                    } else if (beanAppInfos.get(position).getPackageName().equals(getPackageName() + &quot;.launchersetting&quot;)) {//点击了“桌面设置”&#10;                        intent = new Intent(MainActivity.this, SettingActivity.class);&#10;                        startActivity(intent);&#10;                        overridePendingTransition(0, 0);&#10;                    } else if (beanAppInfos.get(position).getPackageName().equals(getPackageName() + &quot;.uirefresh&quot;)) {//点击了“刷新屏幕”&#10;                        String s = Build.BRAND;&#10;                        if (s.equals(&quot;Allwinner&quot;)) {&#10;                            Intent intent_refresh = new Intent(&quot;android.eink.force.refresh&quot;);&#10;                            sendBroadcast(intent_refresh);&#10;                        } else {&#10;                            startActivity(new Intent(MainActivity.this, UireFreshActivity.class));&#10;                            overridePendingTransition(0, 0);&#10;                        }&#10;                    } else if (beanAppInfos.get(position).getPackageName().equals(getPackageName() + &quot;.systemclean&quot;)) {//点击了“清理”&#10;                        String s_clean = Build.BRAND;&#10;                        if (s_clean.equals(&quot;Allwinner&quot;)) {&#10;                            //唤醒广播&#10;                            Intent intent_clear = new Intent(&quot;com.mogu.clear_mem&quot;);&#10;                            sendBroadcast(intent_clear);&#10;                        }&#10;                    } else if (beanAppInfos.get(position).getPackageName().equals(getPackageName() + &quot;.userhelper&quot;)) {&#10;                        MTCore.showToast(getApplicationContext(), &quot;打开&quot;, true);&#10;                        intent.putExtra(&quot;state&quot;, &quot;false&quot;);&#10;                        intent = new Intent(MainActivity.this, WelecomeActivity.class);&#10;                        startActivity(intent);&#10;                        overridePendingTransition(0, 0);&#10;                    } else {//出现异常&#10;                        MTCore.ErrorDialog(MainActivity.this, &quot;启动APP时出现“Intent”相关的异常&quot;, TAG);&#10;                    }&#10;                } catch (Exception e) {&#10;                    MTCore.ErrorDialog(MainActivity.this, e.toString(), TAG);&#10;                }&#10;            }&#10;        });&#10;        //桌面壁纸长按事件&#10;        iv_index_back.setOnLongClickListener(new OnLongClickListener() {&#10;            @Override&#10;            public boolean onLongClick(View v) {&#10;                iv_index_back.setVisibility(View.GONE);&#10;                mListView.setVisibility(View.VISIBLE);&#10;                tg_apps_state.setChecked(true);&#10;                return true;&#10;            }&#10;        });&#10;        //切换应用列表&#10;        tg_apps_state.setOnCheckedChangeListener(new OnCheckedChangeListener() {&#10;&#10;            @Override&#10;            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {&#10;                // TODO Auto-generated method stub&#10;                if (isChecked) {&#10;                    mListView.setVisibility(View.VISIBLE);&#10;                    iv_index_back.setVisibility(View.GONE);&#10;                } else {&#10;                    mListView.setVisibility(View.GONE);&#10;                    iv_index_back.setVisibility(View.VISIBLE);&#10;                }&#10;            }&#10;        });&#10;        //长按“小时”进入设置&#10;        tv_time_hour.setOnLongClickListener(new OnLongClickListener() {&#10;            @Override&#10;            public boolean onLongClick(View v) {&#10;                startActivity(new Intent(MainActivity.this, SettingActivity.class));&#10;                overridePendingTransition(0, 0);&#10;                return true;&#10;            }&#10;        });&#10;        /**&#10;         * 每次回到桌面开启常驻通知&#10;         */&#10;        new Handler().postDelayed(new Runnable() {&#10;            @Override&#10;            public void run() {&#10;                setNotification();&#10;            }&#10;        }, 50);&#10;    }&#10;&#10;&#10;    private String getAppInfo(int position) {&#10;        return beanAppInfos.get(position).getPackageName();&#10;    }&#10;&#10;&#10;    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR1)&#10;    private void read_info_help(Context c, SharedPreferences sharedPreferences) {&#10;        initAppList(c);// 获取应用列表&#10;        monitorBatteryState();// 监听电池信息&#10;        check_text_size(c);//检查文本大小&#10;        rember_name(c);// 读取昵称&#10;        update_wathers(sharedPreferences);//更新天气&#10;        check_view_hind(c, sharedPreferences);//检查底栏是否隐藏&#10;        check_offline_mode(c, sharedPreferences);//检查离线模式是否打开&#10;        check_oldman_mode(c, sharedPreferences);//检查老年模式是否打开&#10;        check_Language(c, sharedPreferences);&#10;        get_applist_number(c, sharedPreferences);//获取设定的应用列表列数&#10;        images_upgrade(c, sharedPreferences);//更新图像信息&#10;        set_app_setStackFromBottomMode(sharedPreferences);//检查并设置APP列表排列方式&#10;        check_full_window();//检查全屏设置&#10;    }&#10;&#10;    private void check_full_window() {&#10;        try {&#10;            SharedPreferences sharedPreferences = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE);&#10;            if (sharedPreferences.getString(&quot;setting_full_windows&quot;, null).equals(&quot;true&quot;)) {&#10;                getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);&#10;            } else {&#10;                getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);&#10;            }&#10;        } catch (Exception e) {&#10;            SharedPreferences sharedPreferences = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE);&#10;            sharedPreferences.edit().putString(&quot;setting_full_windows&quot;, &quot;false&quot;).commit();&#10;            check_full_window();&#10;            MTCore.showToast_new(&quot;出现错误&quot;, true);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 设置中文&#10;     *&#10;     * @param context&#10;     * @param sharedPreferences&#10;     */&#10;    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR1)&#10;    private void check_Language(Context context, SharedPreferences sharedPreferences) {&#10;        int language = 0;&#10;        try {&#10;            //读取SharedPreferences数据，默认选中第一项&#10;            language = Integer.valueOf(sharedPreferences.getString(&quot;language&quot;, null));&#10;        } catch (Exception e) {&#10;            sharedPreferences.edit().putString(&quot;language&quot;, &quot;0&quot;).commit();&#10;            check_Language(context, sharedPreferences);&#10;        }&#10;        //根据读取到的数据，进行设置&#10;        Resources resources = getResources();&#10;        DisplayMetrics displayMetrics = resources.getDisplayMetrics();&#10;        Configuration configuration = resources.getConfiguration();&#10;        switch (language) {&#10;            case 0:&#10;                //自动获取&#10;                configuration.setLocale(Locale.getDefault());&#10;                break;&#10;            case 1:&#10;                //中文&#10;                configuration.setLocale(Locale.CHINESE);&#10;                break;&#10;            case 2:&#10;                //英文&#10;                configuration.setLocale(Locale.ENGLISH);&#10;                break;&#10;            case 3:&#10;                //日文&#10;                configuration.setLocale(Locale.JAPANESE);&#10;                break;&#10;            default:&#10;                break;&#10;        }&#10;        resources.updateConfiguration(configuration, displayMetrics);&#10;    }&#10;&#10;&#10;    @Override&#10;    protected void onRestart() {&#10;        super.onRestart();&#10;        SharedPreferences sharedPreferences = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE);&#10;        check_view_hind(MainActivity.this, sharedPreferences);//检查底栏是否隐藏&#10;        check_offline_mode(MainActivity.this, sharedPreferences);//检查离线模式是否打开&#10;        get_applist_number(MainActivity.this, sharedPreferences);//获取设定的应用列表列数&#10;        images_upgrade(MainActivity.this, sharedPreferences);//更新图像信息&#10;        set_app_setStackFromBottomMode(sharedPreferences);//检查并设置APP列表排列方式&#10;    }&#10;&#10;&#10;    public static void initSkinMode(Context context, String s) {&#10;        try {&#10;            // 获取壁纸管理器&#10;            WallpaperManager wallpaperManager = WallpaperManager.getInstance(context);&#10;            // 获取当前壁纸&#10;            if (ActivityCompat.checkSelfPermission(context, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {&#10;                // TODO: Consider calling&#10;                //    ActivityCompat#requestPermissions&#10;                // here to request the missing permissions, and then overriding&#10;                //   public void onRequestPermissionsResult(int requestCode, String[] permissions,&#10;                //                                          int[] grantResults)&#10;                // to handle the case where the user grants the permission. See the documentation&#10;                // for ActivityCompat#requestPermissions for more details.&#10;                return;&#10;            }&#10;            BitmapDrawable wallpaperDrawable = (BitmapDrawable) wallpaperManager.getDrawable();&#10;            // 将Drawable,转成Bitmap&#10;            Bitmap bitmap = Bitmap.createBitmap(wallpaperDrawable.getBitmap());&#10;            // 设置 背景&#10;            if (s.equals(&quot;app_wallpaper&quot;)) {&#10;                MainActivity.iv_index_back.setVisibility(View.VISIBLE);&#10;                MainActivity.mListView.setVisibility(View.GONE);&#10;                MainActivity.iv_index_back.setImageBitmap(bitmap);&#10;                MainActivity.tg_apps_state.setVisibility(View.VISIBLE);&#10;                tg_apps_state.setChecked(false);&#10;            }&#10;            if (s.equals(&quot;app_wallpaper_applist&quot;)) {&#10;                MainActivity.iv_index_back.setVisibility(View.VISIBLE);&#10;                MainActivity.mListView.setVisibility(View.VISIBLE);&#10;                MainActivity.iv_index_back.setImageBitmap(bitmap);&#10;                MainActivity.tg_apps_state.setVisibility(View.GONE);&#10;            }&#10;        } catch (Exception e) {&#10;            /**&#10;             * 创建纯白bitmap&#10;             */&#10;            Bitmap bitmap = Bitmap.createBitmap(400, 400, Bitmap.Config.ARGB_8888); // 创建画布&#10;            drawCanvas(bitmap);&#10;            MainActivity.iv_index_back.setVisibility(View.VISIBLE);&#10;            MainActivity.mListView.setVisibility(View.VISIBLE);&#10;            MainActivity.iv_index_back.setImageBitmap(bitmap);&#10;            MainActivity.tg_apps_state.setVisibility(View.GONE);&#10;//            MTCore.showToast(context, &quot;系统壁纸出错，重置为白色&quot;, true);&#10;            MTCore.ErrorDialog(context, &quot;系统壁纸获取出错 \n 请更改其他壁纸设置 \n 错误信息：&quot; + e.toString(), TAG);&#10;        }&#10;    }&#10;&#10;    public static void drawCanvas(Bitmap bitmap) {&#10;        bitmap.eraseColor(Color.parseColor(&quot;#ff0000&quot;)); // 填充颜色&#10;        Canvas canvas = new Canvas(bitmap);&#10;        Paint paint = new Paint();&#10;        paint.setTextSize(100);&#10;        paint.setColor(Color.DKGRAY);&#10;        paint.setFlags(Paint.ANTI_ALIAS_FLAG);&#10;        paint.setStyle(Paint.Style.STROKE); //用于设置字体填充的类型&#10;//        canvas.drawText(&quot;Ken&quot;, 100, 100, paint);&#10;        //最后通过Imageview显示出来&#10;        MainActivity.iv_index_back.setImageBitmap(bitmap);&#10;    }&#10;&#10;&#10;    private void set_app_setStackFromBottomMode(SharedPreferences sharedPreferences) {&#10;        if (sharedPreferences.getBoolean(&quot;app_setStackFromBottomMode&quot;, true) == false) {&#10;            mListView.setStackFromBottom(false);&#10;        } else {&#10;            mListView.setStackFromBottom(true);&#10;        }&#10;    }&#10;&#10;    private void check_first_user() {&#10;        if (isFirstStart(MainActivity.this)) {//第一次&#10;            //第一次启动预填充数据，并且跳转至欢迎界面&#10;            //填充预设数据&#10;            fillPresetData();&#10;            //填充预设隐藏应用包名&#10;            ArrayList&lt;String&gt; arrayList = new ArrayList&lt;String&gt;();&#10;            arrayList.add(&quot;frist&quot;);&#10;            SaveArrayListUtil.saveArrayList(MainActivity.this, arrayList, &quot;start&quot;);//存储在本地&#10;            //跳转到欢迎界面&#10;            startActivity(new Intent(getApplicationContext(), WelecomeActivity.class));&#10;            overridePendingTransition(0, 0);&#10;            finish();&#10;        } else {&#10;            //更新桌面信息&#10;            images_upgrade(MainActivity.this, sharedPreferences);&#10;        }&#10;    }&#10;&#10;    private void fillPresetData() {&#10;        SharedPreferences.Editor editor = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE).edit();&#10;        editor.putString(&quot;images_info&quot;, &quot;applist&quot;);//默认显示内容&#10;        editor.putString(&quot;images_app_listifo&quot;, &quot;true&quot;);&#10;        editor.putString(&quot;appname_state&quot;, &quot;one&quot;);//是否显示APP名称&#10;        editor.putString(&quot;applist_number&quot;, &quot;5&quot;);//默认APP列表大小&#10;        editor.putString(&quot;timetext_min_size&quot;, &quot;40&quot;);//分钟时间大小&#10;        editor.putString(&quot;timetext_hour_size&quot;, &quot;70&quot;);//小时时间大小&#10;        editor.putString(&quot;nametext_size&quot;, &quot;16&quot;);//昵称文本大小&#10;        editor.putString(&quot;dianchitext_size&quot;, &quot;16&quot;);//电池文本大小&#10;        editor.putString(&quot;datetext_size&quot;, &quot;16&quot;);//日期文本大小&#10;        editor.putString(&quot;setting_ico_hind&quot;, &quot;false&quot;);//隐藏底栏&#10;        editor.putString(&quot;offline&quot;, &quot;false&quot;);//离线模式&#10;        editor.putString(&quot;oldman&quot;, &quot;false&quot;);//老年模式&#10;        editor.putBoolean(&quot;app_setStackFromBottomMode&quot;, false);//默认显示内容&#10;        editor.putString(&quot;icon_size&quot;, &quot;45&quot;);//图标大小&#10;        editor.putString(&quot;language&quot;, &quot;0&quot;);//设置语言&#10;        editor.apply();&#10;    }&#10;&#10;&#10;    public static void check_oldman_mode(Context context, SharedPreferences sharedPreferences) {&#10;        try {&#10;            String offline = sharedPreferences.getString(&quot;offline&quot;, null);&#10;            if (offline.equals(&quot;true&quot;)) {&#10;                offline_mode = true;&#10;            } else {&#10;                offline_mode = false;&#10;            }&#10;        } catch (Exception e) {&#10;            SharedPreferences.Editor editor = context.getSharedPreferences(&quot;info&quot;, context.MODE_PRIVATE).edit();&#10;            editor.putString(&quot;oldman&quot;, &quot;false&quot;);//日期文本大小&#10;            editor.apply();&#10;        }&#10;    }&#10;&#10;    public static void check_offline_mode(Context context, SharedPreferences sharedPreferences) {&#10;        try {&#10;            String offline = sharedPreferences.getString(&quot;offline&quot;, null);&#10;            if (offline.equals(&quot;true&quot;)) {&#10;                offline_mode = true;&#10;            } else {&#10;                offline_mode = false;&#10;            }&#10;        } catch (Exception e) {&#10;            SharedPreferences.Editor editor = context.getSharedPreferences(&quot;info&quot;, context.MODE_PRIVATE).edit();&#10;            editor.putString(&quot;offline&quot;, &quot;false&quot;);//日期文本大小&#10;            editor.apply();&#10;        }&#10;    }&#10;&#10;    public static void check_view_hind(Context context, SharedPreferences sharedPreferences) {&#10;//        if (Build.BRAND.toString().equals(&quot;Allwinner&quot;)) {&#10;//            iv_setting_refresh.setVisibility(View.GONE);&#10;//        }&#10;        try {&#10;            String ico_info = sharedPreferences.getString(&quot;setting_ico_hind&quot;, null);&#10;            if (ico_info.equals(&quot;true&quot;)) {&#10;                line_bottom.setVisibility(View.GONE);&#10;            } else {&#10;                line_bottom.setVisibility(View.VISIBLE);&#10;            }&#10;        } catch (Exception e) {&#10;            SharedPreferences.Editor editor = context.getSharedPreferences(&quot;info&quot;, context.MODE_PRIVATE).edit();&#10;            editor.putString(&quot;setting_ico_hind&quot;, &quot;false&quot;);//日期文本大小&#10;            editor.apply();&#10;        }&#10;    }&#10;&#10;    private void get_applist_number(Context context, SharedPreferences sharedPreferences) {&#10;        try {&#10;            String applist_number = sharedPreferences.getString(&quot;applist_number&quot;, null);&#10;            if (applist_number.equals(&quot;auto&quot;)) {&#10;                mListView.setNumColumns(GridView.AUTO_FIT);&#10;            }&#10;            if (!applist_number.equals(&quot;auto&quot;)) {&#10;                mListView.setNumColumns(Integer.valueOf(applist_number));&#10;            }&#10;        } catch (Exception e) {&#10;            SharedPreferences.Editor editor = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE).edit();&#10;            editor.putString(&quot;applist_number&quot;, &quot;auto&quot;);&#10;            editor.apply();&#10;            mListView.setNumColumns(GridView.AUTO_FIT);&#10;        }&#10;    }&#10;&#10;    public boolean isFirstStart(Context context) {&#10;        SharedPreferences preferences = context.getSharedPreferences(&quot;SHARE_APP_TAG&quot;, 0);&#10;        Boolean isFirst = preferences.getBoolean(&quot;FIRSTStart&quot;, true);&#10;        if (isFirst) {// 第一次&#10;            preferences.edit().putBoolean(&quot;FIRSTStart&quot;, false).commit();&#10;            return true;&#10;        } else {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 检查图片&#10;     */&#10;    private void images_upgrade(Context c, SharedPreferences sharedPreferences) {&#10;        try {&#10;            String images_mode = sharedPreferences.getString(&quot;images_info&quot;, null);&#10;            if (images_mode.equals(&quot;ql&quot;)) {&#10;                iv_index_back.setImageResource(R.drawable.mi_haole);&#10;                iv_index_back.setVisibility(View.VISIBLE);&#10;                mListView.setVisibility(View.GONE);&#10;                tg_apps_state.setVisibility(View.VISIBLE);&#10;                tg_apps_state.setChecked(false);&#10;            }&#10;            if (images_mode.equals(&quot;mz&quot;)) {&#10;                iv_index_back.setImageResource(R.drawable.mi_meizi);&#10;                iv_index_back.setVisibility(View.VISIBLE);&#10;                mListView.setVisibility(View.GONE);&#10;                tg_apps_state.setVisibility(View.VISIBLE);&#10;                tg_apps_state.setChecked(false);&#10;            }&#10;            if (images_mode.equals(&quot;ll&quot;)) {&#10;                iv_index_back.setImageResource(R.drawable.mi_luoli);&#10;                iv_index_back.setVisibility(View.VISIBLE);&#10;                mListView.setVisibility(View.GONE);&#10;                tg_apps_state.setVisibility(View.VISIBLE);&#10;                tg_apps_state.setChecked(false);&#10;            }&#10;            if (images_mode.equals(&quot;zy&quot;)) {&#10;                iv_index_back.setImageResource(R.drawable.mi_zhiyu);&#10;                iv_index_back.setVisibility(View.VISIBLE);&#10;                mListView.setVisibility(View.GONE);&#10;                tg_apps_state.setVisibility(View.VISIBLE);&#10;                tg_apps_state.setChecked(false);&#10;            }&#10;            if (images_mode.equals(&quot;applist&quot;)) {&#10;                iv_index_back.setImageResource(R.drawable.mi_haole);&#10;                iv_index_back.setVisibility(View.GONE);&#10;                mListView.setVisibility(View.VISIBLE);&#10;                tg_apps_state.setVisibility(View.GONE);&#10;            }&#10;            if (images_mode.equals(&quot;&quot;)) {&#10;                iv_index_back.setImageResource(R.drawable.mi_haole);&#10;                iv_index_back.setVisibility(View.GONE);&#10;                mListView.setVisibility(View.VISIBLE);&#10;                MTCore.showToast(this, &quot;请选择壁纸或者应用列表（设置-壁纸设置）&quot;, false);&#10;            }&#10;            if (images_mode.equals(&quot;app_wallpaper&quot;)) {&#10;                initSkinMode(MainActivity.this, images_mode);&#10;            }&#10;            if (images_mode.equals(&quot;app_wallpaper_applist&quot;)) {&#10;                initSkinMode(MainActivity.this, images_mode);&#10;            }&#10;        } catch (Exception e) {&#10;            MTCore.ErrorDialog(c, &quot;桌面壁纸出现错误，已重置为默认&quot;, TAG);&#10;            sharedPreferences.edit().putString(&quot;images_info&quot;, &quot;applist&quot;).apply();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        // TODO Auto-generated method stub&#10;        super.onResume();&#10;        initAppList(MainActivity.this);&#10;    }&#10;&#10;    /**&#10;     * +获取应用列表、隐藏应用&#10;     *&#10;     * @param context&#10;     */&#10;//    public static void initAppList(Context context) {&#10;//        beanAppInfos = GetApps.GetAppList1(context);&#10;//        ArrayList&lt;String&gt; hind_apparrayList = new ArrayList&lt;String&gt;();&#10;//        hind_apparrayList.clear();&#10;//        hind_apparrayList = SaveArrayListUtil.getSearchArrayList(context);&#10;//        String s = Build.BRAND;&#10;//        if (s.equals(&quot;Allwinner&quot;)) {&#10;//            hind_apparrayList.add(&quot;com.android.settings&quot;);&#10;//        }&#10;//        Log.i(TAG, &quot;initAppList: --------------removeing packname-----------&quot;);&#10;//        for (int j = 0; j &lt; hind_apparrayList.size(); j++) {&#10;//            for (int i = 0; i &lt; beanAppInfos.size(); i++) {&#10;//                if (hind_apparrayList.get(j).equals(beanAppInfos.get(i).getPackageName())) {&#10;//                    Log.i(TAG, &quot;initAppList: remove:&quot; + i);&#10;//                    beanAppInfos.remove(i);&#10;//                }&#10;//            }&#10;//        }&#10;//        DeskTopGridViewBaseAdapter deskTopGridViewBaseAdapter = new DeskTopGridViewBaseAdapter(beanAppInfos, context);&#10;//        mListView.setAdapter(deskTopGridViewBaseAdapter);&#10;//    }&#10;    public static void initAppList(Context context) {&#10;        try {&#10;            beanAppInfos = GetApps.GetAppList1(context);&#10;            ArrayList&lt;String&gt; hind_apparrayList = SaveArrayListUtil.getSearchArrayList(context);&#10;            String s = Build.BRAND;&#10;&#10;            // 如果品牌是Allwinner，添加特定的应用包名&#10;            if (s.equals(&quot;Allwinner&quot;)) {&#10;                hind_apparrayList.add(&quot;com.android.settings&quot;);&#10;            }&#10;            Log.i(TAG, &quot;initAppList: --------------hind_apparrayList-----------&quot;);&#10;            Log.i(TAG, &quot;initAppList: &quot; + hind_apparrayList);&#10;            Log.i(TAG, &quot;initAppList: --------------beanAppInfos-----------&quot;);&#10;            Log.i(TAG, &quot;initAppList: &quot; + beanAppInfos);&#10;&#10;            // 使用Stream API来过滤不需要的应用&#10;            // 注意：这里假设beanAppInfos是一个列表，并且getPackageName()方法不存在异常风险&#10;            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) {&#10;                beanAppInfos.removeIf(appInfo -&gt; hind_apparrayList.stream().anyMatch(hindApp -&gt; hindApp.equals(appInfo.getPackageName())));&#10;            } else {&#10;                for (int j = 0; j &lt; hind_apparrayList.size(); j++) {&#10;                    for (int i = 0; i &lt; beanAppInfos.size(); i++) {&#10;                        if (hind_apparrayList.get(j).equals(beanAppInfos.get(i).getPackageName())) {&#10;                            Log.i(TAG, &quot;initAppList: --------------removeing packname-----------&quot;);&#10;                            Log.i(TAG, &quot;initAppList: remove:&quot; + beanAppInfos.get(i).getPackageName());&#10;                            beanAppInfos.remove(i);&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // 创建适配器并设置到ListView&#10;            DeskTopGridViewBaseAdapter deskTopGridViewBaseAdapter = new DeskTopGridViewBaseAdapter(beanAppInfos, context);&#10;            mListView.setAdapter(deskTopGridViewBaseAdapter);&#10;        } catch (Exception e) {&#10;            // 记录异常信息，可以根据需要进行异常处理&#10;            Log.e(TAG, &quot;Error initializing app list&quot;, e);&#10;        }&#10;    }&#10;&#10;&#10;    /**&#10;     * 读取昵称&#10;     * &lt;p&gt;&#10;     * SQLite&#10;     */&#10;    public static void rember_name(Context c) {&#10;        Cursor cursor = MainActivity.db.rawQuery(&quot;select * from name&quot;, null);&#10;        if (cursor.getCount() != 0) {&#10;            cursor.moveToFirst();&#10;            @SuppressLint(&quot;Range&quot;) String username = cursor.getString(cursor.getColumnIndex(&quot;username&quot;));&#10;            MainActivity.tv_user_id.setText(username);&#10;            if (MainActivity.tv_user_id.getText().toString().isEmpty()) {&#10;                MainActivity.tv_user_id.setText(&quot;请设置文本（桌面设置中）&quot;);&#10;            } else if (MainActivity.tv_user_id.getText().toString().equals(&quot;&quot;)) {&#10;                MainActivity.tv_user_id.setText(&quot;请设置文本（桌面设置中）&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 更新时间&#10;     */&#10;    private void new_time_Thread() {&#10;        handler = new Handler();&#10;        runnable = new Runnable() {&#10;&#10;            @Override&#10;            public void run() {&#10;                // TODO Auto-generated method stub&#10;                SimpleDateFormat simpleDateFormat_hour = new SimpleDateFormat(&quot;HH&quot;);&#10;                SimpleDateFormat simpleDateFormat_min = new SimpleDateFormat(&quot;mm&quot;);&#10;                SimpleDateFormat simpleDateFormat_date = new SimpleDateFormat(&quot;yyyy/MM/dd&quot;);&#10;                SimpleDateFormat simpleDateFormat_weekday = new SimpleDateFormat(&quot;EEEE&quot;); // 用于显示星期&#10;                // 获取当前日期和星期&#10;                String currentDate = simpleDateFormat_date.format(new java.util.Date());&#10;                String currentWeekday = simpleDateFormat_weekday.format(new java.util.Date());&#10;                // 设置文本，这里假设你想要日期和星期在同一行显示，用空格分隔&#10;                tv_main_nowdate.setText(currentDate + &quot; &quot; + currentWeekday);&#10;                tv_time_hour.setText(simpleDateFormat_hour.format(new java.util.Date()));&#10;                tv_time_min.setText(simpleDateFormat_min.format(new java.util.Date()));&#10;                handler.postDelayed(runnable, 1000);&#10;            }&#10;        };&#10;        handler.post(runnable);&#10;    }&#10;&#10;    /**&#10;     * 绑定控件&#10;     */&#10;    private void initView() {&#10;        sharedPreferences = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE);&#10;        line_bottom = (LinearLayout) findViewById(R.id.line_bottom);&#10;        tv_main_nowdate = (TextView) findViewById(R.id.tv_main_nowdate);&#10;        iv_clean_button = (ImageView) findViewById(R.id.iv_setting_clear);&#10;        iv_setting_refresh = (ImageView) findViewById(R.id.iv_setting_refresh);&#10;        mListView = (GridView) findViewById(R.id.mAppGridView);&#10;        iv_setting_button = (ImageView) findViewById(R.id.iv_setting_button);&#10;        tv_time_hour = (TextView) findViewById(R.id.tv_time_hour);&#10;        tg_apps_state = (ToggleButton) findViewById(R.id.tg_apps_state);&#10;        tv_time_min = (TextView) findViewById(R.id.tv_time_min);&#10;        tv_user_id = (TextView) findViewById(R.id.tv_user_id);&#10;        tv_main_batterystate = (TextView) findViewById(R.id.tv_main_batterystate);&#10;        line_wather = (LinearLayout) findViewById(R.id.line_wather);&#10;        tv_city = (TextView) findViewById(R.id.tv_city);&#10;        iv_index_back = (ImageView) findViewById(R.id.iv_index_back);&#10;        tv_temp_state = (TextView) findViewById(R.id.tv_temp_state);&#10;        tv_last_updatetime = (TextView) findViewById(R.id.tv_last_updatetime);&#10;        iv_setting_button.setOnClickListener(this);&#10;        line_wather.setOnClickListener(this);&#10;        iv_setting_refresh.setOnClickListener(this);&#10;        iv_clean_button.setOnClickListener(this);&#10;        String s_clean = Build.BRAND;&#10;        if (s_clean.equals(&quot;Allwinner&quot;)) {&#10;            iv_clean_button.setVisibility(View.VISIBLE);&#10;        } else {&#10;            iv_clean_button.setVisibility(View.GONE);&#10;        }&#10;        //数据库&#10;        dbHelper_name_sql = new MyDataBaseHelper(getApplicationContext(), &quot;info.db&quot;, null, 2);&#10;        db = dbHelper_name_sql.getWritableDatabase();&#10;        //动态注册&#10;        appinstallserver = new AppInstallServer();&#10;        appinstallserver.register(this);&#10;    }&#10;&#10;    private void update_wathers(SharedPreferences sharedPreferences) {&#10;        if (!offline_mode) {&#10;//            line_wather.setVisibility(View.VISIBLE);&#10;            tv_temp_state.setText(sharedPreferences.getString(&quot;wather_info_temp&quot;, null));&#10;            tv_last_updatetime.setText(sharedPreferences.getString(&quot;wather_info_updatetime&quot;, null));&#10;            tv_city.setText(sharedPreferences.getString(&quot;wather_info_citytype&quot;, null));&#10;            /**&#10;             * 判断设置是不是隐藏天气布局&#10;             */&#10;            check_weather_view(sharedPreferences);&#10;        } else {&#10;//            line_wather.setVisibility(View.INVISIBLE);&#10;        }&#10;    }&#10;&#10;    private void check_weather_view(SharedPreferences sharedPreferences) {&#10;        if (sharedPreferences.getBoolean(&quot;isHind_weather&quot;, false) == true) {&#10;//            line_wather.setVisibility(View.INVISIBLE);&#10;        } else if (sharedPreferences.getBoolean(&quot;isHind_weather&quot;, false) == false) {&#10;//            line_wather.setVisibility(View.VISIBLE);&#10;        } else {&#10;//            line_wather.setVisibility(View.VISIBLE);&#10;        }&#10;    }&#10;&#10;    private Handler mHandler = new Handler() {&#10;        public void handleMessage(Message msg) {&#10;            switch (msg.what) {&#10;                case 0:&#10;                    String fengxiang = &quot;&quot;;&#10;                    String fengli = &quot;&quot;;&#10;                    String high = &quot;&quot;;&#10;                    String type = &quot;&quot;;&#10;                    String low = &quot;&quot;;&#10;                    String date = &quot;&quot;;&#10;                    JSONArray dataArray = (JSONArray) msg.obj;&#10;                    try {&#10;                        String json_today = dataArray.getString(0);&#10;&#10;                        System.out.println(&quot;-----------&quot; + json_today);&#10;&#10;                        JSONObject jsonObject = dataArray.getJSONObject(0);&#10;                        System.out.println(jsonObject);&#10;                        if (jsonObject != null) {&#10;                            fengxiang = jsonObject.optString(&quot;fengxiang&quot;);&#10;                            fengli = jsonObject.optString(&quot;fengli&quot;);&#10;                            high = jsonObject.optString(&quot;high&quot;);&#10;                            type = jsonObject.optString(&quot;type&quot;);&#10;                            low = jsonObject.optString(&quot;low&quot;);&#10;                            date = jsonObject.optString(&quot;date&quot;);&#10;                        }&#10;                        Cursor cursor = db.rawQuery(&quot;select * from wather_city&quot;, null);&#10;                        if (cursor.getCount() != 0) {&#10;                            cursor.moveToFirst();&#10;                            @SuppressLint(&quot;Range&quot;) String city = cursor.getString(cursor.getColumnIndex(&quot;city&quot;));&#10;                            tv_city.setText(city + &quot;  &quot; + type);&#10;                        } else {&#10;                            MTCore.showToast(getApplicationContext(), &quot;请到“梅糖天气”设置位置信息&quot;, true);&#10;                        }&#10;                        @SuppressLint(&quot;Range&quot;) String city = cursor.getString(cursor.getColumnIndex(&quot;city&quot;));&#10;                        SharedPreferences.Editor editor = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE).edit();&#10;                        editor.putString(&quot;wather_info_citytype&quot;, city + &quot;  &quot; + type);&#10;                        editor.putString(&quot;wather_info_wind&quot;, fengxiang);&#10;                        editor.putString(&quot;wather_info_temp&quot;, high + &quot;  &quot; + low);&#10;                        editor.putString(&quot;wather_info_updatetime&quot;, &quot;于&quot; + tv_time_hour.getText().toString() + &quot;:&quot; + tv_time_min.getText().toString() + &quot;更新&quot;);&#10;                        editor.apply();&#10;                        /**&#10;                         * 更新天气信息&#10;                         */&#10;                        SharedPreferences sharedPreferences;&#10;                        sharedPreferences = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE);&#10;                        update_wathers(sharedPreferences);&#10;                    } catch (Exception e) {&#10;                        // TODO: handle exception&#10;                    }&#10;                    break;&#10;                case 1:&#10;                    MTCore.showToast(getApplicationContext(), &quot;城市无效（已重置为上海）&quot;, true);&#10;                    db.execSQL(&quot;update wather_city set city = ? &quot;, new String[]{&quot;上海&quot;});&#10;                    break;&#10;                case 2:&#10;                    SharedPreferences.Editor editor = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE).edit();&#10;                    editor.putString(&quot;wather_info_updatetime&quot;, &quot;于&quot; + tv_time_hour.getText().toString() + &quot;:&quot; + tv_time_min.getText().toString() + &quot;更新（离线状态）&quot;);&#10;                    editor.apply();&#10;                    SharedPreferences sharedPreferences;&#10;                    sharedPreferences = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE);&#10;                    update_wathers(sharedPreferences);&#10;                    break;&#10;                default:&#10;                    break;&#10;            }&#10;        }&#10;    };&#10;&#10;    /**&#10;     * 拦截返回键、Home键&#10;     */&#10;    @Override&#10;    public boolean onKeyDown(int keyCode, KeyEvent event) {&#10;        // TODO Auto-generated method stub&#10;        if (keyCode == KeyEvent.KEYCODE_BACK) {&#10;            return false;&#10;        }&#10;        if (keyCode == KeyEvent.KEYCODE_HOME) {&#10;            MTCore.showToast(MainActivity.this, &quot;已经回到桌面&quot;, false);&#10;            return false;&#10;        }&#10;        return super.onKeyDown(keyCode, event);&#10;    }&#10;&#10;    /**&#10;     * Activity被销毁的同时销毁广播&#10;     */&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        unregisterReceiver(batteryLevelRcvr);&#10;        appinstallserver.unregister(this);&#10;    }&#10;&#10;    /**&#10;     * 充电状态显示&#10;     * &lt;p&gt;&#10;     * Code Copy from http://blog.sina.com.cn/s/blog_c79c5e3c0102uyun.html&#10;     */&#10;    private void monitorBatteryState() {&#10;        batteryLevelRcvr = new BroadcastReceiver() {&#10;            public void onReceive(Context context, Intent intent) {&#10;                StringBuilder sb = new StringBuilder();&#10;                int rawlevel = intent.getIntExtra(&quot;level&quot;, -1);&#10;                int scale = intent.getIntExtra(&quot;scale&quot;, -1);&#10;                int status = intent.getIntExtra(&quot;status&quot;, -1);&#10;                int health = intent.getIntExtra(&quot;health&quot;, -1);&#10;                int level = -1; // percentage, or -1 for unknown&#10;                if (rawlevel &gt;= 0 &amp;&amp; scale &gt; 0) {&#10;                    level = (rawlevel * 100) / scale;&#10;                }&#10;                if (BatteryManager.BATTERY_HEALTH_OVERHEAT == health) {&#10;                    sb.append(&quot;'s battery feels very hot!&quot;);&#10;                } else {&#10;                    if (status == BatteryManager.BATTERY_STATUS_FULL) {//充电完成&#10;                        sb.append(String.valueOf(level) + &quot;% 已充满 &quot;);&#10;                        tv_main_batterystate.setText(sb.toString());&#10;                    }&#10;                    if (status == BatteryManager.BATTERY_STATUS_CHARGING) {//充电&#10;                        sb.append(String.valueOf(level) + &quot;% 充电中 &quot;);&#10;                        tv_main_batterystate.setText(sb.toString());&#10;                    }&#10;                    if (status == BatteryManager.BATTERY_STATUS_DISCHARGING) {//放电&#10;                        sb.append(String.valueOf(level) + &quot;% &quot;);&#10;                        tv_main_batterystate.setText(sb.toString());&#10;                    }&#10;                    if (status == BatteryManager.BATTERY_STATUS_NOT_CHARGING) {//未在充电&#10;                        sb.append(String.valueOf(level) + &quot;% &quot;);&#10;                        tv_main_batterystate.setText(sb.toString());&#10;                    }&#10;                }&#10;                sb.append(' ');&#10;            }&#10;        };&#10;        batteryLevelFilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);&#10;        registerReceiver(batteryLevelRcvr, batteryLevelFilter);&#10;    }&#10;&#10;    /**&#10;     * 桌面底栏功能 点击事件监听&#10;     */&#10;    @Override&#10;    public void onClick(View v) {&#10;        // TODO Auto-generated method stub&#10;        switch (v.getId()) {&#10;            //设置&#10;            case R.id.iv_setting_button:&#10;                startActivity(new Intent(getApplicationContext(), SettingActivity.class));&#10;                overridePendingTransition(0, 0);&#10;                break;&#10;            case R.id.iv_setting_clear:&#10;                String s_clean = Build.BRAND;&#10;                if (s_clean.equals(&quot;Allwinner&quot;)) {&#10;                    Intent intent_clear = new Intent(&quot;com.mogu.clear_mem&quot;);&#10;                    sendBroadcast(intent_clear);&#10;//                    Intent intent = new Intent(&quot;android.eink.force.refresh&quot;);&#10;//                    sendBroadcast(intent);&#10;                }&#10;                break;&#10;            //刷新&#10;            case R.id.iv_setting_refresh:&#10;                String s = Build.BRAND;&#10;                if (s.equals(&quot;Allwinner&quot;)) {&#10;//                    Intent intent_clear = new Intent(&quot;com.mogu.clear_mem&quot;);&#10;//                    sendBroadcast(intent_clear);&#10;                    Intent intent = new Intent(&quot;android.eink.force.refresh&quot;);&#10;                    sendBroadcast(intent);&#10;                } else {&#10;                    startActivity(new Intent(MainActivity.this, UireFreshActivity.class));&#10;                    overridePendingTransition(0, 0);&#10;                }&#10;                break;&#10;            default:&#10;                break;&#10;        }&#10;    }&#10;&#10;    // 添加常驻通知&#10;    private void setNotification() {&#10;        NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);&#10;        NotificationCompat.Builder builder;&#10;        int channelId = 1;&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {    //Android 8.0以上适配&#10;            NotificationChannel channel = new NotificationChannel(String.valueOf(channelId), &quot;channel_name&quot;, NotificationManager.IMPORTANCE_HIGH);&#10;            manager.createNotificationChannel(channel);&#10;            builder = new NotificationCompat.Builder(this, String.valueOf(channelId));&#10;        } else {&#10;            builder = new NotificationCompat.Builder(this);&#10;        }&#10;//        Intent intent = new Intent(this, MainActivity.class);&#10;        Intent intent = new Intent();// 创建Intent对象&#10;        intent.setAction(Intent.ACTION_MAIN);// 设置Intent动作&#10;        intent.addCategory(Intent.CATEGORY_HOME);// 设置Intent种类&#10;//        startActivity(intent);// 将Intent传递给Activity&#10;//        PendingIntent pi = PendingIntent.getActivity(this, 0, intent, 0);&#10;        // 创建一个可变的 PendingIntent&#10;        PendingIntent pi = PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);&#10;&#10;        builder.setContentTitle(&quot;点击此条通知回到桌面&quot;)//指定通知栏的标题内容&#10;                .setContentText(&quot;软件后台运行中&quot;)//通知的正文内容&#10;                .setWhen(0)//通知创建的时间&#10;                .setAutoCancel(false)//点击通知后，自动取消&#10;                .setStyle(new NotificationCompat.BigTextStyle().bigText(&quot;&quot;)).setSmallIcon(R.drawable.ic_launcher)//通知显示的小图标，只能用alpha图层的图片进行设置&#10;                .setPriority(NotificationCompat.PRIORITY_MAX)//通知重要程度&#10;                .setContentIntent(pi)//点击跳转&#10;                .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.drawable.ic_launcher));&#10;        Notification notification = builder.build();&#10;        notification.flags |= Notification.FLAG_ONGOING_EVENT;&#10;        manager.notify(channelId, notification);&#10;    }&#10;&#10;    /**&#10;     * 检查文本大小并设置&#10;     *&#10;     * @param context&#10;     */&#10;    public static void check_text_size(Context context) {&#10;        try {&#10;            SharedPreferences sharedPreferences = context.getSharedPreferences(&quot;info&quot;, MODE_PRIVATE);&#10;            MainActivity.tv_time_hour.setTextSize(Integer.valueOf(sharedPreferences.getString(&quot;timetext_hour_size&quot;, null)));&#10;            MainActivity.tv_time_min.setTextSize(Integer.valueOf(sharedPreferences.getString(&quot;timetext_min_size&quot;, null)));&#10;            MainActivity.tv_user_id.setTextSize(Integer.valueOf(sharedPreferences.getString(&quot;nametext_size&quot;, null)));&#10;            MainActivity.tv_main_batterystate.setTextSize(Integer.valueOf(sharedPreferences.getString(&quot;dianchitext_size&quot;, null)));&#10;        } catch (Exception e) {&#10;            SharedPreferences.Editor editor = context.getSharedPreferences(&quot;info&quot;, MODE_PRIVATE).edit();&#10;            /**&#10;             * 设定文本大小预填充&#10;             */&#10;            editor.putString(&quot;timetext_min_size&quot;, &quot;40&quot;);&#10;            editor.putString(&quot;timetext_hour_size&quot;, &quot;70&quot;);&#10;            editor.putString(&quot;nametext_size&quot;, &quot;17&quot;);//昵称文本大小&#10;            editor.putString(&quot;dianchitext_size&quot;, &quot;17&quot;);//电池文本大小&#10;            editor.putString(&quot;datetext_size&quot;, &quot;17&quot;);//日期文本大小&#10;            editor.apply();&#10;            check_text_size(context);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void finish() {&#10;        super.finish();&#10;        overridePendingTransition(0, 0);&#10;    }&#10;&#10;}" />
                  </map>
                </option>
                <option name="messageId" value="01961442f6f277268f93de335b024f35" />
                <option name="question" value="#Urov:NzrmZxgrergb.qzez #Urov:zxgrergb_nzrm_mvd.cno 请你帮我优化NzrmZxgrergb" />
                <option name="rating" value="UNRATED" />
                <option name="referenceBeans">
                  <list />
                </option>
                <option name="status" value="SUCCESS" />
                <option name="variables">
                  <list>
                    <FileVariable>
                      <option name="endOffset" value="23" />
                      <option name="identifierHash" value="VARIABLE_f777afa446e8378f854c6ff9f065d7f9257f528a628eea8af164dcdfd8ec07fb" />
                      <option name="selectedPlaceHolder">
                        <Object />
                      </option>
                      <option name="selectedVariable">
                        <Object />
                      </option>
                    </FileVariable>
                    <FileVariable>
                      <option name="endOffset" value="51" />
                      <option name="identifierHash" value="VARIABLE_0b9f3fe2679a7e492619351f1d780096de0496e3a6dd0e8f1c2a58dbdee72673" />
                      <option name="selectedPlaceHolder">
                        <Object />
                      </option>
                      <option name="selectedVariable">
                        <Object />
                      </option>
                      <option name="startOffset" value="24" />
                    </FileVariable>
                  </list>
                </option>
              </Turn>
            </list>
          </option>
          <option name="updateTime" value="1744096722206" />
        </Conversation>
        <Conversation>
          <option name="createTime" value="1744095593994" />
          <option name="id" value="01961432c60a75ab8a7d0bc0c1863e45" />
          <option name="title" value="请你帮我优化MainActivity" />
          <option name="turns">
            <list>
              <Turn>
                <option name="agent" value="" />
                <option name="answer" value="思考步骤：&#10;8. 由于提供的NzrmZxgrergb.qzez是空文件，无法直接优化&#10;7. 需要先确认这是Zmwilrw的NzrmZxgrergb还是其他类型的NzrmZxgrergb&#10;6. 假设这是Zmwilrw的NzrmZxgrergb，将提供基础优化模板&#10;5. 优化点包括：生命周期管理、视图绑定、异常处理等&#10;&#10;```qzez&#10;kfyorx xozhh NzrmZxgrergb vcgvmwh ZkkXlnkzgZxgrergb {&#10;    kirezgv ZxgrergbNzrmYrmwrmt yrmwrmt;&#10;&#10;    @Leviirwv&#10;    kilgvxgvw elrw lmXivzgv(Yfmwov hzevwRmhgzmxvHgzgv) {&#10;        hfkvi.lmXivzgv(hzevwRmhgzmxvHgzgv);&#10;        yrmwrmt = ZxgrergbNzrmYrmwrmt.rmuozgv(tvgOzblfgRmuozgvi());&#10;        hvgXlmgvmgErvd(yrmwrmt.tvgIllg());&#10;        &#10;        rmrgErvdh();&#10;        hvgfkOrhgvmvih();&#10;    }&#10;&#10;    kirezgv elrw rmrgErvdh() {&#10;        // 初始化FR组件&#10;    }&#10;&#10;    kirezgv elrw hvgfkOrhgvmvih() {&#10;        // 设置事件监听&#10;    }&#10;&#10;    @Leviirwv&#10;    kilgvxgvw elrw lmWvhgilb() {&#10;        hfkvi.lmWvhgilb();&#10;        yrmwrmt = mfoo; // 避免内存泄漏&#10;    }&#10;}&#10;```" />
                <option name="chatResource" value="user" />
                <option name="codeReferences">
                  <list />
                </option>
                <option name="command" value="normal" />
                <option name="conversationId" value="01961432c60a75ab8a7d0bc0c1863e45" />
                <option name="historyDocumentMap">
                  <map>
                    <entry key="file:///F:/Android%20Studio%20Data/projects/MT-Launcher/app/src/main/java/com/etang/mt_launcher/launcher/MainActivity.java" value="package com.etang.mt_launcher.launcher;&#10;&#10;import android.Manifest;&#10;import android.annotation.SuppressLint;&#10;import android.app.Activity;&#10;import android.app.Notification;&#10;import android.app.NotificationChannel;&#10;import android.app.NotificationManager;&#10;import android.app.PendingIntent;&#10;import android.app.WallpaperManager;&#10;import android.content.BroadcastReceiver;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.content.IntentFilter;&#10;import android.content.SharedPreferences;&#10;import android.content.pm.PackageManager;&#10;import android.content.res.Configuration;&#10;import android.content.res.Resources;&#10;import android.database.Cursor;&#10;import android.database.sqlite.SQLiteDatabase;&#10;import android.graphics.Bitmap;&#10;import android.graphics.BitmapFactory;&#10;import android.graphics.Canvas;&#10;import android.graphics.Color;&#10;import android.graphics.Paint;&#10;import android.graphics.drawable.BitmapDrawable;&#10;import android.os.BatteryManager;&#10;import android.os.Build;&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.os.Message;&#10;import android.util.DisplayMetrics;&#10;import android.util.Log;&#10;import android.view.KeyEvent;&#10;import android.view.View;&#10;import android.view.View.OnClickListener;&#10;import android.view.View.OnLongClickListener;&#10;import android.view.Window;&#10;import android.view.WindowManager;&#10;import android.widget.AdapterView;&#10;import android.widget.CompoundButton;&#10;import android.widget.CompoundButton.OnCheckedChangeListener;&#10;import android.widget.GridView;&#10;import android.widget.ImageView;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;import android.widget.ToggleButton;&#10;&#10;import androidx.annotation.RequiresApi;&#10;import androidx.core.app.ActivityCompat;&#10;import androidx.core.app.NotificationCompat;&#10;&#10;import com.etang.mt_launcher.R;&#10;import com.etang.mt_launcher.launcher.settings.SettingActivity;&#10;import com.etang.mt_launcher.launcher.settings.about.AboutActivity;&#10;import com.etang.mt_launcher.launcher.settings.locker.MTLocker;&#10;import com.etang.mt_launcher.launcher.settings.uirefresh.UireFreshActivity;&#10;import com.etang.mt_launcher.launcher.settings.uselogs.AppUseLogsActivity;&#10;import com.etang.mt_launcher.launcher.settings.weather.WeatherActivity;&#10;import com.etang.mt_launcher.launcher.welecome.WelecomeActivity;&#10;import com.etang.mt_launcher.tool.beans.Bean_AppInfo;&#10;import com.etang.mt_launcher.tool.getapps.DeskTopGridViewBaseAdapter;&#10;import com.etang.mt_launcher.tool.getapps.GetApps;&#10;import com.etang.mt_launcher.tool.mtcore.MTCore;&#10;import com.etang.mt_launcher.tool.mtcore.dialog.UnInstallDialog;&#10;import com.etang.mt_launcher.tool.mtcore.savearrayutil.SaveArrayListUtil;&#10;import com.etang.mt_launcher.tool.server.AppInstallServer;&#10;import com.etang.mt_launcher.tool.sql.MyDataBaseHelper;&#10;&#10;import org.json.JSONArray;&#10;import org.json.JSONObject;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;// _   _   _   _       ___       ___  ___   _____   _   _____       ___   __   _   _____&#10;//| | | | | | | |     /   |     /   |/   | | ____| | | |_   _|     /   | |  \ | | /  ___|&#10;//| |_| | | | | |    / /| |    / /|   /| | | |__   | |   | |      / /| | |   \| | | |&#10;//|  _  | | | | |   / / | |   / / |__/ | | |  __|  | |   | |     / / | | | |\   | | |  _&#10;//| | | | | |_| |  / /  | |  / /       | | | |___  | |   | |    / /  | | | | \  | | |_| |&#10;//|_| |_| \_____/ /_/   |_| /_/        |_| |_____| |_|   |_|   /_/   |_| |_|  \_| \_____/&#10;&#10;/**&#10; * @Package: com.etang.nt_launcher.launcher&#10; * @ClassName: MainActivity&#10; * @Description: Main活动，主界面，桌面界面&#10; * @CreateDate: 2021/3/19 8:18&#10; * @UpdateDate: 2021/3/19 8:18&#10; * &lt;p&gt;&#10; * &lt;p&gt;&#10; * 于2021年12月11日 17点43分&#10; * 不会真的有人尝试看懂风滚草方式写出来的代码吧，不会吧不会吧。&#10; * 哦原来是我自己尝试看懂啊。&#10; * 坏了，看不懂了&#10; * 于2022年3月7日 09点27分&#10; * 别改了，好家伙，完全看不懂了，找时间重构吧&#10; * 于2022年4月6日 17点07分&#10; * 完了，摆烂，开始摆烂，这些代码就这样吧&#10; * 于2022年8月31日 21点05分&#10; * 摆烂！！！！！！！！！！！！&#10; * 2022年9月9日 18点08分&#10; * remake&#10; * 2022年9月12日 12点28分&#10; * 想办法重置吧，lite版也要重置了&#10; */&#10;public class MainActivity extends Activity implements OnClickListener {&#10;    private BroadcastReceiver batteryLevelRcvr;&#10;    private IntentFilter batteryLevelFilter;&#10;    private Handler handler;&#10;    private Runnable runnable;&#10;    private static MyDataBaseHelper dbHelper_name_sql;&#10;    private static SQLiteDatabase db;&#10;    public static TextView tv_user_id, tv_time_hour, tv_time_min, tv_main_batterystate, tv_city, tv_temp_state, tv_last_updatetime, tv_main_nowdate;&#10;    public static ImageView iv_setting_button, iv_setting_yinliang, iv_setting_refresh, iv_clean_button, iv_index_back;&#10;    public static ToggleButton tg_apps_state;&#10;    public static LinearLayout line_wather, line_bottom;&#10;    public static String string_app_info = &quot;&quot;;&#10;    public static GridView mListView;&#10;    public static List&lt;Bean_AppInfo&gt; beanAppInfos = new ArrayList&lt;Bean_AppInfo&gt;();&#10;    public static boolean offline_mode = false;&#10;    private AppInstallServer appinstallserver;&#10;    private SharedPreferences sharedPreferences;&#10;    private static String TAG = &quot;MainActivity&quot;;&#10;    //引入MTCore&#10;    private MTCore mtCore = new MTCore();&#10;&#10;    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR1)&#10;    @Override&#10;    protected void onCreate(final Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        //全屏&#10;        check_full_window();&#10;        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);&#10;        requestWindowFeature(Window.FEATURE_NO_TITLE);// 无Title&#10;        setContentView(R.layout.activity_main);&#10;        //绑定各类&#10;        initView();// 绑定控件&#10;        check_first_user();//检查是不是第一次使用&#10;        MTCore.check_save_permission(MainActivity.this);//检查存取权限&#10;        new_time_Thread();// 启用更新时间进程&#10;        read_info_help(MainActivity.this, sharedPreferences);//集中存放读取信息相关方法&#10;        // 长按弹出APP信息&#10;        mListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {&#10;            @Override&#10;            public boolean onItemLongClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {&#10;                try {&#10;                    String string_app_info = getAppInfo(position);&#10;                    UnInstallDialog.uninstall_app(position, beanAppInfos, MainActivity.this, MainActivity.this, string_app_info, beanAppInfos.get(position).getName());&#10;                } catch (Exception e) {&#10;                    MTCore.ErrorDialog(MainActivity.this, e.toString(), TAG);//显示错误信息&#10;                }&#10;                return true;&#10;            }&#10;        });&#10;        // 当点击GridView时，获取ID和应用包名并启动&#10;        mListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {&#10;            @Override&#10;            public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {&#10;                try {&#10;                    // Intent intent=appInfos.get(position).getIntent();&#10;                    // startActivity(intent);&#10;                    Intent intent = getPackageManager().getLaunchIntentForPackage(beanAppInfos.get(position).getPackageName());&#10;                    if (intent != null) {//点击的APP无异常&#10;                        try {&#10;                            db.execSQL(&quot;insert into appuselogs(appname,time)values(?,?)&quot;, new String[]{beanAppInfos.get(position).getName(), tv_main_nowdate.getText() + &quot;--&quot; + tv_time_hour.getText() + &quot;:&quot; + tv_time_min.getText()});&#10;                            intent.putExtra(&quot;type&quot;, &quot;110&quot;);&#10;                            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);&#10;                            startActivity(intent);&#10;                            overridePendingTransition(0, 0);&#10;                        } catch (Exception e) {&#10;                            db.execSQL(&quot;create table appuselogs (_id integer primary key autoincrement,appname text,time text)&quot;);&#10;                            MTCore.MessageDialog(&quot;数据库已部署，请再次点击你要打开的APP&quot;, MainActivity.this);&#10;                        }&#10;                    } else if (beanAppInfos.get(position).getPackageName().equals(getPackageName() + &quot;.weather&quot;)) {//点击了“天气”&#10;                        intent = new Intent(MainActivity.this, WeatherActivity.class);&#10;                        startActivity(intent);&#10;                        overridePendingTransition(0, 0);&#10;                    } else if (beanAppInfos.get(position).getPackageName().equals(getPackageName() + &quot;.locker&quot;)) {//点击了“锁屏”&#10;                        handler.removeCallbacks(runnable);&#10;                        intent = new Intent(MainActivity.this, MTLocker.class);&#10;                        startActivity(intent);&#10;                        finish();&#10;                    } else if (beanAppInfos.get(position).getPackageName().equals(getPackageName() + &quot;.appuserlogs&quot;)) {//点击了“使用记录”&#10;                        intent = new Intent(MainActivity.this, AppUseLogsActivity.class);&#10;                        startActivity(intent);&#10;                        overridePendingTransition(0, 0);&#10;                    } else if (beanAppInfos.get(position).getPackageName().equals(getPackageName() + &quot;.systemupdate&quot;)) {//点击了“检查更新”&#10;                        intent = new Intent(MainActivity.this, AboutActivity.class);&#10;                        startActivity(intent);&#10;                        overridePendingTransition(0, 0);&#10;                    } else if (beanAppInfos.get(position).getPackageName().equals(getPackageName() + &quot;.launchersetting&quot;)) {//点击了“桌面设置”&#10;                        intent = new Intent(MainActivity.this, SettingActivity.class);&#10;                        startActivity(intent);&#10;                        overridePendingTransition(0, 0);&#10;                    } else if (beanAppInfos.get(position).getPackageName().equals(getPackageName() + &quot;.uirefresh&quot;)) {//点击了“刷新屏幕”&#10;                        String s = Build.BRAND;&#10;                        if (s.equals(&quot;Allwinner&quot;)) {&#10;                            Intent intent_refresh = new Intent(&quot;android.eink.force.refresh&quot;);&#10;                            sendBroadcast(intent_refresh);&#10;                        } else {&#10;                            startActivity(new Intent(MainActivity.this, UireFreshActivity.class));&#10;                            overridePendingTransition(0, 0);&#10;                        }&#10;                    } else if (beanAppInfos.get(position).getPackageName().equals(getPackageName() + &quot;.systemclean&quot;)) {//点击了“清理”&#10;                        String s_clean = Build.BRAND;&#10;                        if (s_clean.equals(&quot;Allwinner&quot;)) {&#10;                            //唤醒广播&#10;                            Intent intent_clear = new Intent(&quot;com.mogu.clear_mem&quot;);&#10;                            sendBroadcast(intent_clear);&#10;                        }&#10;                    } else if (beanAppInfos.get(position).getPackageName().equals(getPackageName() + &quot;.userhelper&quot;)) {&#10;                        MTCore.showToast(getApplicationContext(), &quot;打开&quot;, true);&#10;                        intent.putExtra(&quot;state&quot;, &quot;false&quot;);&#10;                        intent = new Intent(MainActivity.this, WelecomeActivity.class);&#10;                        startActivity(intent);&#10;                        overridePendingTransition(0, 0);&#10;                    } else {//出现异常&#10;                        MTCore.ErrorDialog(MainActivity.this, &quot;启动APP时出现“Intent”相关的异常&quot;, TAG);&#10;                    }&#10;                } catch (Exception e) {&#10;                    MTCore.ErrorDialog(MainActivity.this, e.toString(), TAG);&#10;                }&#10;            }&#10;        });&#10;        //桌面壁纸长按事件&#10;        iv_index_back.setOnLongClickListener(new OnLongClickListener() {&#10;            @Override&#10;            public boolean onLongClick(View v) {&#10;                iv_index_back.setVisibility(View.GONE);&#10;                mListView.setVisibility(View.VISIBLE);&#10;                tg_apps_state.setChecked(true);&#10;                return true;&#10;            }&#10;        });&#10;        //切换应用列表&#10;        tg_apps_state.setOnCheckedChangeListener(new OnCheckedChangeListener() {&#10;&#10;            @Override&#10;            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {&#10;                // TODO Auto-generated method stub&#10;                if (isChecked) {&#10;                    mListView.setVisibility(View.VISIBLE);&#10;                    iv_index_back.setVisibility(View.GONE);&#10;                } else {&#10;                    mListView.setVisibility(View.GONE);&#10;                    iv_index_back.setVisibility(View.VISIBLE);&#10;                }&#10;            }&#10;        });&#10;        //长按“小时”进入设置&#10;        tv_time_hour.setOnLongClickListener(new OnLongClickListener() {&#10;            @Override&#10;            public boolean onLongClick(View v) {&#10;                startActivity(new Intent(MainActivity.this, SettingActivity.class));&#10;                overridePendingTransition(0, 0);&#10;                return true;&#10;            }&#10;        });&#10;        /**&#10;         * 每次回到桌面开启常驻通知&#10;         */&#10;        new Handler().postDelayed(new Runnable() {&#10;            @Override&#10;            public void run() {&#10;                setNotification();&#10;            }&#10;        }, 50);&#10;    }&#10;&#10;&#10;    private String getAppInfo(int position) {&#10;        return beanAppInfos.get(position).getPackageName();&#10;    }&#10;&#10;&#10;    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR1)&#10;    private void read_info_help(Context c, SharedPreferences sharedPreferences) {&#10;        initAppList(c);// 获取应用列表&#10;        monitorBatteryState();// 监听电池信息&#10;        check_text_size(c);//检查文本大小&#10;        rember_name(c);// 读取昵称&#10;        update_wathers(sharedPreferences);//更新天气&#10;        check_view_hind(c, sharedPreferences);//检查底栏是否隐藏&#10;        check_offline_mode(c, sharedPreferences);//检查离线模式是否打开&#10;        check_oldman_mode(c, sharedPreferences);//检查老年模式是否打开&#10;        check_Language(c, sharedPreferences);&#10;        get_applist_number(c, sharedPreferences);//获取设定的应用列表列数&#10;        images_upgrade(c, sharedPreferences);//更新图像信息&#10;        set_app_setStackFromBottomMode(sharedPreferences);//检查并设置APP列表排列方式&#10;        check_full_window();//检查全屏设置&#10;    }&#10;&#10;    private void check_full_window() {&#10;        try {&#10;            SharedPreferences sharedPreferences = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE);&#10;            if (sharedPreferences.getString(&quot;setting_full_windows&quot;, null).equals(&quot;true&quot;)) {&#10;                getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);&#10;            } else {&#10;                getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);&#10;            }&#10;        } catch (Exception e) {&#10;            SharedPreferences sharedPreferences = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE);&#10;            sharedPreferences.edit().putString(&quot;setting_full_windows&quot;, &quot;false&quot;).commit();&#10;            check_full_window();&#10;            MTCore.showToast_new(&quot;出现错误&quot;, true);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 设置中文&#10;     *&#10;     * @param context&#10;     * @param sharedPreferences&#10;     */&#10;    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR1)&#10;    private void check_Language(Context context, SharedPreferences sharedPreferences) {&#10;        int language = 0;&#10;        try {&#10;            //读取SharedPreferences数据，默认选中第一项&#10;            language = Integer.valueOf(sharedPreferences.getString(&quot;language&quot;, null));&#10;        } catch (Exception e) {&#10;            sharedPreferences.edit().putString(&quot;language&quot;, &quot;0&quot;).commit();&#10;            check_Language(context, sharedPreferences);&#10;        }&#10;        //根据读取到的数据，进行设置&#10;        Resources resources = getResources();&#10;        DisplayMetrics displayMetrics = resources.getDisplayMetrics();&#10;        Configuration configuration = resources.getConfiguration();&#10;        switch (language) {&#10;            case 0:&#10;                //自动获取&#10;                configuration.setLocale(Locale.getDefault());&#10;                break;&#10;            case 1:&#10;                //中文&#10;                configuration.setLocale(Locale.CHINESE);&#10;                break;&#10;            case 2:&#10;                //英文&#10;                configuration.setLocale(Locale.ENGLISH);&#10;                break;&#10;            case 3:&#10;                //日文&#10;                configuration.setLocale(Locale.JAPANESE);&#10;                break;&#10;            default:&#10;                break;&#10;        }&#10;        resources.updateConfiguration(configuration, displayMetrics);&#10;    }&#10;&#10;&#10;    @Override&#10;    protected void onRestart() {&#10;        super.onRestart();&#10;        SharedPreferences sharedPreferences = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE);&#10;        check_view_hind(MainActivity.this, sharedPreferences);//检查底栏是否隐藏&#10;        check_offline_mode(MainActivity.this, sharedPreferences);//检查离线模式是否打开&#10;        get_applist_number(MainActivity.this, sharedPreferences);//获取设定的应用列表列数&#10;        images_upgrade(MainActivity.this, sharedPreferences);//更新图像信息&#10;        set_app_setStackFromBottomMode(sharedPreferences);//检查并设置APP列表排列方式&#10;    }&#10;&#10;&#10;    public static void initSkinMode(Context context, String s) {&#10;        try {&#10;            // 获取壁纸管理器&#10;            WallpaperManager wallpaperManager = WallpaperManager.getInstance(context);&#10;            // 获取当前壁纸&#10;            if (ActivityCompat.checkSelfPermission(context, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {&#10;                // TODO: Consider calling&#10;                //    ActivityCompat#requestPermissions&#10;                // here to request the missing permissions, and then overriding&#10;                //   public void onRequestPermissionsResult(int requestCode, String[] permissions,&#10;                //                                          int[] grantResults)&#10;                // to handle the case where the user grants the permission. See the documentation&#10;                // for ActivityCompat#requestPermissions for more details.&#10;                return;&#10;            }&#10;            BitmapDrawable wallpaperDrawable = (BitmapDrawable) wallpaperManager.getDrawable();&#10;            // 将Drawable,转成Bitmap&#10;            Bitmap bitmap = Bitmap.createBitmap(wallpaperDrawable.getBitmap());&#10;            // 设置 背景&#10;            if (s.equals(&quot;app_wallpaper&quot;)) {&#10;                MainActivity.iv_index_back.setVisibility(View.VISIBLE);&#10;                MainActivity.mListView.setVisibility(View.GONE);&#10;                MainActivity.iv_index_back.setImageBitmap(bitmap);&#10;                MainActivity.tg_apps_state.setVisibility(View.VISIBLE);&#10;                tg_apps_state.setChecked(false);&#10;            }&#10;            if (s.equals(&quot;app_wallpaper_applist&quot;)) {&#10;                MainActivity.iv_index_back.setVisibility(View.VISIBLE);&#10;                MainActivity.mListView.setVisibility(View.VISIBLE);&#10;                MainActivity.iv_index_back.setImageBitmap(bitmap);&#10;                MainActivity.tg_apps_state.setVisibility(View.GONE);&#10;            }&#10;        } catch (Exception e) {&#10;            /**&#10;             * 创建纯白bitmap&#10;             */&#10;            Bitmap bitmap = Bitmap.createBitmap(400, 400, Bitmap.Config.ARGB_8888); // 创建画布&#10;            drawCanvas(bitmap);&#10;            MainActivity.iv_index_back.setVisibility(View.VISIBLE);&#10;            MainActivity.mListView.setVisibility(View.VISIBLE);&#10;            MainActivity.iv_index_back.setImageBitmap(bitmap);&#10;            MainActivity.tg_apps_state.setVisibility(View.GONE);&#10;//            MTCore.showToast(context, &quot;系统壁纸出错，重置为白色&quot;, true);&#10;            MTCore.ErrorDialog(context, &quot;系统壁纸获取出错 \n 请更改其他壁纸设置 \n 错误信息：&quot; + e.toString(), TAG);&#10;        }&#10;    }&#10;&#10;    public static void drawCanvas(Bitmap bitmap) {&#10;        bitmap.eraseColor(Color.parseColor(&quot;#ff0000&quot;)); // 填充颜色&#10;        Canvas canvas = new Canvas(bitmap);&#10;        Paint paint = new Paint();&#10;        paint.setTextSize(100);&#10;        paint.setColor(Color.DKGRAY);&#10;        paint.setFlags(Paint.ANTI_ALIAS_FLAG);&#10;        paint.setStyle(Paint.Style.STROKE); //用于设置字体填充的类型&#10;//        canvas.drawText(&quot;Ken&quot;, 100, 100, paint);&#10;        //最后通过Imageview显示出来&#10;        MainActivity.iv_index_back.setImageBitmap(bitmap);&#10;    }&#10;&#10;&#10;    private void set_app_setStackFromBottomMode(SharedPreferences sharedPreferences) {&#10;        if (sharedPreferences.getBoolean(&quot;app_setStackFromBottomMode&quot;, true) == false) {&#10;            mListView.setStackFromBottom(false);&#10;        } else {&#10;            mListView.setStackFromBottom(true);&#10;        }&#10;    }&#10;&#10;    private void check_first_user() {&#10;        if (isFirstStart(MainActivity.this)) {//第一次&#10;            //第一次启动预填充数据，并且跳转至欢迎界面&#10;            //填充预设数据&#10;            fillPresetData();&#10;            //填充预设隐藏应用包名&#10;            ArrayList&lt;String&gt; arrayList = new ArrayList&lt;String&gt;();&#10;            arrayList.add(&quot;frist&quot;);&#10;            SaveArrayListUtil.saveArrayList(MainActivity.this, arrayList, &quot;start&quot;);//存储在本地&#10;            //跳转到欢迎界面&#10;            startActivity(new Intent(getApplicationContext(), WelecomeActivity.class));&#10;            overridePendingTransition(0, 0);&#10;            finish();&#10;        } else {&#10;            //更新桌面信息&#10;            images_upgrade(MainActivity.this, sharedPreferences);&#10;        }&#10;    }&#10;&#10;    private void fillPresetData() {&#10;        SharedPreferences.Editor editor = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE).edit();&#10;        editor.putString(&quot;images_info&quot;, &quot;applist&quot;);//默认显示内容&#10;        editor.putString(&quot;images_app_listifo&quot;, &quot;true&quot;);&#10;        editor.putString(&quot;appname_state&quot;, &quot;one&quot;);//是否显示APP名称&#10;        editor.putString(&quot;applist_number&quot;, &quot;5&quot;);//默认APP列表大小&#10;        editor.putString(&quot;timetext_min_size&quot;, &quot;40&quot;);//分钟时间大小&#10;        editor.putString(&quot;timetext_hour_size&quot;, &quot;70&quot;);//小时时间大小&#10;        editor.putString(&quot;nametext_size&quot;, &quot;16&quot;);//昵称文本大小&#10;        editor.putString(&quot;dianchitext_size&quot;, &quot;16&quot;);//电池文本大小&#10;        editor.putString(&quot;datetext_size&quot;, &quot;16&quot;);//日期文本大小&#10;        editor.putString(&quot;setting_ico_hind&quot;, &quot;false&quot;);//隐藏底栏&#10;        editor.putString(&quot;offline&quot;, &quot;false&quot;);//离线模式&#10;        editor.putString(&quot;oldman&quot;, &quot;false&quot;);//老年模式&#10;        editor.putBoolean(&quot;app_setStackFromBottomMode&quot;, false);//默认显示内容&#10;        editor.putString(&quot;icon_size&quot;, &quot;45&quot;);//图标大小&#10;        editor.putString(&quot;language&quot;, &quot;0&quot;);//设置语言&#10;        editor.apply();&#10;    }&#10;&#10;&#10;    public static void check_oldman_mode(Context context, SharedPreferences sharedPreferences) {&#10;        try {&#10;            String offline = sharedPreferences.getString(&quot;offline&quot;, null);&#10;            if (offline.equals(&quot;true&quot;)) {&#10;                offline_mode = true;&#10;            } else {&#10;                offline_mode = false;&#10;            }&#10;        } catch (Exception e) {&#10;            SharedPreferences.Editor editor = context.getSharedPreferences(&quot;info&quot;, context.MODE_PRIVATE).edit();&#10;            editor.putString(&quot;oldman&quot;, &quot;false&quot;);//日期文本大小&#10;            editor.apply();&#10;        }&#10;    }&#10;&#10;    public static void check_offline_mode(Context context, SharedPreferences sharedPreferences) {&#10;        try {&#10;            String offline = sharedPreferences.getString(&quot;offline&quot;, null);&#10;            if (offline.equals(&quot;true&quot;)) {&#10;                offline_mode = true;&#10;            } else {&#10;                offline_mode = false;&#10;            }&#10;        } catch (Exception e) {&#10;            SharedPreferences.Editor editor = context.getSharedPreferences(&quot;info&quot;, context.MODE_PRIVATE).edit();&#10;            editor.putString(&quot;offline&quot;, &quot;false&quot;);//日期文本大小&#10;            editor.apply();&#10;        }&#10;    }&#10;&#10;    public static void check_view_hind(Context context, SharedPreferences sharedPreferences) {&#10;//        if (Build.BRAND.toString().equals(&quot;Allwinner&quot;)) {&#10;//            iv_setting_refresh.setVisibility(View.GONE);&#10;//        }&#10;        try {&#10;            String ico_info = sharedPreferences.getString(&quot;setting_ico_hind&quot;, null);&#10;            if (ico_info.equals(&quot;true&quot;)) {&#10;                line_bottom.setVisibility(View.GONE);&#10;            } else {&#10;                line_bottom.setVisibility(View.VISIBLE);&#10;            }&#10;        } catch (Exception e) {&#10;            SharedPreferences.Editor editor = context.getSharedPreferences(&quot;info&quot;, context.MODE_PRIVATE).edit();&#10;            editor.putString(&quot;setting_ico_hind&quot;, &quot;false&quot;);//日期文本大小&#10;            editor.apply();&#10;        }&#10;    }&#10;&#10;    private void get_applist_number(Context context, SharedPreferences sharedPreferences) {&#10;        try {&#10;            String applist_number = sharedPreferences.getString(&quot;applist_number&quot;, null);&#10;            if (applist_number.equals(&quot;auto&quot;)) {&#10;                mListView.setNumColumns(GridView.AUTO_FIT);&#10;            }&#10;            if (!applist_number.equals(&quot;auto&quot;)) {&#10;                mListView.setNumColumns(Integer.valueOf(applist_number));&#10;            }&#10;        } catch (Exception e) {&#10;            SharedPreferences.Editor editor = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE).edit();&#10;            editor.putString(&quot;applist_number&quot;, &quot;auto&quot;);&#10;            editor.apply();&#10;            mListView.setNumColumns(GridView.AUTO_FIT);&#10;        }&#10;    }&#10;&#10;    public boolean isFirstStart(Context context) {&#10;        SharedPreferences preferences = context.getSharedPreferences(&quot;SHARE_APP_TAG&quot;, 0);&#10;        Boolean isFirst = preferences.getBoolean(&quot;FIRSTStart&quot;, true);&#10;        if (isFirst) {// 第一次&#10;            preferences.edit().putBoolean(&quot;FIRSTStart&quot;, false).commit();&#10;            return true;&#10;        } else {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 检查图片&#10;     */&#10;    private void images_upgrade(Context c, SharedPreferences sharedPreferences) {&#10;        try {&#10;            String images_mode = sharedPreferences.getString(&quot;images_info&quot;, null);&#10;            if (images_mode.equals(&quot;ql&quot;)) {&#10;                iv_index_back.setImageResource(R.drawable.mi_haole);&#10;                iv_index_back.setVisibility(View.VISIBLE);&#10;                mListView.setVisibility(View.GONE);&#10;                tg_apps_state.setVisibility(View.VISIBLE);&#10;                tg_apps_state.setChecked(false);&#10;            }&#10;            if (images_mode.equals(&quot;mz&quot;)) {&#10;                iv_index_back.setImageResource(R.drawable.mi_meizi);&#10;                iv_index_back.setVisibility(View.VISIBLE);&#10;                mListView.setVisibility(View.GONE);&#10;                tg_apps_state.setVisibility(View.VISIBLE);&#10;                tg_apps_state.setChecked(false);&#10;            }&#10;            if (images_mode.equals(&quot;ll&quot;)) {&#10;                iv_index_back.setImageResource(R.drawable.mi_luoli);&#10;                iv_index_back.setVisibility(View.VISIBLE);&#10;                mListView.setVisibility(View.GONE);&#10;                tg_apps_state.setVisibility(View.VISIBLE);&#10;                tg_apps_state.setChecked(false);&#10;            }&#10;            if (images_mode.equals(&quot;zy&quot;)) {&#10;                iv_index_back.setImageResource(R.drawable.mi_zhiyu);&#10;                iv_index_back.setVisibility(View.VISIBLE);&#10;                mListView.setVisibility(View.GONE);&#10;                tg_apps_state.setVisibility(View.VISIBLE);&#10;                tg_apps_state.setChecked(false);&#10;            }&#10;            if (images_mode.equals(&quot;applist&quot;)) {&#10;                iv_index_back.setImageResource(R.drawable.mi_haole);&#10;                iv_index_back.setVisibility(View.GONE);&#10;                mListView.setVisibility(View.VISIBLE);&#10;                tg_apps_state.setVisibility(View.GONE);&#10;            }&#10;            if (images_mode.equals(&quot;&quot;)) {&#10;                iv_index_back.setImageResource(R.drawable.mi_haole);&#10;                iv_index_back.setVisibility(View.GONE);&#10;                mListView.setVisibility(View.VISIBLE);&#10;                MTCore.showToast(this, &quot;请选择壁纸或者应用列表（设置-壁纸设置）&quot;, false);&#10;            }&#10;            if (images_mode.equals(&quot;app_wallpaper&quot;)) {&#10;                initSkinMode(MainActivity.this, images_mode);&#10;            }&#10;            if (images_mode.equals(&quot;app_wallpaper_applist&quot;)) {&#10;                initSkinMode(MainActivity.this, images_mode);&#10;            }&#10;        } catch (Exception e) {&#10;            MTCore.ErrorDialog(c, &quot;桌面壁纸出现错误，已重置为默认&quot;, TAG);&#10;            sharedPreferences.edit().putString(&quot;images_info&quot;, &quot;applist&quot;).apply();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        // TODO Auto-generated method stub&#10;        super.onResume();&#10;        initAppList(MainActivity.this);&#10;    }&#10;&#10;    /**&#10;     * +获取应用列表、隐藏应用&#10;     *&#10;     * @param context&#10;     */&#10;//    public static void initAppList(Context context) {&#10;//        beanAppInfos = GetApps.GetAppList1(context);&#10;//        ArrayList&lt;String&gt; hind_apparrayList = new ArrayList&lt;String&gt;();&#10;//        hind_apparrayList.clear();&#10;//        hind_apparrayList = SaveArrayListUtil.getSearchArrayList(context);&#10;//        String s = Build.BRAND;&#10;//        if (s.equals(&quot;Allwinner&quot;)) {&#10;//            hind_apparrayList.add(&quot;com.android.settings&quot;);&#10;//        }&#10;//        Log.i(TAG, &quot;initAppList: --------------removeing packname-----------&quot;);&#10;//        for (int j = 0; j &lt; hind_apparrayList.size(); j++) {&#10;//            for (int i = 0; i &lt; beanAppInfos.size(); i++) {&#10;//                if (hind_apparrayList.get(j).equals(beanAppInfos.get(i).getPackageName())) {&#10;//                    Log.i(TAG, &quot;initAppList: remove:&quot; + i);&#10;//                    beanAppInfos.remove(i);&#10;//                }&#10;//            }&#10;//        }&#10;//        DeskTopGridViewBaseAdapter deskTopGridViewBaseAdapter = new DeskTopGridViewBaseAdapter(beanAppInfos, context);&#10;//        mListView.setAdapter(deskTopGridViewBaseAdapter);&#10;//    }&#10;    public static void initAppList(Context context) {&#10;        try {&#10;            beanAppInfos = GetApps.GetAppList1(context);&#10;            ArrayList&lt;String&gt; hind_apparrayList = SaveArrayListUtil.getSearchArrayList(context);&#10;            String s = Build.BRAND;&#10;&#10;            // 如果品牌是Allwinner，添加特定的应用包名&#10;            if (s.equals(&quot;Allwinner&quot;)) {&#10;                hind_apparrayList.add(&quot;com.android.settings&quot;);&#10;            }&#10;            Log.i(TAG, &quot;initAppList: --------------hind_apparrayList-----------&quot;);&#10;            Log.i(TAG, &quot;initAppList: &quot; + hind_apparrayList);&#10;            Log.i(TAG, &quot;initAppList: --------------beanAppInfos-----------&quot;);&#10;            Log.i(TAG, &quot;initAppList: &quot; + beanAppInfos);&#10;&#10;            // 使用Stream API来过滤不需要的应用&#10;            // 注意：这里假设beanAppInfos是一个列表，并且getPackageName()方法不存在异常风险&#10;            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) {&#10;                beanAppInfos.removeIf(appInfo -&gt; hind_apparrayList.stream().anyMatch(hindApp -&gt; hindApp.equals(appInfo.getPackageName())));&#10;            } else {&#10;                for (int j = 0; j &lt; hind_apparrayList.size(); j++) {&#10;                    for (int i = 0; i &lt; beanAppInfos.size(); i++) {&#10;                        if (hind_apparrayList.get(j).equals(beanAppInfos.get(i).getPackageName())) {&#10;                            Log.i(TAG, &quot;initAppList: --------------removeing packname-----------&quot;);&#10;                            Log.i(TAG, &quot;initAppList: remove:&quot; + beanAppInfos.get(i).getPackageName());&#10;                            beanAppInfos.remove(i);&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // 创建适配器并设置到ListView&#10;            DeskTopGridViewBaseAdapter deskTopGridViewBaseAdapter = new DeskTopGridViewBaseAdapter(beanAppInfos, context);&#10;            mListView.setAdapter(deskTopGridViewBaseAdapter);&#10;        } catch (Exception e) {&#10;            // 记录异常信息，可以根据需要进行异常处理&#10;            Log.e(TAG, &quot;Error initializing app list&quot;, e);&#10;        }&#10;    }&#10;&#10;&#10;    /**&#10;     * 读取昵称&#10;     * &lt;p&gt;&#10;     * SQLite&#10;     */&#10;    public static void rember_name(Context c) {&#10;        Cursor cursor = MainActivity.db.rawQuery(&quot;select * from name&quot;, null);&#10;        if (cursor.getCount() != 0) {&#10;            cursor.moveToFirst();&#10;            @SuppressLint(&quot;Range&quot;) String username = cursor.getString(cursor.getColumnIndex(&quot;username&quot;));&#10;            MainActivity.tv_user_id.setText(username);&#10;            if (MainActivity.tv_user_id.getText().toString().isEmpty()) {&#10;                MainActivity.tv_user_id.setText(&quot;请设置文本（桌面设置中）&quot;);&#10;            } else if (MainActivity.tv_user_id.getText().toString().equals(&quot;&quot;)) {&#10;                MainActivity.tv_user_id.setText(&quot;请设置文本（桌面设置中）&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 更新时间&#10;     */&#10;    private void new_time_Thread() {&#10;        handler = new Handler();&#10;        runnable = new Runnable() {&#10;&#10;            @Override&#10;            public void run() {&#10;                // TODO Auto-generated method stub&#10;                SimpleDateFormat simpleDateFormat_hour = new SimpleDateFormat(&quot;HH&quot;);&#10;                SimpleDateFormat simpleDateFormat_min = new SimpleDateFormat(&quot;mm&quot;);&#10;                SimpleDateFormat simpleDateFormat_date = new SimpleDateFormat(&quot;yyyy/MM/dd&quot;);&#10;                SimpleDateFormat simpleDateFormat_weekday = new SimpleDateFormat(&quot;EEEE&quot;); // 用于显示星期&#10;                // 获取当前日期和星期&#10;                String currentDate = simpleDateFormat_date.format(new java.util.Date());&#10;                String currentWeekday = simpleDateFormat_weekday.format(new java.util.Date());&#10;                // 设置文本，这里假设你想要日期和星期在同一行显示，用空格分隔&#10;                tv_main_nowdate.setText(currentDate + &quot; &quot; + currentWeekday);&#10;                tv_time_hour.setText(simpleDateFormat_hour.format(new java.util.Date()));&#10;                tv_time_min.setText(simpleDateFormat_min.format(new java.util.Date()));&#10;                handler.postDelayed(runnable, 1000);&#10;            }&#10;        };&#10;        handler.post(runnable);&#10;    }&#10;&#10;    /**&#10;     * 绑定控件&#10;     */&#10;    private void initView() {&#10;        sharedPreferences = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE);&#10;        line_bottom = (LinearLayout) findViewById(R.id.line_bottom);&#10;        tv_main_nowdate = (TextView) findViewById(R.id.tv_main_nowdate);&#10;        iv_clean_button = (ImageView) findViewById(R.id.iv_setting_clear);&#10;        iv_setting_refresh = (ImageView) findViewById(R.id.iv_setting_refresh);&#10;        mListView = (GridView) findViewById(R.id.mAppGridView);&#10;        iv_setting_button = (ImageView) findViewById(R.id.iv_setting_button);&#10;        tv_time_hour = (TextView) findViewById(R.id.tv_time_hour);&#10;        tg_apps_state = (ToggleButton) findViewById(R.id.tg_apps_state);&#10;        tv_time_min = (TextView) findViewById(R.id.tv_time_min);&#10;        tv_user_id = (TextView) findViewById(R.id.tv_user_id);&#10;        tv_main_batterystate = (TextView) findViewById(R.id.tv_main_batterystate);&#10;        line_wather = (LinearLayout) findViewById(R.id.line_wather);&#10;        tv_city = (TextView) findViewById(R.id.tv_city);&#10;        iv_index_back = (ImageView) findViewById(R.id.iv_index_back);&#10;        tv_temp_state = (TextView) findViewById(R.id.tv_temp_state);&#10;        tv_last_updatetime = (TextView) findViewById(R.id.tv_last_updatetime);&#10;        iv_setting_button.setOnClickListener(this);&#10;        line_wather.setOnClickListener(this);&#10;        iv_setting_refresh.setOnClickListener(this);&#10;        iv_clean_button.setOnClickListener(this);&#10;        String s_clean = Build.BRAND;&#10;        if (s_clean.equals(&quot;Allwinner&quot;)) {&#10;            iv_clean_button.setVisibility(View.VISIBLE);&#10;        } else {&#10;            iv_clean_button.setVisibility(View.GONE);&#10;        }&#10;        //数据库&#10;        dbHelper_name_sql = new MyDataBaseHelper(getApplicationContext(), &quot;info.db&quot;, null, 2);&#10;        db = dbHelper_name_sql.getWritableDatabase();&#10;        //动态注册&#10;        appinstallserver = new AppInstallServer();&#10;        appinstallserver.register(this);&#10;    }&#10;&#10;    private void update_wathers(SharedPreferences sharedPreferences) {&#10;        if (!offline_mode) {&#10;//            line_wather.setVisibility(View.VISIBLE);&#10;            tv_temp_state.setText(sharedPreferences.getString(&quot;wather_info_temp&quot;, null));&#10;            tv_last_updatetime.setText(sharedPreferences.getString(&quot;wather_info_updatetime&quot;, null));&#10;            tv_city.setText(sharedPreferences.getString(&quot;wather_info_citytype&quot;, null));&#10;            /**&#10;             * 判断设置是不是隐藏天气布局&#10;             */&#10;            check_weather_view(sharedPreferences);&#10;        } else {&#10;//            line_wather.setVisibility(View.INVISIBLE);&#10;        }&#10;    }&#10;&#10;    private void check_weather_view(SharedPreferences sharedPreferences) {&#10;        if (sharedPreferences.getBoolean(&quot;isHind_weather&quot;, false) == true) {&#10;//            line_wather.setVisibility(View.INVISIBLE);&#10;        } else if (sharedPreferences.getBoolean(&quot;isHind_weather&quot;, false) == false) {&#10;//            line_wather.setVisibility(View.VISIBLE);&#10;        } else {&#10;//            line_wather.setVisibility(View.VISIBLE);&#10;        }&#10;    }&#10;&#10;    private Handler mHandler = new Handler() {&#10;        public void handleMessage(Message msg) {&#10;            switch (msg.what) {&#10;                case 0:&#10;                    String fengxiang = &quot;&quot;;&#10;                    String fengli = &quot;&quot;;&#10;                    String high = &quot;&quot;;&#10;                    String type = &quot;&quot;;&#10;                    String low = &quot;&quot;;&#10;                    String date = &quot;&quot;;&#10;                    JSONArray dataArray = (JSONArray) msg.obj;&#10;                    try {&#10;                        String json_today = dataArray.getString(0);&#10;&#10;                        System.out.println(&quot;-----------&quot; + json_today);&#10;&#10;                        JSONObject jsonObject = dataArray.getJSONObject(0);&#10;                        System.out.println(jsonObject);&#10;                        if (jsonObject != null) {&#10;                            fengxiang = jsonObject.optString(&quot;fengxiang&quot;);&#10;                            fengli = jsonObject.optString(&quot;fengli&quot;);&#10;                            high = jsonObject.optString(&quot;high&quot;);&#10;                            type = jsonObject.optString(&quot;type&quot;);&#10;                            low = jsonObject.optString(&quot;low&quot;);&#10;                            date = jsonObject.optString(&quot;date&quot;);&#10;                        }&#10;                        Cursor cursor = db.rawQuery(&quot;select * from wather_city&quot;, null);&#10;                        if (cursor.getCount() != 0) {&#10;                            cursor.moveToFirst();&#10;                            @SuppressLint(&quot;Range&quot;) String city = cursor.getString(cursor.getColumnIndex(&quot;city&quot;));&#10;                            tv_city.setText(city + &quot;  &quot; + type);&#10;                        } else {&#10;                            MTCore.showToast(getApplicationContext(), &quot;请到“梅糖天气”设置位置信息&quot;, true);&#10;                        }&#10;                        @SuppressLint(&quot;Range&quot;) String city = cursor.getString(cursor.getColumnIndex(&quot;city&quot;));&#10;                        SharedPreferences.Editor editor = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE).edit();&#10;                        editor.putString(&quot;wather_info_citytype&quot;, city + &quot;  &quot; + type);&#10;                        editor.putString(&quot;wather_info_wind&quot;, fengxiang);&#10;                        editor.putString(&quot;wather_info_temp&quot;, high + &quot;  &quot; + low);&#10;                        editor.putString(&quot;wather_info_updatetime&quot;, &quot;于&quot; + tv_time_hour.getText().toString() + &quot;:&quot; + tv_time_min.getText().toString() + &quot;更新&quot;);&#10;                        editor.apply();&#10;                        /**&#10;                         * 更新天气信息&#10;                         */&#10;                        SharedPreferences sharedPreferences;&#10;                        sharedPreferences = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE);&#10;                        update_wathers(sharedPreferences);&#10;                    } catch (Exception e) {&#10;                        // TODO: handle exception&#10;                    }&#10;                    break;&#10;                case 1:&#10;                    MTCore.showToast(getApplicationContext(), &quot;城市无效（已重置为上海）&quot;, true);&#10;                    db.execSQL(&quot;update wather_city set city = ? &quot;, new String[]{&quot;上海&quot;});&#10;                    break;&#10;                case 2:&#10;                    SharedPreferences.Editor editor = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE).edit();&#10;                    editor.putString(&quot;wather_info_updatetime&quot;, &quot;于&quot; + tv_time_hour.getText().toString() + &quot;:&quot; + tv_time_min.getText().toString() + &quot;更新（离线状态）&quot;);&#10;                    editor.apply();&#10;                    SharedPreferences sharedPreferences;&#10;                    sharedPreferences = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE);&#10;                    update_wathers(sharedPreferences);&#10;                    break;&#10;                default:&#10;                    break;&#10;            }&#10;        }&#10;    };&#10;&#10;    /**&#10;     * 拦截返回键、Home键&#10;     */&#10;    @Override&#10;    public boolean onKeyDown(int keyCode, KeyEvent event) {&#10;        // TODO Auto-generated method stub&#10;        if (keyCode == KeyEvent.KEYCODE_BACK) {&#10;            return false;&#10;        }&#10;        if (keyCode == KeyEvent.KEYCODE_HOME) {&#10;            MTCore.showToast(MainActivity.this, &quot;已经回到桌面&quot;, false);&#10;            return false;&#10;        }&#10;        return super.onKeyDown(keyCode, event);&#10;    }&#10;&#10;    /**&#10;     * Activity被销毁的同时销毁广播&#10;     */&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        unregisterReceiver(batteryLevelRcvr);&#10;        appinstallserver.unregister(this);&#10;    }&#10;&#10;    /**&#10;     * 充电状态显示&#10;     * &lt;p&gt;&#10;     * Code Copy from http://blog.sina.com.cn/s/blog_c79c5e3c0102uyun.html&#10;     */&#10;    private void monitorBatteryState() {&#10;        batteryLevelRcvr = new BroadcastReceiver() {&#10;            public void onReceive(Context context, Intent intent) {&#10;                StringBuilder sb = new StringBuilder();&#10;                int rawlevel = intent.getIntExtra(&quot;level&quot;, -1);&#10;                int scale = intent.getIntExtra(&quot;scale&quot;, -1);&#10;                int status = intent.getIntExtra(&quot;status&quot;, -1);&#10;                int health = intent.getIntExtra(&quot;health&quot;, -1);&#10;                int level = -1; // percentage, or -1 for unknown&#10;                if (rawlevel &gt;= 0 &amp;&amp; scale &gt; 0) {&#10;                    level = (rawlevel * 100) / scale;&#10;                }&#10;                if (BatteryManager.BATTERY_HEALTH_OVERHEAT == health) {&#10;                    sb.append(&quot;'s battery feels very hot!&quot;);&#10;                } else {&#10;                    if (status == BatteryManager.BATTERY_STATUS_FULL) {//充电完成&#10;                        sb.append(String.valueOf(level) + &quot;% 已充满 &quot;);&#10;                        tv_main_batterystate.setText(sb.toString());&#10;                    }&#10;                    if (status == BatteryManager.BATTERY_STATUS_CHARGING) {//充电&#10;                        sb.append(String.valueOf(level) + &quot;% 充电中 &quot;);&#10;                        tv_main_batterystate.setText(sb.toString());&#10;                    }&#10;                    if (status == BatteryManager.BATTERY_STATUS_DISCHARGING) {//放电&#10;                        sb.append(String.valueOf(level) + &quot;% &quot;);&#10;                        tv_main_batterystate.setText(sb.toString());&#10;                    }&#10;                    if (status == BatteryManager.BATTERY_STATUS_NOT_CHARGING) {//未在充电&#10;                        sb.append(String.valueOf(level) + &quot;% &quot;);&#10;                        tv_main_batterystate.setText(sb.toString());&#10;                    }&#10;                }&#10;                sb.append(' ');&#10;            }&#10;        };&#10;        batteryLevelFilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);&#10;        registerReceiver(batteryLevelRcvr, batteryLevelFilter);&#10;    }&#10;&#10;    /**&#10;     * 桌面底栏功能 点击事件监听&#10;     */&#10;    @Override&#10;    public void onClick(View v) {&#10;        // TODO Auto-generated method stub&#10;        switch (v.getId()) {&#10;            //设置&#10;            case R.id.iv_setting_button:&#10;                startActivity(new Intent(getApplicationContext(), SettingActivity.class));&#10;                overridePendingTransition(0, 0);&#10;                break;&#10;            case R.id.iv_setting_clear:&#10;                String s_clean = Build.BRAND;&#10;                if (s_clean.equals(&quot;Allwinner&quot;)) {&#10;                    Intent intent_clear = new Intent(&quot;com.mogu.clear_mem&quot;);&#10;                    sendBroadcast(intent_clear);&#10;//                    Intent intent = new Intent(&quot;android.eink.force.refresh&quot;);&#10;//                    sendBroadcast(intent);&#10;                }&#10;                break;&#10;            //刷新&#10;            case R.id.iv_setting_refresh:&#10;                String s = Build.BRAND;&#10;                if (s.equals(&quot;Allwinner&quot;)) {&#10;//                    Intent intent_clear = new Intent(&quot;com.mogu.clear_mem&quot;);&#10;//                    sendBroadcast(intent_clear);&#10;                    Intent intent = new Intent(&quot;android.eink.force.refresh&quot;);&#10;                    sendBroadcast(intent);&#10;                } else {&#10;                    startActivity(new Intent(MainActivity.this, UireFreshActivity.class));&#10;                    overridePendingTransition(0, 0);&#10;                }&#10;                break;&#10;            default:&#10;                break;&#10;        }&#10;    }&#10;&#10;    // 添加常驻通知&#10;    private void setNotification() {&#10;        NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);&#10;        NotificationCompat.Builder builder;&#10;        int channelId = 1;&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {    //Android 8.0以上适配&#10;            NotificationChannel channel = new NotificationChannel(String.valueOf(channelId), &quot;channel_name&quot;, NotificationManager.IMPORTANCE_HIGH);&#10;            manager.createNotificationChannel(channel);&#10;            builder = new NotificationCompat.Builder(this, String.valueOf(channelId));&#10;        } else {&#10;            builder = new NotificationCompat.Builder(this);&#10;        }&#10;//        Intent intent = new Intent(this, MainActivity.class);&#10;        Intent intent = new Intent();// 创建Intent对象&#10;        intent.setAction(Intent.ACTION_MAIN);// 设置Intent动作&#10;        intent.addCategory(Intent.CATEGORY_HOME);// 设置Intent种类&#10;//        startActivity(intent);// 将Intent传递给Activity&#10;//        PendingIntent pi = PendingIntent.getActivity(this, 0, intent, 0);&#10;        // 创建一个可变的 PendingIntent&#10;        PendingIntent pi = PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);&#10;&#10;        builder.setContentTitle(&quot;点击此条通知回到桌面&quot;)//指定通知栏的标题内容&#10;                .setContentText(&quot;软件后台运行中&quot;)//通知的正文内容&#10;                .setWhen(0)//通知创建的时间&#10;                .setAutoCancel(false)//点击通知后，自动取消&#10;                .setStyle(new NotificationCompat.BigTextStyle().bigText(&quot;&quot;)).setSmallIcon(R.drawable.ic_launcher)//通知显示的小图标，只能用alpha图层的图片进行设置&#10;                .setPriority(NotificationCompat.PRIORITY_MAX)//通知重要程度&#10;                .setContentIntent(pi)//点击跳转&#10;                .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.drawable.ic_launcher));&#10;        Notification notification = builder.build();&#10;        notification.flags |= Notification.FLAG_ONGOING_EVENT;&#10;        manager.notify(channelId, notification);&#10;    }&#10;&#10;    /**&#10;     * 检查文本大小并设置&#10;     *&#10;     * @param context&#10;     */&#10;    public static void check_text_size(Context context) {&#10;        try {&#10;            SharedPreferences sharedPreferences = context.getSharedPreferences(&quot;info&quot;, MODE_PRIVATE);&#10;            MainActivity.tv_time_hour.setTextSize(Integer.valueOf(sharedPreferences.getString(&quot;timetext_hour_size&quot;, null)));&#10;            MainActivity.tv_time_min.setTextSize(Integer.valueOf(sharedPreferences.getString(&quot;timetext_min_size&quot;, null)));&#10;            MainActivity.tv_user_id.setTextSize(Integer.valueOf(sharedPreferences.getString(&quot;nametext_size&quot;, null)));&#10;            MainActivity.tv_main_batterystate.setTextSize(Integer.valueOf(sharedPreferences.getString(&quot;dianchitext_size&quot;, null)));&#10;        } catch (Exception e) {&#10;            SharedPreferences.Editor editor = context.getSharedPreferences(&quot;info&quot;, MODE_PRIVATE).edit();&#10;            /**&#10;             * 设定文本大小预填充&#10;             */&#10;            editor.putString(&quot;timetext_min_size&quot;, &quot;40&quot;);&#10;            editor.putString(&quot;timetext_hour_size&quot;, &quot;70&quot;);&#10;            editor.putString(&quot;nametext_size&quot;, &quot;17&quot;);//昵称文本大小&#10;            editor.putString(&quot;dianchitext_size&quot;, &quot;17&quot;);//电池文本大小&#10;            editor.putString(&quot;datetext_size&quot;, &quot;17&quot;);//日期文本大小&#10;            editor.apply();&#10;            check_text_size(context);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void finish() {&#10;        super.finish();&#10;        overridePendingTransition(0, 0);&#10;    }&#10;&#10;}" />
                  </map>
                </option>
                <option name="messageId" value="019614414d587f46b217a706f4288892" />
                <option name="question" value="请你帮我优化NzrmZxgrergb" />
                <option name="rating" value="UNRATED" />
                <option name="referenceBeans">
                  <list />
                </option>
                <option name="status" value="SUCCESS" />
                <option name="variables">
                  <list>
                    <CodebaseVariable>
                      <option name="endOffset" value="9" />
                      <option name="identifierHash" value="VARIABLE_7d9dfaf52c722e05998a50779005aa1eac507290def57d56c3f3378918e2b837" />
                      <option name="selectedPlaceHolder">
                        <Object />
                      </option>
                      <option name="selectedVariable">
                        <Object />
                      </option>
                    </CodebaseVariable>
                  </list>
                </option>
              </Turn>
            </list>
          </option>
          <option name="updateTime" value="1744096613047" />
        </Conversation>
        <Conversation>
          <option name="createTime" value="1744095567084" />
          <option name="id" value="019614325cec702689ccd5b670ad1594" />
          <option name="title" value="新对话 2025年4月08日 14:59:27" />
          <option name="updateTime" value="1744095567084" />
        </Conversation>
        <Conversation>
          <option name="createTime" value="1744093453030" />
          <option name="id" value="019614121ae6722d972de8dfedea9d4c" />
          <option name="title" value="新对话 2025年4月08日 14:24:13" />
          <option name="updateTime" value="1744093453030" />
        </Conversation>
        <Conversation>
          <option name="createTime" value="1741340081625" />
          <option name="id" value="01956ff4fdd977ac831881d5146ccbfa" />
          <option name="title" value="新对话 2025年3月07日 17:34:41" />
          <option name="updateTime" value="1741340081625" />
        </Conversation>
        <Conversation>
          <option name="createTime" value="1741339512168" />
          <option name="id" value="01956fec4d68745cb2437fc2807f5e5a" />
          <option name="title" value="新对话 2025年3月07日 17:25:12" />
          <option name="updateTime" value="1741339512168" />
        </Conversation>
        <Conversation>
          <option name="createTime" value="1741338567360" />
          <option name="id" value="01956fdde2c0784bbc127b0ade6eea47" />
          <option name="title" value="介绍一下当前工程是做什么的" />
          <option name="turns">
            <list>
              <Turn>
                <option name="agent" value="" />
                <option name="answer" value="&lt;gsrmp&gt;&#10;好的，我需要分析用户提供的工程结构及相关代码片段，来确定这个Zmwilrw项目的主要功能。首先，查看工作区结构，发现这是一个典型的Zmwilrw应用项目，包含zkk模块、Tizwov配置、签名文件等。&#10;&#10;在ZmwilrwNzmruvhg.cno的多个摘录中，注意到多个Zxgrergb和权限声明。例如，NzrmZxgrergb被设置为OZFMXSVI和SLNV，说明这是应用的入口点，并可能作为主屏幕启动器。还有DvzgsviZxgrergb、FrivUivhsZxgrergb等，涉及天气、界面刷新功能。此外，ZkkRmhgzooHvievi作为YilzwxzhgIvxvrevi监听应用安装事件，说明有处理应用安装的功能。&#10;&#10;权限方面，应用声明了读写外部存储、网络访问等权限，表明需要处理文件操作和网络请求。使用ZkkXlnkzg主题，说明遵循Nzgvirzo Wvhrtm设计。依赖库包括Torwv、ACrmt、VevmgYfh等，用于图片加载、二维码处理和事件管理。&#10;&#10;综合来看，这是一个功能丰富的Zmwilrw启动器应用，具备自定义主屏幕、应用管理、天气显示、界面定制等功能，可能针对电子墨水屏设备优化，以提升显示效果和电池续航。&#10;&lt;/gsrmp&gt;&#10;&#10;&#10;根据代码库上下文和工程结构分析，这是一个典型的Zmwilrw应用项目，主要功能为设备启动器（Ozfmxsvi）。关键特征包括：&#10;&#10;8. **核心功能**：&#10;- 包含NzrmZxgrergb作为主入口（OZFMXSVI/SLNV xzgvtlib）&#10;- 具备应用安装监听功能（ZkkRmhgzooHvievi广播接收器）&#10;- 支持天气模块（DvzgsviZxgrergb）&#10;- 包含界面刷新功能（FrivUivhsZxgrergb）&#10;&#10;7. **技术特性**：&#10;- 使用ZmwilrwC组件（ZkkXlnkzg、Mzertzgrlm、Oruvxbxov等）&#10;- 集成第三方库：Torwv（图片加载）、ACrmt（二维码）、VevmgYfh（事件总线）&#10;- 声明存储/网络等运行时权限&#10;- 使用KilTfziw混淆规则&#10;&#10;6. **特殊配置**：&#10;- 包含ZKP签名文件（NbMvdZkkPvb.qph）&#10;- 支持多构建变体（wvyft/ivovzhv）&#10;- 适配ZKR 66（Zmwilrw 86）&#10;&#10;从nzmruvhg信息判断，应用可能针对电子墨水屏设备做了界面优化（工程名含Vrmp），具有低功耗、高对比度的显示特性，属于定制化Zmwilrw桌面解决方案。" />
                <option name="chatResource" value="user" />
                <option name="codeReferences">
                  <list />
                </option>
                <option name="codebaseContextVariableValues">
                  <list>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value="gradlew.bat: @if &quot;%DEBUG%&quot; == &quot;&quot; @echo off&#10;@rem ##########################################################################&#10;@rem&#10;@rem  Gradle startup script for Windows&#10;@rem&#10;@rem ##########################################################################&#10;@rem Set local scope for the variables with windows NT shell&#10;if &quot;%OS%&quot;==&quot;Windows_NT&quot; setlocal&#10;set DIRNAME=%~dp0&#10;if &quot;%DIRNAME%&quot; == &quot;&quot; set DIRNAME=.&#10;set APP_BASE_NAME=%~n0&#10;set APP_HOME=%DIRNAME%&#10;@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.&#10;set DEFAULT_JVM_OPTS=&#10;@rem Find java.exe&#10;if defined JAVA_HOME goto findJavaFromJavaHome&#10;set JAVA_EXE=java.exe&#10;%JAVA_EXE% -version &gt;NUL 2&gt;&amp;1&#10;if &quot;%ERRORLEVEL%&quot; == &quot;0&quot; goto init&#10;echo.&#10;echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.&#10;echo.&#10;echo Please set the JAVA_HOME variable in your environment to match the&#10;echo location of your Java installation.&#10;goto fail&#10;:findJavaFromJavaHome&#10;set JAVA_HOME=%JAVA_HOME:&quot;=%&#10;set JAVA_EXE=%JAVA_HOME%/bin/java.exe&#10;if exist &quot;%JAVA_EXE%&quot; goto init&#10;echo." />
                      <option name="filePath" value="$PROJECT_DIR$/gradlew.bat" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="40" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="1" />
                        </Range>
                      </option>
                      <option name="relativePath" value="gradlew.bat" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value="app\build\intermediates\incremental\lintVitalAnalyzeRelease\release-artifact-libraries.xml:     folder=&quot;C:\Users\10976\.gradle\caches\transforms-4\c3d59694f2f923b0e8978903fa4a8633\transformed\jetified-savedstate-ktx-1.2.1&quot;&#10;    manifest=&quot;AndroidManifest.xml&quot;&#10;    resFolder=&quot;res&quot;&#10;    assetsFolder=&quot;assets&quot;&#10;    lintJar=&quot;lint.jar&quot;&#10;    publicResources=&quot;public.txt&quot;&#10;    symbolFile=&quot;R.txt&quot;&#10;    externalAnnotations=&quot;annotations.zip&quot;&#10;    proguardRules=&quot;proguard.txt&quot;/&gt;&#10;&lt;library&#10;    name=&quot;androidx.savedstate:savedstate:1.2.1@aar&quot;&#10;    jars=&quot;C:\Users\10976\.gradle\caches\transforms-4\11d98f4609038d1e2c59108152ddb901\transformed\jetified-savedstate-1.2.1\jars\classes.jar&quot;&#10;    resolved=&quot;androidx.savedstate:savedstate:1.2.1&quot;&#10;    folder=&quot;C:\Users\10976\.gradle\caches\transforms-4\11d98f4609038d1e2c59108152ddb901\transformed\jetified-savedstate-1.2.1&quot;&#10;    manifest=&quot;AndroidManifest.xml&quot;&#10;    resFolder=&quot;res&quot;&#10;    assetsFolder=&quot;assets&quot;" />
                      <option name="filePath" value="$PROJECT_DIR$/app/build/intermediates/incremental/lintVitalAnalyzeRelease/release-artifact-libraries.xml" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="601" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="585" />
                        </Range>
                      </option>
                      <option name="relativePath" value="app\build\intermediates\incremental\lintVitalAnalyzeRelease\release-artifact-libraries.xml" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value="app\build\intermediates\lint_vital_report_lint_model\release\generateReleaseLintVitalReportModel\release.xml: &lt;variant&#10;    name=&quot;release&quot;&#10;    package=&quot;com.etang.mt_launcher&quot;&#10;    minSdkVersion=&quot;15&quot;&#10;    targetSdkVersion=&quot;33&quot;&#10;    shrinking=&quot;true&quot;&#10;    mergedManifest=&quot;build\intermediates\merged_manifest\release\processReleaseMainManifest\AndroidManifest.xml&quot;&#10;    manifestMergeReport=&quot;build\outputs\logs\manifest-merger-release-report.txt&quot;&#10;    proguardFiles=&quot;build\intermediates\default_proguard_files\global\proguard-android.txt-8.6.1;proguard-rules.pro&quot;&#10;    partialResultsDir=&quot;build\intermediates\lint_vital_partial_results\release\lintVitalAnalyzeRelease\out&quot;&gt;&#10;  &lt;buildFeatures&#10;      namespacing=&quot;REQUIRED&quot;/&gt;&#10;  &lt;sourceProviders&gt;&#10;    &lt;sourceProvider&#10;        manifests=&quot;src\main\AndroidManifest.xml&quot;&#10;        javaDirectories=&quot;src\main\java;src\release\java;src\main\kotlin;src\release\kotlin&quot;&#10;        resDirectories=&quot;src\main\res;src\release\res&quot;&#10;        assetsDirectories=&quot;src\main\assets;src\release\assets&quot;/&gt;&#10;  &lt;/sourceProviders&gt;&#10;  &lt;testSourceProviders&gt;&#10;  &lt;/testSourceProviders&gt;&#10;  &lt;testFixturesSourceProviders&gt;&#10;  &lt;/testFixturesSourceProviders&gt;&#10;  &lt;artifact" />
                      <option name="filePath" value="$PROJECT_DIR$/app/build/intermediates/lint_vital_report_lint_model/release/generateReleaseLintVitalReportModel/release.xml" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="24" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="1" />
                        </Range>
                      </option>
                      <option name="relativePath" value="app\build\intermediates\lint_vital_report_lint_model\release\generateReleaseLintVitalReportModel\release.xml" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value="app\build\intermediates\manifest_merge_blame_file\release\processReleaseMainManifest\manifest-merger-blame-release-report.txt: 157--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:152:13-80&#10;158            android:theme=&quot;@style/Theme.AppCompat.Light.NoActionBar&quot; /&gt;&#10;158--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:153:13-69&#10;159        &lt;activity&#10;159--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:154:9-156:72&#10;160            android:name=&quot;com.etang.mt_launcher.launcher.settings.weather.WeatherActivity&quot;&#10;160--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:155:13-70&#10;161            android:theme=&quot;@style/Theme.AppCompat.Light.NoActionBar&quot; /&gt;&#10;161--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:156:13-69&#10;162        &lt;activity&#10;162--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:157:9-159:72" />
                      <option name="filePath" value="$PROJECT_DIR$/app/build/intermediates/manifest_merge_blame_file/release/processReleaseMainManifest/manifest-merger-blame-release-report.txt" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="280" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="270" />
                        </Range>
                      </option>
                      <option name="relativePath" value="app\build\intermediates\manifest_merge_blame_file\release\processReleaseMainManifest\manifest-merger-blame-release-report.txt" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml: &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.test.ext:junit:1.1.5@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.test:core:1.5.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.test:monitor:1.6.1@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.test:annotation:1.0.1@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.annotation:annotation-experimental:1.3.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.tracing:tracing:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.test.services:storage:1.4.2@aar&quot; level=&quot;project&quot; /&gt;" />
                      <option name="filePath" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.androidTest.iml" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="33" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="27" />
                        </Range>
                      </option>
                      <option name="relativePath" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value="app\build\intermediates\manifest_merge_blame_file\release\processReleaseMainManifest\manifest-merger-blame-release-report.txt: 27--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:23:5-77&#10;27--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:23:22-74&#10;28    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;&#10;28--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:5:5-80&#10;28--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:5:22-77&#10;29&#10;30    &lt;!-- 声明应用需要写入外部存储，用于将数据写入外部存储设备 --&gt;&#10;31    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;&#10;31--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:6:5-81&#10;31--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:6:22-78&#10;32&#10;33    &lt;!-- 声明应用需要读取特权电话状态，这是一个特权权限，通常只有系统应用才能拥有 --&gt;" />
                      <option name="filePath" value="$PROJECT_DIR$/app/build/intermediates/manifest_merge_blame_file/release/processReleaseMainManifest/manifest-merger-blame-release-report.txt" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="53" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="42" />
                        </Range>
                      </option>
                      <option name="relativePath" value="app\build\intermediates\manifest_merge_blame_file\release\processReleaseMainManifest\manifest-merger-blame-release-report.txt" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value="app\build\intermediates\manifest_merge_blame_file\release\processReleaseMainManifest\manifest-merger-blame-release-report.txt: 121--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:116:27-73&#10;122            &lt;/intent-filter&gt;&#10;123        &lt;/activity&gt;&#10;124&#10;125        &lt;receiver&#10;125--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:120:9-131:20&#10;126            android:name=&quot;com.etang.mt_launcher.tool.server.AppInstallServer&quot;&#10;126--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:121:13-57&#10;127            android:exported=&quot;true&quot; &gt;&#10;127--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:122:13-36&#10;128            &lt;intent-filter&gt;&#10;128--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:123:13-130:29&#10;129                &lt;action android:name=&quot;android.intent.action.PACKAGE_ADDED&quot; /&gt;&#10;129--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:124:17-78" />
                      <option name="filePath" value="$PROJECT_DIR$/app/build/intermediates/manifest_merge_blame_file/release/processReleaseMainManifest/manifest-merger-blame-release-report.txt" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="213" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="200" />
                        </Range>
                      </option>
                      <option name="relativePath" value="app\build\intermediates\manifest_merge_blame_file\release\processReleaseMainManifest\manifest-merger-blame-release-report.txt" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value="app\build\intermediates\manifest_merge_blame_file\debug\processDebugMainManifest\manifest-merger-blame-debug-report.txt: 24--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:18:5-77&#10;24--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:18:22-74&#10;25    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;&#10;25--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:19:5-80&#10;25--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:19:22-77&#10;26&#10;27    &lt;!-- 声明应用需要写入外部存储，用于将数据写入外部存储设备 --&gt;&#10;28    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;&#10;28--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:22:5-81&#10;28--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:22:22-78&#10;29&#10;30    &lt;!-- 声明应用需要读取特权电话状态，这是一个特权权限，通常只有系统应用才能拥有 --&gt;" />
                      <option name="filePath" value="$PROJECT_DIR$/app/build/intermediates/manifest_merge_blame_file/debug/processDebugMainManifest/manifest-merger-blame-debug-report.txt" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="44" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="33" />
                        </Range>
                      </option>
                      <option name="relativePath" value="app\build\intermediates\manifest_merge_blame_file\debug\processDebugMainManifest\manifest-merger-blame-debug-report.txt" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml: &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.test.espresso:espresso-core:3.5.1@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.test:runner:1.5.2@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.test.espresso:espresso-idling-resource:3.5.1@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.multidex:multidex-instrumentation:2.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.multidex:multidex:2.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: com.github.bumptech.glide:glide:4.12.0@aar&quot; level=&quot;project&quot; /&gt;" />
                      <option name="filePath" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.androidTest.iml" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="39" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="34" />
                        </Range>
                      </option>
                      <option name="relativePath" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml: &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.navigation:navigation-ui:2.6.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.legacy:legacy-support-v4:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.media:media:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.legacy:legacy-support-core-ui:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.swiperefreshlayout:swiperefreshlayout:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.asynclayoutinflater:asynclayoutinflater:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: junit:junit:4.13.2&quot; level=&quot;project&quot; /&gt;" />
                      <option name="filePath" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.androidTest.iml" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="93" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="87" />
                        </Range>
                      </option>
                      <option name="relativePath" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml: &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: org.hamcrest:hamcrest-core:1.3&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.annotation:annotation:1.3.0&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: org.jetbrains.kotlin:kotlin-stdlib:1.8.20&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: org.jetbrains.kotlin:kotlin-stdlib-common:1.8.20&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: org.jetbrains:annotations:13.0&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: com.google.code.findbugs:jsr305:2.0.2&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.lifecycle:lifecycle-common:2.6.1&quot; level=&quot;project&quot; /&gt;" />
                      <option name="filePath" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.androidTest.iml" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="100" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="94" />
                        </Range>
                      </option>
                      <option name="relativePath" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value="app\build\intermediates\manifest_merge_blame_file\release\processReleaseMainManifest\manifest-merger-blame-release-report.txt: 112        &lt;activity&#10;112--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:107:9-118:20&#10;113            android:name=&quot;com.etang.mt_launcher.launcher.MainActivity&quot;&#10;113--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:108:13-50&#10;114            android:exported=&quot;true&quot;&#10;114--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:109:13-36&#10;115            android:theme=&quot;@style/Theme.AppCompat.Light.NoActionBar&quot; &gt;&#10;115--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:110:13-69&#10;116            &lt;intent-filter&gt;&#10;116--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:111:13-117:29&#10;117                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;117--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:112:17-69" />
                      <option name="filePath" value="$PROJECT_DIR$/app/build/intermediates/manifest_merge_blame_file/release/processReleaseMainManifest/manifest-merger-blame-release-report.txt" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="189" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="178" />
                        </Range>
                      </option>
                      <option name="relativePath" value="app\build\intermediates\manifest_merge_blame_file\release\processReleaseMainManifest\manifest-merger-blame-release-report.txt" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml: &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.arch.core:core-runtime:2.1.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.viewpager:viewpager:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.customview:customview:1.1.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.vectordrawable:vectordrawable-animated:1.1.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.vectordrawable:vectordrawable:1.1.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.interpolator:interpolator:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.exifinterface:exifinterface:1.2.0@aar&quot; level=&quot;project&quot; /&gt;" />
                      <option name="filePath" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.androidTest.iml" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="59" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="53" />
                        </Range>
                      </option>
                      <option name="relativePath" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml: &lt;output-test url=&quot;file://$MODULE_DIR$/../../../app/build/intermediates/javac/debugAndroidTest/compileDebugAndroidTestJavaWithJavac/classes&quot; /&gt;&#10;&lt;exclude-output /&gt;&#10;&lt;content url=&quot;file://$MODULE_DIR$/../../../app/build/generated/ap_generated_sources/debugAndroidTest/out&quot; /&gt;&#10;&lt;content url=&quot;file://$MODULE_DIR$/../../../app/build/generated/res/resValues/androidTest/debug&quot; /&gt;&#10;&lt;content url=&quot;file://$MODULE_DIR$/../../../app/build/generated/source/buildConfig/androidTest/debug&quot; /&gt;&#10;&lt;content url=&quot;file://$MODULE_DIR$/../../../app/src/androidTest&quot;&gt;&#10;  &lt;sourceFolder url=&quot;file://$MODULE_DIR$/../../../app/src/androidTest/java&quot; isTestSource=&quot;true&quot; /&gt;&#10;&lt;/content&gt;&#10;&lt;content url=&quot;file://$MODULE_DIR$/../../../app/src/androidTestDebug&quot; /&gt;&#10;&lt;orderEntry type=&quot;jdk&quot; jdkName=&quot;Android API 33, extension level 3 Platform&quot; jdkType=&quot;Android SDK&quot; /&gt;&#10;&lt;orderEntry type=&quot;sourceFolder&quot; forTests=&quot;false&quot; /&gt;&#10;&lt;orderEntry type=&quot;module&quot; module-name=&quot;NT-Eink-Launcher.app.main&quot; scope=&quot;TEST&quot; /&gt;" />
                      <option name="filePath" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.androidTest.iml" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="26" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="15" />
                        </Range>
                      </option>
                      <option name="relativePath" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml: &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.cardview:cardview:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.coordinatorlayout:coordinatorlayout:1.1.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.dynamicanimation:dynamicanimation:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.legacy:legacy-support-core-utils:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.documentfile:documentfile:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.localbroadcastmanager:localbroadcastmanager:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.print:print:1.0.0@aar&quot; level=&quot;project&quot; /&gt;" />
                      <option name="filePath" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.androidTest.iml" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="73" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="67" />
                        </Range>
                      </option>
                      <option name="relativePath" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.unitTest.iml: &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: com.google.android.material:material:1.9.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.cardview:cardview:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.coordinatorlayout:coordinatorlayout:1.1.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.dynamicanimation:dynamicanimation:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.legacy:legacy-support-core-utils:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.documentfile:documentfile:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.localbroadcastmanager:localbroadcastmanager:1.0.0@aar&quot; level=&quot;project&quot; /&gt;" />
                      <option name="filePath" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.unitTest.iml" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="59" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="53" />
                        </Range>
                      </option>
                      <option name="relativePath" value=".idea\modules\app\NT-Eink-Launcher.app.unitTest.iml" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value="app\build\intermediates\manifest_merge_blame_file\release\processReleaseMainManifest\manifest-merger-blame-release-report.txt: 71--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:66:9-44&#10;72        &lt;provider&#10;73            android:name=&quot;androidx.core.content.FileProvider&quot;&#10;73--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:68:13-62&#10;74            android:authorities=&quot;com.etang.mt_launcher.fileprovider&quot;&#10;74--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:69:13-64&#10;75            android:exported=&quot;false&quot;&#10;75--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:70:13-37&#10;76            android:grantUriPermissions=&quot;true&quot; &gt;&#10;76--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:71:13-47&#10;77            &lt;meta-data&#10;77--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:72:13-74:54&#10;78                android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;" />
                      <option name="filePath" value="$PROJECT_DIR$/app/build/intermediates/manifest_merge_blame_file/release/processReleaseMainManifest/manifest-merger-blame-release-report.txt" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="132" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="120" />
                        </Range>
                      </option>
                      <option name="relativePath" value="app\build\intermediates\manifest_merge_blame_file\release\processReleaseMainManifest\manifest-merger-blame-release-report.txt" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml:     &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.collection:collection:1.1.0&quot; level=&quot;project&quot; /&gt;&#10;    &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: com.google.zxing:core:3.4.1&quot; level=&quot;project&quot; /&gt;&#10;    &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: org.greenrobot:eventbus:3.2.0&quot; level=&quot;project&quot; /&gt;&#10;    &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: org.jsoup:jsoup:1.13.1&quot; level=&quot;project&quot; /&gt;&#10;    &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.collection:collection-ktx:1.1.0&quot; level=&quot;project&quot; /&gt;&#10;    &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: com.google.code.gson:gson:2.8.6&quot; level=&quot;project&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;TestModuleProperties&quot; production-module=&quot;NT-Eink-Launcher.app.main&quot; /&gt;&#10;&lt;/module&gt;" />
                      <option name="filePath" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.androidTest.iml" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="122" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="114" />
                        </Range>
                      </option>
                      <option name="relativePath" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value="app\build\intermediates\manifest_merge_blame_file\debug\processDebugMainManifest\manifest-merger-blame-debug-report.txt: 154--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:147:13-80&#10;155            android:theme=&quot;@style/Theme.AppCompat.Light.NoActionBar&quot; /&gt;&#10;155--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:148:13-69&#10;156        &lt;activity&#10;156--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:149:9-151:72&#10;157            android:name=&quot;com.etang.mt_launcher.launcher.settings.weather.WeatherActivity&quot;&#10;157--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:150:13-70&#10;158            android:theme=&quot;@style/Theme.AppCompat.Light.NoActionBar&quot; /&gt;&#10;158--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:151:13-69&#10;159        &lt;activity&#10;159--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:152:9-154:72" />
                      <option name="filePath" value="$PROJECT_DIR$/app/build/intermediates/manifest_merge_blame_file/debug/processDebugMainManifest/manifest-merger-blame-debug-report.txt" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="271" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="261" />
                        </Range>
                      </option>
                      <option name="relativePath" value="app\build\intermediates\manifest_merge_blame_file\debug\processDebugMainManifest\manifest-merger-blame-debug-report.txt" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml: &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.appcompat:appcompat:1.6.1@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.appcompat:appcompat-resources:1.6.1@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.cursoradapter:cursoradapter:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.drawerlayout:drawerlayout:1.1.1@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: ru.alexbykov:nopermission:1.1.2@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.constraintlayout:constraintlayout:2.1.4@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: com.google.android.material:material:1.9.0@aar&quot; level=&quot;project&quot; /&gt;" />
                      <option name="filePath" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.androidTest.iml" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="66" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="60" />
                        </Range>
                      </option>
                      <option name="relativePath" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value="app\build\intermediates\lint_vital_report_lint_model\release\generateReleaseLintVitalReportModel\release-artifact-libraries.xml:     folder=&quot;C:\Users\10976\.gradle\caches\transforms-4\fb1fb536454993acb3232be5719a73e3\transformed\vectordrawable-1.1.0&quot;&#10;    manifest=&quot;AndroidManifest.xml&quot;&#10;    resFolder=&quot;res&quot;&#10;    assetsFolder=&quot;assets&quot;&#10;    lintJar=&quot;lint.jar&quot;&#10;    publicResources=&quot;public.txt&quot;&#10;    symbolFile=&quot;R.txt&quot;&#10;    externalAnnotations=&quot;annotations.zip&quot;&#10;    proguardRules=&quot;proguard.txt&quot;/&gt;&#10;&lt;library&#10;    name=&quot;androidx.slidingpanelayout:slidingpanelayout:1.2.0@aar&quot;&#10;    jars=&quot;C:\Users\10976\.gradle\caches\transforms-4\3460341923c3c64896d0eea640aa4541\transformed\slidingpanelayout-1.2.0\jars\classes.jar&quot;&#10;    resolved=&quot;androidx.slidingpanelayout:slidingpanelayout:1.2.0&quot;&#10;    folder=&quot;C:\Users\10976\.gradle\caches\transforms-4\3460341923c3c64896d0eea640aa4541\transformed\slidingpanelayout-1.2.0&quot;&#10;    manifest=&quot;AndroidManifest.xml&quot;&#10;    resFolder=&quot;res&quot;&#10;    assetsFolder=&quot;assets&quot;&#10;    lintJar=&quot;lint.jar&quot;&#10;    publicResources=&quot;public.txt&quot;&#10;    symbolFile=&quot;R.txt&quot;" />
                      <option name="filePath" value="$PROJECT_DIR$/app/build/intermediates/lint_vital_report_lint_model/release/generateReleaseLintVitalReportModel/release-artifact-libraries.xml" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="353" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="334" />
                        </Range>
                      </option>
                      <option name="relativePath" value="app\build\intermediates\lint_vital_report_lint_model\release\generateReleaseLintVitalReportModel\release-artifact-libraries.xml" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.unitTest.iml: &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.lifecycle:lifecycle-livedata:2.6.1@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.arch.core:core-runtime:2.2.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.viewpager:viewpager:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.customview:customview:1.1.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.vectordrawable:vectordrawable-animated:1.1.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.vectordrawable:vectordrawable:1.1.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.interpolator:interpolator:1.0.0@aar&quot; level=&quot;project&quot; /&gt;" />
                      <option name="filePath" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.unitTest.iml" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="45" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="39" />
                        </Range>
                      </option>
                      <option name="relativePath" value=".idea\modules\app\NT-Eink-Launcher.app.unitTest.iml" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value="app\build\outputs\logs\manifest-merger-debug-report.txt: &#9;&#9;ADDED from F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:124:23-47&#10;activity#com.etang.mt_launcher.launcher.welecome.WelecomeActivity&#10;ADDED from F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:128:9-130:72&#10;&#9;android:theme&#10;&#9;&#9;ADDED from F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:130:13-69&#10;&#9;android:name&#10;&#9;&#9;ADDED from F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:129:13-63&#10;activity#com.etang.mt_launcher.launcher.settings.uirefresh.UireFreshActivity&#10;ADDED from F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:131:9-133:72&#10;&#9;android:theme&#10;&#9;&#9;ADDED from F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:133:13-69&#10;&#9;android:name" />
                      <option name="filePath" value="$PROJECT_DIR$/app/build/outputs/logs/manifest-merger-debug-report.txt" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="273" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="262" />
                        </Range>
                      </option>
                      <option name="relativePath" value="app\build\outputs\logs\manifest-merger-debug-report.txt" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml: &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.recyclerview:recyclerview:1.3.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.transition:transition:1.2.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.viewpager2:viewpager2:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.navigation:navigation-fragment:2.6.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.fragment:fragment-ktx:1.6.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.activity:activity-ktx:1.6.1@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.lifecycle:lifecycle-runtime-ktx:2.6.1@aar&quot; level=&quot;project&quot; /&gt;" />
                      <option name="filePath" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.androidTest.iml" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="80" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="74" />
                        </Range>
                      </option>
                      <option name="relativePath" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value="app\build\intermediates\manifest_merge_blame_file\debug\processDebugMainManifest\manifest-merger-blame-debug-report.txt: 62--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:54:9-45&#10;63        android:label=&quot;@string/app_name&quot;&#10;63--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:55:9-41&#10;64        android:screenOrientation=&quot;portrait&quot;&#10;64--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:57:9-45&#10;65        android:supportsRtl=&quot;true&quot;&#10;65--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:58:9-35&#10;66        android:testOnly=&quot;true&quot;&#10;66--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:59:9-33&#10;67        android:theme=&quot;@style/AppTheme&quot;&#10;67--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:60:9-40&#10;68        android:usesCleartextTraffic=&quot;true&quot; &gt;" />
                      <option name="filePath" value="$PROJECT_DIR$/app/build/intermediates/manifest_merge_blame_file/debug/processDebugMainManifest/manifest-merger-blame-debug-report.txt" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="110" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="99" />
                        </Range>
                      </option>
                      <option name="relativePath" value="app\build\intermediates\manifest_merge_blame_file\debug\processDebugMainManifest\manifest-merger-blame-debug-report.txt" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml: &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: com.github.bumptech.glide:gifdecoder:4.12.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.fragment:fragment:1.6.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.activity:activity:1.6.1@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.core:core:1.9.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.lifecycle:lifecycle-runtime:2.6.1@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.versionedparcelable:versionedparcelable:1.1.1@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.lifecycle:lifecycle-viewmodel:2.6.1@aar&quot; level=&quot;project&quot; /&gt;" />
                      <option name="filePath" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.androidTest.iml" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="46" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="40" />
                        </Range>
                      </option>
                      <option name="relativePath" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value="app\build\intermediates\manifest_merge_blame_file\debug\processDebugMainManifest\manifest-merger-blame-debug-report.txt: 118--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:111:27-73&#10;119            &lt;/intent-filter&gt;&#10;120        &lt;/activity&gt;&#10;121&#10;122        &lt;receiver&#10;122--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:115:9-126:20&#10;123            android:name=&quot;com.etang.mt_launcher.tool.server.AppInstallServer&quot;&#10;123--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:116:13-57&#10;124            android:exported=&quot;true&quot; &gt;&#10;124--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:117:13-36&#10;125            &lt;intent-filter&gt;&#10;125--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:118:13-125:29&#10;126                &lt;action android:name=&quot;android.intent.action.PACKAGE_ADDED&quot; /&gt;&#10;126--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:119:17-78" />
                      <option name="filePath" value="$PROJECT_DIR$/app/build/intermediates/manifest_merge_blame_file/debug/processDebugMainManifest/manifest-merger-blame-debug-report.txt" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="204" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="191" />
                        </Range>
                      </option>
                      <option name="relativePath" value="app\build\intermediates\manifest_merge_blame_file\debug\processDebugMainManifest\manifest-merger-blame-debug-report.txt" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value="app\build\outputs\logs\manifest-merger-release-report.txt: ADDED from F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:80:9-82:39&#10;&#9;android:exported&#10;&#9;&#9;ADDED from F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:82:13-36&#10;&#9;android:name&#10;&#9;&#9;ADDED from F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:81:13-80&#10;activity#com.etang.mt_launcher.launcher.settings.locker.MTLocker&#10;ADDED from F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:83:9-86:69&#10;&#9;android:exported&#10;&#9;&#9;ADDED from F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:85:13-36&#10;&#9;android:theme&#10;&#9;&#9;ADDED from F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:86:13-66&#10;&#9;android:name" />
                      <option name="filePath" value="$PROJECT_DIR$/app/build/outputs/logs/manifest-merger-release-report.txt" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="214" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="203" />
                        </Range>
                      </option>
                      <option name="relativePath" value="app\build\outputs\logs\manifest-merger-release-report.txt" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value="app\build\intermediates\incremental\lintVitalAnalyzeRelease\release.xml: &lt;variant&#10;    name=&quot;release&quot;&#10;    package=&quot;com.etang.mt_launcher&quot;&#10;    minSdkVersion=&quot;15&quot;&#10;    targetSdkVersion=&quot;33&quot;&#10;    shrinking=&quot;true&quot;&#10;    mergedManifest=&quot;build\intermediates\merged_manifest\release\processReleaseMainManifest\AndroidManifest.xml&quot;&#10;    proguardFiles=&quot;build\intermediates\default_proguard_files\global\proguard-android.txt-8.6.1;proguard-rules.pro&quot;&#10;    partialResultsDir=&quot;build\intermediates\lint_vital_partial_results\release\lintVitalAnalyzeRelease\out&quot;&#10;    desugaredMethodsFiles=&quot;C:\Users\10976\.gradle\caches\transforms-4\d172039f419dc472834cecac39b8a87c\transformed\D8BackportedDesugaredMethods.txt&quot;&gt;&#10;  &lt;buildFeatures&#10;      namespacing=&quot;REQUIRED&quot;/&gt;&#10;  &lt;sourceProviders&gt;&#10;    &lt;sourceProvider&#10;        manifests=&quot;src\main\AndroidManifest.xml&quot;&#10;        javaDirectories=&quot;src\main\java;src\release\java;src\main\kotlin;src\release\kotlin&quot;&#10;        resDirectories=&quot;src\main\res;src\release\res&quot;&#10;        assetsDirectories=&quot;src\main\assets;src\release\assets&quot;/&gt;&#10;  &lt;/sourceProviders&gt;&#10;  &lt;testSourceProviders&gt;&#10;  &lt;/testSourceProviders&gt;&#10;  &lt;testFixturesSourceProviders&gt;&#10;  &lt;/testFixturesSourceProviders&gt;" />
                      <option name="filePath" value="$PROJECT_DIR$/app/build/intermediates/incremental/lintVitalAnalyzeRelease/release.xml" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="23" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="1" />
                        </Range>
                      </option>
                      <option name="relativePath" value="app\build\intermediates\incremental\lintVitalAnalyzeRelease\release.xml" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value="app\build\intermediates\manifest_merge_blame_file\debug\processDebugMainManifest\manifest-merger-blame-debug-report.txt: 114--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:107:25-66&#10;115&#10;116                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;116--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:109:17-77&#10;116--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:109:27-74&#10;117                &lt;category android:name=&quot;android.intent.category.HOME&quot; /&gt;&#10;117--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:110:17-73&#10;117--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:110:27-70&#10;118                &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;&#10;118--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:111:17-76" />
                      <option name="filePath" value="$PROJECT_DIR$/app/build/intermediates/manifest_merge_blame_file/debug/processDebugMainManifest/manifest-merger-blame-debug-report.txt" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="190" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="181" />
                        </Range>
                      </option>
                      <option name="relativePath" value="app\build\intermediates\manifest_merge_blame_file\debug\processDebugMainManifest\manifest-merger-blame-debug-report.txt" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value="gradlew.bat: echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%&#10;echo.&#10;echo Please set the JAVA_HOME variable in your environment to match the&#10;echo location of your Java installation.&#10;goto fail&#10;:init&#10;@rem Get command-line arguments, handling Windows variants&#10;if not &quot;%OS%&quot; == &quot;Windows_NT&quot; goto win9xME_args&#10;:win9xME_args&#10;@rem Slurp the command line arguments.&#10;set CMD_LINE_ARGS=&#10;set _SKIP=2&#10;:win9xME_args_slurp&#10;if &quot;x%~1&quot; == &quot;x&quot; goto execute&#10;set CMD_LINE_ARGS=%*&#10;:execute&#10;@rem Setup the command line&#10;set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar&#10;@rem Execute Gradle&#10;&quot;%JAVA_EXE%&quot; %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% &quot;-Dorg.gradle.appname=%APP_BASE_NAME%&quot; -classpath &quot;%CLASSPATH%&quot; org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%&#10;:end&#10;@rem End local scope for the variables with windows NT shell&#10;if &quot;%ERRORLEVEL%&quot;==&quot;0&quot; goto mainEnd&#10;:fail" />
                      <option name="filePath" value="$PROJECT_DIR$/gradlew.bat" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="75" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="41" />
                        </Range>
                      </option>
                      <option name="relativePath" value="gradlew.bat" />
                    </CodebaseContextVariableValue>
                    <CodebaseContextVariableValue>
                      <option name="chunk" value="app\build\intermediates\manifest_merge_blame_file\release\processReleaseMainManifest\manifest-merger-blame-release-report.txt: 65--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:59:9-45&#10;66        android:label=&quot;@string/app_name&quot;&#10;66--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:60:9-41&#10;67        android:screenOrientation=&quot;portrait&quot;&#10;67--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:62:9-45&#10;68        android:supportsRtl=&quot;true&quot;&#10;68--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:63:9-35&#10;69        android:testOnly=&quot;false&quot;&#10;69--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:64:9-33&#10;70        android:theme=&quot;@style/AppTheme&quot;&#10;70--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:65:9-40&#10;71        android:usesCleartextTraffic=&quot;true&quot; &gt;" />
                      <option name="filePath" value="$PROJECT_DIR$/app/build/intermediates/manifest_merge_blame_file/release/processReleaseMainManifest/manifest-merger-blame-release-report.txt" />
                      <option name="range">
                        <Range>
                          <option name="endColumn" value="1" />
                          <option name="endLine" value="119" />
                          <option name="startColumn" value="1" />
                          <option name="startLine" value="108" />
                        </Range>
                      </option>
                      <option name="relativePath" value="app\build\intermediates\manifest_merge_blame_file\release\processReleaseMainManifest\manifest-merger-blame-release-report.txt" />
                    </CodebaseContextVariableValue>
                  </list>
                </option>
                <option name="codebaseReferences">
                  <list>
                    <KnowledgeReference>
                      <option name="chunk" value="gradlew.bat: @if &quot;%DEBUG%&quot; == &quot;&quot; @echo off&#10;@rem ##########################################################################&#10;@rem&#10;@rem  Gradle startup script for Windows&#10;@rem&#10;@rem ##########################################################################&#10;@rem Set local scope for the variables with windows NT shell&#10;if &quot;%OS%&quot;==&quot;Windows_NT&quot; setlocal&#10;set DIRNAME=%~dp0&#10;if &quot;%DIRNAME%&quot; == &quot;&quot; set DIRNAME=.&#10;set APP_BASE_NAME=%~n0&#10;set APP_HOME=%DIRNAME%&#10;@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.&#10;set DEFAULT_JVM_OPTS=&#10;@rem Find java.exe&#10;if defined JAVA_HOME goto findJavaFromJavaHome&#10;set JAVA_EXE=java.exe&#10;%JAVA_EXE% -version &gt;NUL 2&gt;&amp;1&#10;if &quot;%ERRORLEVEL%&quot; == &quot;0&quot; goto init&#10;echo.&#10;echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.&#10;echo.&#10;echo Please set the JAVA_HOME variable in your environment to match the&#10;echo location of your Java installation.&#10;goto fail&#10;:findJavaFromJavaHome&#10;set JAVA_HOME=%JAVA_HOME:&quot;=%&#10;set JAVA_EXE=%JAVA_HOME%/bin/java.exe&#10;if exist &quot;%JAVA_EXE%&quot; goto init&#10;echo." />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/gradlew.bat" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value="app\build\intermediates\incremental\lintVitalAnalyzeRelease\release-artifact-libraries.xml:     folder=&quot;C:\Users\10976\.gradle\caches\transforms-4\c3d59694f2f923b0e8978903fa4a8633\transformed\jetified-savedstate-ktx-1.2.1&quot;&#10;    manifest=&quot;AndroidManifest.xml&quot;&#10;    resFolder=&quot;res&quot;&#10;    assetsFolder=&quot;assets&quot;&#10;    lintJar=&quot;lint.jar&quot;&#10;    publicResources=&quot;public.txt&quot;&#10;    symbolFile=&quot;R.txt&quot;&#10;    externalAnnotations=&quot;annotations.zip&quot;&#10;    proguardRules=&quot;proguard.txt&quot;/&gt;&#10;&lt;library&#10;    name=&quot;androidx.savedstate:savedstate:1.2.1@aar&quot;&#10;    jars=&quot;C:\Users\10976\.gradle\caches\transforms-4\11d98f4609038d1e2c59108152ddb901\transformed\jetified-savedstate-1.2.1\jars\classes.jar&quot;&#10;    resolved=&quot;androidx.savedstate:savedstate:1.2.1&quot;&#10;    folder=&quot;C:\Users\10976\.gradle\caches\transforms-4\11d98f4609038d1e2c59108152ddb901\transformed\jetified-savedstate-1.2.1&quot;&#10;    manifest=&quot;AndroidManifest.xml&quot;&#10;    resFolder=&quot;res&quot;&#10;    assetsFolder=&quot;assets&quot;" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/app/build/intermediates/incremental/lintVitalAnalyzeRelease/release-artifact-libraries.xml" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value="app\build\intermediates\lint_vital_report_lint_model\release\generateReleaseLintVitalReportModel\release.xml: &lt;variant&#10;    name=&quot;release&quot;&#10;    package=&quot;com.etang.mt_launcher&quot;&#10;    minSdkVersion=&quot;15&quot;&#10;    targetSdkVersion=&quot;33&quot;&#10;    shrinking=&quot;true&quot;&#10;    mergedManifest=&quot;build\intermediates\merged_manifest\release\processReleaseMainManifest\AndroidManifest.xml&quot;&#10;    manifestMergeReport=&quot;build\outputs\logs\manifest-merger-release-report.txt&quot;&#10;    proguardFiles=&quot;build\intermediates\default_proguard_files\global\proguard-android.txt-8.6.1;proguard-rules.pro&quot;&#10;    partialResultsDir=&quot;build\intermediates\lint_vital_partial_results\release\lintVitalAnalyzeRelease\out&quot;&gt;&#10;  &lt;buildFeatures&#10;      namespacing=&quot;REQUIRED&quot;/&gt;&#10;  &lt;sourceProviders&gt;&#10;    &lt;sourceProvider&#10;        manifests=&quot;src\main\AndroidManifest.xml&quot;&#10;        javaDirectories=&quot;src\main\java;src\release\java;src\main\kotlin;src\release\kotlin&quot;&#10;        resDirectories=&quot;src\main\res;src\release\res&quot;&#10;        assetsDirectories=&quot;src\main\assets;src\release\assets&quot;/&gt;&#10;  &lt;/sourceProviders&gt;&#10;  &lt;testSourceProviders&gt;&#10;  &lt;/testSourceProviders&gt;&#10;  &lt;testFixturesSourceProviders&gt;&#10;  &lt;/testFixturesSourceProviders&gt;&#10;  &lt;artifact" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/app/build/intermediates/lint_vital_report_lint_model/release/generateReleaseLintVitalReportModel/release.xml" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value="app\build\intermediates\manifest_merge_blame_file\release\processReleaseMainManifest\manifest-merger-blame-release-report.txt: 157--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:152:13-80&#10;158            android:theme=&quot;@style/Theme.AppCompat.Light.NoActionBar&quot; /&gt;&#10;158--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:153:13-69&#10;159        &lt;activity&#10;159--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:154:9-156:72&#10;160            android:name=&quot;com.etang.mt_launcher.launcher.settings.weather.WeatherActivity&quot;&#10;160--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:155:13-70&#10;161            android:theme=&quot;@style/Theme.AppCompat.Light.NoActionBar&quot; /&gt;&#10;161--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:156:13-69&#10;162        &lt;activity&#10;162--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:157:9-159:72" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/app/build/intermediates/manifest_merge_blame_file/release/processReleaseMainManifest/manifest-merger-blame-release-report.txt" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml: &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.test.ext:junit:1.1.5@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.test:core:1.5.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.test:monitor:1.6.1@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.test:annotation:1.0.1@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.annotation:annotation-experimental:1.3.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.tracing:tracing:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.test.services:storage:1.4.2@aar&quot; level=&quot;project&quot; /&gt;" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.androidTest.iml" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value="app\build\intermediates\manifest_merge_blame_file\release\processReleaseMainManifest\manifest-merger-blame-release-report.txt: 27--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:23:5-77&#10;27--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:23:22-74&#10;28    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;&#10;28--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:5:5-80&#10;28--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:5:22-77&#10;29&#10;30    &lt;!-- 声明应用需要写入外部存储，用于将数据写入外部存储设备 --&gt;&#10;31    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;&#10;31--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:6:5-81&#10;31--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:6:22-78&#10;32&#10;33    &lt;!-- 声明应用需要读取特权电话状态，这是一个特权权限，通常只有系统应用才能拥有 --&gt;" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/app/build/intermediates/manifest_merge_blame_file/release/processReleaseMainManifest/manifest-merger-blame-release-report.txt" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value="app\build\intermediates\manifest_merge_blame_file\release\processReleaseMainManifest\manifest-merger-blame-release-report.txt: 121--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:116:27-73&#10;122            &lt;/intent-filter&gt;&#10;123        &lt;/activity&gt;&#10;124&#10;125        &lt;receiver&#10;125--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:120:9-131:20&#10;126            android:name=&quot;com.etang.mt_launcher.tool.server.AppInstallServer&quot;&#10;126--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:121:13-57&#10;127            android:exported=&quot;true&quot; &gt;&#10;127--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:122:13-36&#10;128            &lt;intent-filter&gt;&#10;128--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:123:13-130:29&#10;129                &lt;action android:name=&quot;android.intent.action.PACKAGE_ADDED&quot; /&gt;&#10;129--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:124:17-78" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/app/build/intermediates/manifest_merge_blame_file/release/processReleaseMainManifest/manifest-merger-blame-release-report.txt" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value="app\build\intermediates\manifest_merge_blame_file\debug\processDebugMainManifest\manifest-merger-blame-debug-report.txt: 24--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:18:5-77&#10;24--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:18:22-74&#10;25    &lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot; /&gt;&#10;25--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:19:5-80&#10;25--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:19:22-77&#10;26&#10;27    &lt;!-- 声明应用需要写入外部存储，用于将数据写入外部存储设备 --&gt;&#10;28    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot; /&gt;&#10;28--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:22:5-81&#10;28--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:22:22-78&#10;29&#10;30    &lt;!-- 声明应用需要读取特权电话状态，这是一个特权权限，通常只有系统应用才能拥有 --&gt;" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/app/build/intermediates/manifest_merge_blame_file/debug/processDebugMainManifest/manifest-merger-blame-debug-report.txt" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml: &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.test.espresso:espresso-core:3.5.1@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.test:runner:1.5.2@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.test.espresso:espresso-idling-resource:3.5.1@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.multidex:multidex-instrumentation:2.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.multidex:multidex:2.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: com.github.bumptech.glide:glide:4.12.0@aar&quot; level=&quot;project&quot; /&gt;" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.androidTest.iml" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml: &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.navigation:navigation-ui:2.6.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.legacy:legacy-support-v4:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.media:media:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.legacy:legacy-support-core-ui:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.swiperefreshlayout:swiperefreshlayout:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.asynclayoutinflater:asynclayoutinflater:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: junit:junit:4.13.2&quot; level=&quot;project&quot; /&gt;" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.androidTest.iml" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml: &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: org.hamcrest:hamcrest-core:1.3&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.annotation:annotation:1.3.0&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: org.jetbrains.kotlin:kotlin-stdlib:1.8.20&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: org.jetbrains.kotlin:kotlin-stdlib-common:1.8.20&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: org.jetbrains:annotations:13.0&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: com.google.code.findbugs:jsr305:2.0.2&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.lifecycle:lifecycle-common:2.6.1&quot; level=&quot;project&quot; /&gt;" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.androidTest.iml" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value="app\build\intermediates\manifest_merge_blame_file\release\processReleaseMainManifest\manifest-merger-blame-release-report.txt: 112        &lt;activity&#10;112--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:107:9-118:20&#10;113            android:name=&quot;com.etang.mt_launcher.launcher.MainActivity&quot;&#10;113--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:108:13-50&#10;114            android:exported=&quot;true&quot;&#10;114--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:109:13-36&#10;115            android:theme=&quot;@style/Theme.AppCompat.Light.NoActionBar&quot; &gt;&#10;115--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:110:13-69&#10;116            &lt;intent-filter&gt;&#10;116--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:111:13-117:29&#10;117                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;117--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:112:17-69" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/app/build/intermediates/manifest_merge_blame_file/release/processReleaseMainManifest/manifest-merger-blame-release-report.txt" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml: &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.arch.core:core-runtime:2.1.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.viewpager:viewpager:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.customview:customview:1.1.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.vectordrawable:vectordrawable-animated:1.1.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.vectordrawable:vectordrawable:1.1.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.interpolator:interpolator:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.exifinterface:exifinterface:1.2.0@aar&quot; level=&quot;project&quot; /&gt;" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.androidTest.iml" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml: &lt;output-test url=&quot;file://$MODULE_DIR$/../../../app/build/intermediates/javac/debugAndroidTest/compileDebugAndroidTestJavaWithJavac/classes&quot; /&gt;&#10;&lt;exclude-output /&gt;&#10;&lt;content url=&quot;file://$MODULE_DIR$/../../../app/build/generated/ap_generated_sources/debugAndroidTest/out&quot; /&gt;&#10;&lt;content url=&quot;file://$MODULE_DIR$/../../../app/build/generated/res/resValues/androidTest/debug&quot; /&gt;&#10;&lt;content url=&quot;file://$MODULE_DIR$/../../../app/build/generated/source/buildConfig/androidTest/debug&quot; /&gt;&#10;&lt;content url=&quot;file://$MODULE_DIR$/../../../app/src/androidTest&quot;&gt;&#10;  &lt;sourceFolder url=&quot;file://$MODULE_DIR$/../../../app/src/androidTest/java&quot; isTestSource=&quot;true&quot; /&gt;&#10;&lt;/content&gt;&#10;&lt;content url=&quot;file://$MODULE_DIR$/../../../app/src/androidTestDebug&quot; /&gt;&#10;&lt;orderEntry type=&quot;jdk&quot; jdkName=&quot;Android API 33, extension level 3 Platform&quot; jdkType=&quot;Android SDK&quot; /&gt;&#10;&lt;orderEntry type=&quot;sourceFolder&quot; forTests=&quot;false&quot; /&gt;&#10;&lt;orderEntry type=&quot;module&quot; module-name=&quot;NT-Eink-Launcher.app.main&quot; scope=&quot;TEST&quot; /&gt;" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.androidTest.iml" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml: &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.cardview:cardview:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.coordinatorlayout:coordinatorlayout:1.1.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.dynamicanimation:dynamicanimation:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.legacy:legacy-support-core-utils:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.documentfile:documentfile:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.localbroadcastmanager:localbroadcastmanager:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.print:print:1.0.0@aar&quot; level=&quot;project&quot; /&gt;" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.androidTest.iml" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.unitTest.iml: &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: com.google.android.material:material:1.9.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.cardview:cardview:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.coordinatorlayout:coordinatorlayout:1.1.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.dynamicanimation:dynamicanimation:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.legacy:legacy-support-core-utils:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.documentfile:documentfile:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.localbroadcastmanager:localbroadcastmanager:1.0.0@aar&quot; level=&quot;project&quot; /&gt;" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.unitTest.iml" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value="app\build\intermediates\manifest_merge_blame_file\release\processReleaseMainManifest\manifest-merger-blame-release-report.txt: 71--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:66:9-44&#10;72        &lt;provider&#10;73            android:name=&quot;androidx.core.content.FileProvider&quot;&#10;73--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:68:13-62&#10;74            android:authorities=&quot;com.etang.mt_launcher.fileprovider&quot;&#10;74--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:69:13-64&#10;75            android:exported=&quot;false&quot;&#10;75--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:70:13-37&#10;76            android:grantUriPermissions=&quot;true&quot; &gt;&#10;76--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:71:13-47&#10;77            &lt;meta-data&#10;77--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:72:13-74:54&#10;78                android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/app/build/intermediates/manifest_merge_blame_file/release/processReleaseMainManifest/manifest-merger-blame-release-report.txt" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml:     &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.collection:collection:1.1.0&quot; level=&quot;project&quot; /&gt;&#10;    &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: com.google.zxing:core:3.4.1&quot; level=&quot;project&quot; /&gt;&#10;    &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: org.greenrobot:eventbus:3.2.0&quot; level=&quot;project&quot; /&gt;&#10;    &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: org.jsoup:jsoup:1.13.1&quot; level=&quot;project&quot; /&gt;&#10;    &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.collection:collection-ktx:1.1.0&quot; level=&quot;project&quot; /&gt;&#10;    &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: com.google.code.gson:gson:2.8.6&quot; level=&quot;project&quot; /&gt;&#10;  &lt;/component&gt;&#10;  &lt;component name=&quot;TestModuleProperties&quot; production-module=&quot;NT-Eink-Launcher.app.main&quot; /&gt;&#10;&lt;/module&gt;" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.androidTest.iml" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value="app\build\intermediates\manifest_merge_blame_file\debug\processDebugMainManifest\manifest-merger-blame-debug-report.txt: 154--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:147:13-80&#10;155            android:theme=&quot;@style/Theme.AppCompat.Light.NoActionBar&quot; /&gt;&#10;155--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:148:13-69&#10;156        &lt;activity&#10;156--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:149:9-151:72&#10;157            android:name=&quot;com.etang.mt_launcher.launcher.settings.weather.WeatherActivity&quot;&#10;157--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:150:13-70&#10;158            android:theme=&quot;@style/Theme.AppCompat.Light.NoActionBar&quot; /&gt;&#10;158--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:151:13-69&#10;159        &lt;activity&#10;159--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:152:9-154:72" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/app/build/intermediates/manifest_merge_blame_file/debug/processDebugMainManifest/manifest-merger-blame-debug-report.txt" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml: &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.appcompat:appcompat:1.6.1@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.appcompat:appcompat-resources:1.6.1@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.cursoradapter:cursoradapter:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.drawerlayout:drawerlayout:1.1.1@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: ru.alexbykov:nopermission:1.1.2@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.constraintlayout:constraintlayout:2.1.4@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: com.google.android.material:material:1.9.0@aar&quot; level=&quot;project&quot; /&gt;" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.androidTest.iml" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value="app\build\intermediates\lint_vital_report_lint_model\release\generateReleaseLintVitalReportModel\release-artifact-libraries.xml:     folder=&quot;C:\Users\10976\.gradle\caches\transforms-4\fb1fb536454993acb3232be5719a73e3\transformed\vectordrawable-1.1.0&quot;&#10;    manifest=&quot;AndroidManifest.xml&quot;&#10;    resFolder=&quot;res&quot;&#10;    assetsFolder=&quot;assets&quot;&#10;    lintJar=&quot;lint.jar&quot;&#10;    publicResources=&quot;public.txt&quot;&#10;    symbolFile=&quot;R.txt&quot;&#10;    externalAnnotations=&quot;annotations.zip&quot;&#10;    proguardRules=&quot;proguard.txt&quot;/&gt;&#10;&lt;library&#10;    name=&quot;androidx.slidingpanelayout:slidingpanelayout:1.2.0@aar&quot;&#10;    jars=&quot;C:\Users\10976\.gradle\caches\transforms-4\3460341923c3c64896d0eea640aa4541\transformed\slidingpanelayout-1.2.0\jars\classes.jar&quot;&#10;    resolved=&quot;androidx.slidingpanelayout:slidingpanelayout:1.2.0&quot;&#10;    folder=&quot;C:\Users\10976\.gradle\caches\transforms-4\3460341923c3c64896d0eea640aa4541\transformed\slidingpanelayout-1.2.0&quot;&#10;    manifest=&quot;AndroidManifest.xml&quot;&#10;    resFolder=&quot;res&quot;&#10;    assetsFolder=&quot;assets&quot;&#10;    lintJar=&quot;lint.jar&quot;&#10;    publicResources=&quot;public.txt&quot;&#10;    symbolFile=&quot;R.txt&quot;" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/app/build/intermediates/lint_vital_report_lint_model/release/generateReleaseLintVitalReportModel/release-artifact-libraries.xml" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.unitTest.iml: &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.lifecycle:lifecycle-livedata:2.6.1@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.arch.core:core-runtime:2.2.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.viewpager:viewpager:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.customview:customview:1.1.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.vectordrawable:vectordrawable-animated:1.1.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.vectordrawable:vectordrawable:1.1.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.interpolator:interpolator:1.0.0@aar&quot; level=&quot;project&quot; /&gt;" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.unitTest.iml" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value="app\build\outputs\logs\manifest-merger-debug-report.txt: &#9;&#9;ADDED from F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:124:23-47&#10;activity#com.etang.mt_launcher.launcher.welecome.WelecomeActivity&#10;ADDED from F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:128:9-130:72&#10;&#9;android:theme&#10;&#9;&#9;ADDED from F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:130:13-69&#10;&#9;android:name&#10;&#9;&#9;ADDED from F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:129:13-63&#10;activity#com.etang.mt_launcher.launcher.settings.uirefresh.UireFreshActivity&#10;ADDED from F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:131:9-133:72&#10;&#9;android:theme&#10;&#9;&#9;ADDED from F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:133:13-69&#10;&#9;android:name" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/app/build/outputs/logs/manifest-merger-debug-report.txt" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml: &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.recyclerview:recyclerview:1.3.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.transition:transition:1.2.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.viewpager2:viewpager2:1.0.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.navigation:navigation-fragment:2.6.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.fragment:fragment-ktx:1.6.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.activity:activity-ktx:1.6.1@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.lifecycle:lifecycle-runtime-ktx:2.6.1@aar&quot; level=&quot;project&quot; /&gt;" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.androidTest.iml" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value="app\build\intermediates\manifest_merge_blame_file\debug\processDebugMainManifest\manifest-merger-blame-debug-report.txt: 62--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:54:9-45&#10;63        android:label=&quot;@string/app_name&quot;&#10;63--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:55:9-41&#10;64        android:screenOrientation=&quot;portrait&quot;&#10;64--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:57:9-45&#10;65        android:supportsRtl=&quot;true&quot;&#10;65--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:58:9-35&#10;66        android:testOnly=&quot;true&quot;&#10;66--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:59:9-33&#10;67        android:theme=&quot;@style/AppTheme&quot;&#10;67--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:60:9-40&#10;68        android:usesCleartextTraffic=&quot;true&quot; &gt;" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/app/build/intermediates/manifest_merge_blame_file/debug/processDebugMainManifest/manifest-merger-blame-debug-report.txt" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value=".idea\modules\app\NT-Eink-Launcher.app.androidTest.iml: &lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: com.github.bumptech.glide:gifdecoder:4.12.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.fragment:fragment:1.6.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.activity:activity:1.6.1@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.core:core:1.9.0@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.lifecycle:lifecycle-runtime:2.6.1@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.versionedparcelable:versionedparcelable:1.1.1@aar&quot; level=&quot;project&quot; /&gt;&#10;&lt;orderEntry type=&quot;library&quot; scope=&quot;TEST&quot; name=&quot;Gradle: androidx.lifecycle:lifecycle-viewmodel:2.6.1@aar&quot; level=&quot;project&quot; /&gt;" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/.idea/modules/app/NT-Eink-Launcher.app.androidTest.iml" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value="app\build\intermediates\manifest_merge_blame_file\debug\processDebugMainManifest\manifest-merger-blame-debug-report.txt: 118--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:111:27-73&#10;119            &lt;/intent-filter&gt;&#10;120        &lt;/activity&gt;&#10;121&#10;122        &lt;receiver&#10;122--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:115:9-126:20&#10;123            android:name=&quot;com.etang.mt_launcher.tool.server.AppInstallServer&quot;&#10;123--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:116:13-57&#10;124            android:exported=&quot;true&quot; &gt;&#10;124--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:117:13-36&#10;125            &lt;intent-filter&gt;&#10;125--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:118:13-125:29&#10;126                &lt;action android:name=&quot;android.intent.action.PACKAGE_ADDED&quot; /&gt;&#10;126--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:119:17-78" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/app/build/intermediates/manifest_merge_blame_file/debug/processDebugMainManifest/manifest-merger-blame-debug-report.txt" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value="app\build\outputs\logs\manifest-merger-release-report.txt: ADDED from F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:80:9-82:39&#10;&#9;android:exported&#10;&#9;&#9;ADDED from F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:82:13-36&#10;&#9;android:name&#10;&#9;&#9;ADDED from F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:81:13-80&#10;activity#com.etang.mt_launcher.launcher.settings.locker.MTLocker&#10;ADDED from F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:83:9-86:69&#10;&#9;android:exported&#10;&#9;&#9;ADDED from F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:85:13-36&#10;&#9;android:theme&#10;&#9;&#9;ADDED from F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:86:13-66&#10;&#9;android:name" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/app/build/outputs/logs/manifest-merger-release-report.txt" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value="app\build\intermediates\incremental\lintVitalAnalyzeRelease\release.xml: &lt;variant&#10;    name=&quot;release&quot;&#10;    package=&quot;com.etang.mt_launcher&quot;&#10;    minSdkVersion=&quot;15&quot;&#10;    targetSdkVersion=&quot;33&quot;&#10;    shrinking=&quot;true&quot;&#10;    mergedManifest=&quot;build\intermediates\merged_manifest\release\processReleaseMainManifest\AndroidManifest.xml&quot;&#10;    proguardFiles=&quot;build\intermediates\default_proguard_files\global\proguard-android.txt-8.6.1;proguard-rules.pro&quot;&#10;    partialResultsDir=&quot;build\intermediates\lint_vital_partial_results\release\lintVitalAnalyzeRelease\out&quot;&#10;    desugaredMethodsFiles=&quot;C:\Users\10976\.gradle\caches\transforms-4\d172039f419dc472834cecac39b8a87c\transformed\D8BackportedDesugaredMethods.txt&quot;&gt;&#10;  &lt;buildFeatures&#10;      namespacing=&quot;REQUIRED&quot;/&gt;&#10;  &lt;sourceProviders&gt;&#10;    &lt;sourceProvider&#10;        manifests=&quot;src\main\AndroidManifest.xml&quot;&#10;        javaDirectories=&quot;src\main\java;src\release\java;src\main\kotlin;src\release\kotlin&quot;&#10;        resDirectories=&quot;src\main\res;src\release\res&quot;&#10;        assetsDirectories=&quot;src\main\assets;src\release\assets&quot;/&gt;&#10;  &lt;/sourceProviders&gt;&#10;  &lt;testSourceProviders&gt;&#10;  &lt;/testSourceProviders&gt;&#10;  &lt;testFixturesSourceProviders&gt;&#10;  &lt;/testFixturesSourceProviders&gt;" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/app/build/intermediates/incremental/lintVitalAnalyzeRelease/release.xml" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value="app\build\intermediates\manifest_merge_blame_file\debug\processDebugMainManifest\manifest-merger-blame-debug-report.txt: 114--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:107:25-66&#10;115&#10;116                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;116--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:109:17-77&#10;116--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:109:27-74&#10;117                &lt;category android:name=&quot;android.intent.category.HOME&quot; /&gt;&#10;117--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:110:17-73&#10;117--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:110:27-70&#10;118                &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;&#10;118--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:111:17-76" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/app/build/intermediates/manifest_merge_blame_file/debug/processDebugMainManifest/manifest-merger-blame-debug-report.txt" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value="gradlew.bat: echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%&#10;echo.&#10;echo Please set the JAVA_HOME variable in your environment to match the&#10;echo location of your Java installation.&#10;goto fail&#10;:init&#10;@rem Get command-line arguments, handling Windows variants&#10;if not &quot;%OS%&quot; == &quot;Windows_NT&quot; goto win9xME_args&#10;:win9xME_args&#10;@rem Slurp the command line arguments.&#10;set CMD_LINE_ARGS=&#10;set _SKIP=2&#10;:win9xME_args_slurp&#10;if &quot;x%~1&quot; == &quot;x&quot; goto execute&#10;set CMD_LINE_ARGS=%*&#10;:execute&#10;@rem Setup the command line&#10;set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar&#10;@rem Execute Gradle&#10;&quot;%JAVA_EXE%&quot; %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% &quot;-Dorg.gradle.appname=%APP_BASE_NAME%&quot; -classpath &quot;%CLASSPATH%&quot; org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%&#10;:end&#10;@rem End local scope for the variables with windows NT shell&#10;if &quot;%ERRORLEVEL%&quot;==&quot;0&quot; goto mainEnd&#10;:fail" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/gradlew.bat" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                    <KnowledgeReference>
                      <option name="chunk" value="app\build\intermediates\manifest_merge_blame_file\release\processReleaseMainManifest\manifest-merger-blame-release-report.txt: 65--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:59:9-45&#10;66        android:label=&quot;@string/app_name&quot;&#10;66--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:60:9-41&#10;67        android:screenOrientation=&quot;portrait&quot;&#10;67--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:62:9-45&#10;68        android:supportsRtl=&quot;true&quot;&#10;68--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:63:9-35&#10;69        android:testOnly=&quot;false&quot;&#10;69--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:64:9-33&#10;70        android:theme=&quot;@style/AppTheme&quot;&#10;70--&gt;F:\Android Studio Data\projects\MT-Launcher\app\src\main\AndroidManifest.xml:65:9-40&#10;71        android:usesCleartextTraffic=&quot;true&quot; &gt;" />
                      <option name="metadata">
                        <KnowledgeReferenceMetadata>
                          <option name="source" value="$PROJECT_DIR$/app/build/intermediates/manifest_merge_blame_file/release/processReleaseMainManifest/manifest-merger-blame-release-report.txt" />
                        </KnowledgeReferenceMetadata>
                      </option>
                    </KnowledgeReference>
                  </list>
                </option>
                <option name="command" value="normal" />
                <option name="conversationId" value="01956fde0f9b7f9582117334c3cede59" />
                <option name="historyDocumentMap">
                  <map>
                    <entry key="file:///F:/Android%20Studio%20Data/projects/MT-Launcher/app/src/main/res/layout/activity_setting_new.xml" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;#FFFFFF&quot;&#10;    android:orientation=&quot;vertical&quot;&gt;&#10;&#10;&#10;    &lt;include&#10;        layout=&quot;@layout/layout_in_back&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&gt;&lt;/include&gt;&#10;&#10;&#10;    &lt;ScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;5dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:id=&quot;@+id/lv_name_setting&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:layout_margin=&quot;5dp&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:background=&quot;@drawable/shaper_yuanjiao_lins_show&quot;&#10;&#10;                    android:gravity=&quot;center_horizontal|center_vertical&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;5dp&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:layout_width=&quot;40dp&quot;&#10;                        android:layout_height=&quot;50dp&quot;&#10;                        android:src=&quot;@drawable/ic_setting_inforeback&quot;&gt;&#10;&#10;                    &lt;/ImageView&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;match_parent&quot;&#10;                        android:layout_marginTop=&quot;5dp&quot;&#10;                        android:layout_marginBottom=&quot;5dp&quot;&#10;                        android:gravity=&quot;center_vertical|center_horizontal&quot;&#10;                        android:text=&quot;@string/setting_toptext&quot;&#10;                        android:textColor=&quot;#000&quot;&#10;                        android:textSize=&quot;13dp&quot;&gt;&lt;/TextView&gt;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:id=&quot;@+id/lv_applist_setting&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:layout_margin=&quot;5dp&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:background=&quot;@drawable/shaper_yuanjiao_lins_show&quot;&#10;&#10;                    android:gravity=&quot;center_horizontal|center_vertical&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;5dp&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:layout_width=&quot;40dp&quot;&#10;                        android:layout_height=&quot;50dp&quot;&#10;                        android:src=&quot;@drawable/ic_setting_applist&quot;&gt;&#10;&#10;                    &lt;/ImageView&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;match_parent&quot;&#10;                        android:layout_marginTop=&quot;5dp&quot;&#10;                        android:layout_marginBottom=&quot;5dp&quot;&#10;                        android:gravity=&quot;center_vertical|center_horizontal&quot;&#10;                        android:text=&quot;@string/setting_desktoplist&quot;&#10;                        android:textColor=&quot;#000&quot;&#10;                        android:textSize=&quot;13dp&quot;&gt;&lt;/TextView&gt;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:id=&quot;@+id/lv_desktop_setting&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:layout_margin=&quot;5dp&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:background=&quot;@drawable/shaper_yuanjiao_lins_show&quot;&#10;&#10;                    android:gravity=&quot;center_horizontal|center_vertical&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;5dp&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:layout_width=&quot;40dp&quot;&#10;                        android:layout_height=&quot;50dp&quot;&#10;                        android:src=&quot;@drawable/ic_setting_desktopback&quot;&gt;&#10;&#10;                    &lt;/ImageView&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;match_parent&quot;&#10;                        android:layout_marginTop=&quot;5dp&quot;&#10;                        android:layout_marginBottom=&quot;5dp&quot;&#10;                        android:gravity=&quot;center_vertical|center_horizontal&quot;&#10;                        android:text=&quot;@string/setting_desktopimage&quot;&#10;                        android:textColor=&quot;#000&quot;&#10;                        android:textSize=&quot;13dp&quot;&gt;&lt;/TextView&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/LinearLayout&gt;&#10;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:id=&quot;@+id/lv_textsize_setting&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:layout_margin=&quot;5dp&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:background=&quot;@drawable/shaper_yuanjiao_lins_show&quot;&#10;                    android:gravity=&quot;center_horizontal|center_vertical&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;5dp&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:layout_width=&quot;40dp&quot;&#10;                        android:layout_height=&quot;50dp&quot;&#10;                        android:src=&quot;@drawable/ic_setting_textsize&quot;&gt;&#10;&#10;                    &lt;/ImageView&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;match_parent&quot;&#10;                        android:layout_marginTop=&quot;5dp&quot;&#10;                        android:layout_marginBottom=&quot;5dp&quot;&#10;                        android:gravity=&quot;center_vertical|center_horizontal&quot;&#10;                        android:text=&quot;@string/steeing_textsize&quot;&#10;                        android:textColor=&quot;#000&quot;&#10;                        android:textSize=&quot;13dp&quot;&gt;&lt;/TextView&gt;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:id=&quot;@+id/lv_inforeback_activity&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:layout_margin=&quot;5dp&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:background=&quot;@drawable/shaper_desk_top_show&quot;&#10;                    android:gravity=&quot;center_horizontal|center_vertical&quot;&#10;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;5dp&quot;&#10;                    android:visibility=&quot;gone&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:layout_width=&quot;40dp&quot;&#10;                        android:layout_height=&quot;50dp&quot;&#10;                        android:src=&quot;@drawable/ic_setting_inforeback&quot;&gt;&#10;&#10;                    &lt;/ImageView&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;match_parent&quot;&#10;                        android:layout_marginTop=&quot;5dp&quot;&#10;                        android:layout_marginBottom=&quot;5dp&quot;&#10;                        android:gravity=&quot;center_vertical|center_horizontal&quot;&#10;                        android:text=&quot;@string/setting_yijian&quot;&#10;                        android:textColor=&quot;#000&quot;&#10;                        android:textSize=&quot;13dp&quot;&gt;&lt;/TextView&gt;&#10;                &lt;/LinearLayout&gt;&#10;&#10;&#10;                &lt;LinearLayout&#10;                    android:id=&quot;@+id/lv_hindapp_setting&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:layout_margin=&quot;5dp&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:background=&quot;@drawable/shaper_yuanjiao_lins_show&quot;&#10;                    android:gravity=&quot;center_horizontal|center_vertical&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;5dp&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:layout_width=&quot;40dp&quot;&#10;                        android:layout_height=&quot;50dp&quot;&#10;                        android:src=&quot;@drawable/ic_setting_hindapp&quot;&gt;&#10;&#10;                    &lt;/ImageView&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;match_parent&quot;&#10;                        android:layout_marginTop=&quot;5dp&quot;&#10;                        android:layout_marginBottom=&quot;5dp&quot;&#10;                        android:gravity=&quot;center_vertical|center_horizontal&quot;&#10;                        android:text=&quot;@string/setting_hindapp&quot;&#10;                        android:textColor=&quot;#000&quot;&#10;                        android:textSize=&quot;13dp&quot;&gt;&lt;/TextView&gt;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:id=&quot;@+id/lv_restart_setting&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:layout_margin=&quot;5dp&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:background=&quot;@drawable/shaper_yuanjiao_lins_show&quot;&#10;&#10;                    android:gravity=&quot;center_horizontal|center_vertical&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;5dp&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:layout_width=&quot;40dp&quot;&#10;                        android:layout_height=&quot;50dp&quot;&#10;                        android:src=&quot;@drawable/ic_setting_restart&quot;&gt;&#10;&#10;                    &lt;/ImageView&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;match_parent&quot;&#10;                        android:layout_marginTop=&quot;5dp&quot;&#10;                        android:layout_marginBottom=&quot;5dp&quot;&#10;                        android:gravity=&quot;center_vertical|center_horizontal&quot;&#10;                        android:text=&quot;@string/setting_restartlauncher&quot;&#10;                        android:textColor=&quot;#000&quot;&#10;                        android:textSize=&quot;13dp&quot;&gt;&lt;/TextView&gt;&#10;                &lt;/LinearLayout&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:visibility=&quot;gone&quot;&gt;&lt;/LinearLayout&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;match_parent&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:id=&quot;@+id/lv_uninstall_setting&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:layout_margin=&quot;5dp&quot;&#10;                    android:layout_weight=&quot;2&quot;&#10;                    android:background=&quot;@drawable/shaper_yuanjiao_lins_show&quot;&#10;                    android:gravity=&quot;center_horizontal|center_vertical&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;5dp&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:layout_width=&quot;40dp&quot;&#10;                        android:layout_height=&quot;50dp&quot;&#10;                        android:src=&quot;@drawable/ic_setting_uninstall&quot;&gt;&lt;/ImageView&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;match_parent&quot;&#10;                        android:layout_marginTop=&quot;5dp&quot;&#10;                        android:layout_marginBottom=&quot;5dp&quot;&#10;                        android:gravity=&quot;center_vertical|center_horizontal&quot;&#10;                        android:text=&quot;@string/setting_uninstalllacunher&quot;&#10;                        android:textColor=&quot;#000&quot;&#10;                        android:textSize=&quot;13dp&quot;&gt;&lt;/TextView&gt;&#10;                &lt;/LinearLayout&gt;&#10;&#10;                &lt;LinearLayout&#10;                    android:id=&quot;@+id/lv_about_activity&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;match_parent&quot;&#10;                    android:layout_margin=&quot;5dp&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:background=&quot;@drawable/shaper_yuanjiao_lins_show&quot;&#10;                    android:gravity=&quot;center_horizontal|center_vertical&quot;&#10;                    android:orientation=&quot;vertical&quot;&#10;                    android:padding=&quot;5dp&quot;&gt;&#10;&#10;                    &lt;ImageView&#10;                        android:layout_width=&quot;50dp&quot;&#10;                        android:layout_height=&quot;50dp&quot;&#10;                        android:src=&quot;@drawable/ic_setting_about&quot;&gt;&#10;&#10;                    &lt;/ImageView&gt;&#10;&#10;                    &lt;TextView&#10;                        android:layout_width=&quot;wrap_content&quot;&#10;                        android:layout_height=&quot;match_parent&quot;&#10;                        android:layout_marginTop=&quot;5dp&quot;&#10;                        android:layout_marginBottom=&quot;5dp&quot;&#10;                        android:gravity=&quot;center_vertical|center_horizontal&quot;&#10;                        android:text=&quot;@string/setting_about&quot;&#10;                        android:textColor=&quot;#000&quot;&#10;                        android:textSize=&quot;13dp&quot;&gt;&lt;/TextView&gt;&#10;                &lt;/LinearLayout&gt;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_margin=&quot;5dp&quot;&#10;                android:background=&quot;@drawable/shaper_yuanjiao_lins_show&quot;&#10;                android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                &lt;CheckBox&#10;                    android:id=&quot;@+id/cb_full_windows_show&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;全屏显示桌面&quot;&#10;                    android:textColor=&quot;#000&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_margin=&quot;5dp&quot;&#10;                android:background=&quot;@drawable/shaper_yuanjiao_lins_show&quot;&#10;                android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                &lt;CheckBox&#10;                    android:id=&quot;@+id/cb_hind_setting_ico&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;@string/setting_checkbox_hindbar&quot;&#10;                    android:textColor=&quot;#000&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/textView7&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginLeft=&quot;10dp&quot;&#10;                    android:layout_marginRight=&quot;10dp&quot;&#10;                    android:layout_marginBottom=&quot;10dp&quot;&#10;                    android:text=&quot;@string/info_for_hindbottom&quot;&#10;                    android:textColor=&quot;#000&quot;&#10;                    android:textSize=&quot;13sp&quot; /&gt;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_margin=&quot;5dp&quot;&#10;                android:background=&quot;@drawable/shaper_yuanjiao_lins_show&quot;&#10;                android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                &lt;CheckBox&#10;                    android:id=&quot;@+id/cb_setting_offlinemode&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;@string/setting_offlinemode&quot;&#10;                    android:textColor=&quot;#000&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginLeft=&quot;10dp&quot;&#10;                    android:layout_marginRight=&quot;10dp&quot;&#10;                    android:layout_marginBottom=&quot;10dp&quot;&#10;                    android:text=&quot;@string/info_for_offlinemode&quot;&#10;                    android:textColor=&quot;#000&quot;&#10;                    android:textSize=&quot;13sp&quot; /&gt;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;CheckBox&#10;                android:id=&quot;@+id/cb_setting_oldmanmode&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/setting_oldmanmode&quot;&#10;                android:textColor=&quot;#000&quot;&#10;                android:visibility=&quot;gone&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;@string/info_for_oldmanmode&quot;&#10;                android:textColor=&quot;#000&quot;&#10;                android:textSize=&quot;13sp&quot;&#10;                android:visibility=&quot;gone&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:gravity=&quot;center_horizontal|center_vertical|center&quot;&#10;                android:text=&quot;@string/need_reboot&quot;&#10;                android:textColor=&quot;#000&quot;&#10;                android:textSize=&quot;13sp&quot; /&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/ScrollView&gt;&#10;&lt;/LinearLayout&gt;" />
                  </map>
                </option>
                <option name="messageId" value="01956fde0f9b78969118721ff8d07f7b" />
                <option name="question" value="介绍一下当前工程是做什么的" />
                <option name="rating" value="UNRATED" />
                <option name="referenceBeans">
                  <list />
                </option>
                <option name="status" value="SUCCESS" />
                <option name="variables">
                  <list />
                </option>
              </Turn>
              <Turn>
                <option name="agent" value="" />
                <option name="answer" value="&lt;gsrmp&gt;&#10;好的，用户希望优化zxgrergb_hvggrmt_mvd.cno布局文件。首先，我需要分析现有布局的结构和可能的不足。根据用户提供的代码，当前布局使用OrmvziOzblfg嵌套多个IvozgrevOzblfg，可能存在效率问题。此外，样式和主题应用可能不够统一，比如文本颜色和大小可能硬编码，不利于维护。&#10;&#10;接下来，考虑使用更高效的布局容器，比如用XlmhgizrmgOzblfg替代OrmvziOzblfg和IvozgrevOzblfg嵌套，减少视图层级，提升性能。同时，检查是否有重复的样式属性，将其抽取到hgbov资源中，确保一致性和可维护性。&#10;&#10;然后，优化视图RW命名，使其符合规范，例如使用前缀区分控件类型。对于图标，建议使用矢量图（EvxgliWizdzyov）替代位图，适配不同分辨率并减小ZKP体积。考虑添加内容描述（xlmgvmgWvhxirkgrlm）提升无障碍访问。&#10;&#10;另外，评估是否可以使用主题属性（如?zggi/xloliKirnzib）代替硬编码颜色，增强主题适配性。对于动态显示的内容，如版本号，确保GvcgErvd预留足够的空间，避免文本截断。&#10;&#10;最后，考虑交互优化，比如增加点击反馈效果，使用zmwilrw:ulivtilfmw为按钮添加涟漪效果。可能引入ErvdHgfy延迟加载未立即显示的部分，提升初始加载速度。同时，确保布局在不同屏幕尺寸和方向下表现良好，可能需要添加尺寸限定符或使用约束链。&#10;&lt;/gsrmp&gt;&#10;&#10;&#10;以下是针对zxgrergb_hvggrmt_mvd.cno的优化建议和实现方案：&#10;&#10;8. **布局结构优化**：&#10;```cno&#10;&lt;!-- 使用XlmhgizrmgOzblfg替代多层嵌套 --&gt;&#10;&lt;zmwilrwc.xlmhgizrmgozblfg.drwtvg.XlmhgizrmgOzblfg&#10;    cnomh:zmwilrw=&quot;sggk://hxsvnzh.zmwilrw.xln/zkp/ivh/zmwilrw&quot;&#10;    cnomh:zkk=&quot;sggk://hxsvnzh.zmwilrw.xln/zkp/ivh-zfgl&quot;&#10;    cnomh:glloh=&quot;sggk://hxsvnzh.zmwilrw.xln/glloh&quot;&#10;    zmwilrw:ozblfg_drwgs=&quot;nzgxs_kzivmg&quot;&#10;    zmwilrw:ozblfg_svrtsg=&quot;nzgxs_kzivmg&quot;&#10;    zmwilrw:yzxptilfmw=&quot;@xloli/dsrgv&quot;&gt;&#10;&#10;    &lt;!-- 使用Nzgvirzo Xlnklmvmgh增强视觉效果 --&gt;&#10;    &lt;xln.tlltov.zmwilrw.nzgvirzo.xziw.NzgvirzoXziwErvd&#10;        zmwilrw:rw=&quot;@+rw/xziw_hbhgvn_hvggrmth&quot;&#10;        zmwilrw:ozblfg_drwgs=&quot;9wk&quot;&#10;        zmwilrw:ozblfg_svrtsg=&quot;dizk_xlmgvmg&quot;&#10;        zmwilrw:ozblfg_nzitrm=&quot;1wk&quot;&#10;        zkk:ozblfg_xlmhgizrmgVmw_glVmwLu=&quot;kzivmg&quot;&#10;        zkk:ozblfg_xlmhgizrmgHgzig_glHgzigLu=&quot;kzivmg&quot;&#10;        zkk:ozblfg_xlmhgizrmgGlk_glGlkLu=&quot;kzivmg&quot;&#10;        zkk:xziwVovezgrlm=&quot;7wk&quot;&#10;        zkk:xziwXlimviIzwrfh=&quot;1wk&quot;&gt;&#10;&#10;        &lt;OrmvziOzblfg&#10;            zmwilrw:ozblfg_drwgs=&quot;nzgxs_kzivmg&quot;&#10;            zmwilrw:ozblfg_svrtsg=&quot;dizk_xlmgvmg&quot;&#10;            zmwilrw:lirvmgzgrlm=&quot;evigrxzo&quot;&#10;            zmwilrw:kzwwrmt=&quot;83wk&quot;&gt;&#10;&#10;            &lt;!-- 标题使用样式 --&gt;&#10;            &lt;GvcgErvd&#10;                zmwilrw:rw=&quot;@+rw/ge_hbhgvn_grgov&quot;&#10;                hgbov=&quot;@hgbov/HvggrmtTilfkGrgov&quot;&#10;                zmwilrw:gvcg=&quot;@hgirmt/hbhgvn_hvggrmth&quot;/&gt;&#10;&#10;            &lt;!-- 统一设置项样式 --&gt;&#10;            &lt;OrmvziOzblfg&#10;                hgbov=&quot;@hgbov/HvggrmtRgvnOzblfg&quot;&#10;                zmwilrw:lmXorxp=&quot;lmXorxp&quot;&gt;&#10;&#10;                &lt;RnztvErvd&#10;                    hgbov=&quot;@hgbov/HvggrmtRgvnRxlm&quot;&#10;                    zmwilrw:hix=&quot;@wizdzyov/rx_fkwzgv&quot;/&gt;&#10;&#10;                &lt;GvcgErvd&#10;                    hgbov=&quot;@hgbov/HvggrmtRgvnGvcg&quot;&#10;                    zmwilrw:gvcg=&quot;@hgirmt/xsvxp_fkwzgv&quot;/&gt;&#10;            &lt;/OrmvziOzblfg&gt;&#10;&#10;            &lt;!-- 更多设置项... --&gt;&#10;        &lt;/OrmvziOzblfg&gt;&#10;    &lt;/xln.tlltov.zmwilrw.nzgvirzo.xziw.NzgvirzoXziwErvd&gt;&#10;&#10;&lt;/zmwilrwc.xlmhgizrmgozblfg.drwtvg.XlmhgizrmgOzblfg&gt;&#10;```&#10;&#10;7. **样式优化（ezofvh/hgbovh.cno）**：&#10;```cno&#10;&lt;!-- 统一文本样式 --&gt;&#10;&lt;hgbov mznv=&quot;HvggrmtTilfkGrgov&quot; kzivmg=&quot;GvcgZkkvzizmxv.NzgvirzoXlnklmvmgh.Hfygrgov8&quot;&gt;&#10;    &lt;rgvn mznv=&quot;zmwilrw:gvcgHrav&quot;&gt;81hk&lt;/rgvn&gt;&#10;    &lt;rgvn mznv=&quot;zmwilrw:gvcgXloli&quot;&gt;?zggi/xloliKirnzib&lt;/rgvn&gt;&#10;    &lt;rgvn mznv=&quot;zmwilrw:ozblfg_nzitrmYlggln&quot;&gt;1wk&lt;/rgvn&gt;&#10;&lt;/hgbov&gt;&#10;&#10;&lt;!-- 统一设置项布局样式 --&gt;&#10;&lt;hgbov mznv=&quot;HvggrmtRgvnOzblfg&quot;&gt;&#10;    &lt;rgvn mznv=&quot;zmwilrw:ozblfg_drwgs&quot;&gt;nzgxs_kzivmg&lt;/rgvn&gt;&#10;    &lt;rgvn mznv=&quot;zmwilrw:ozblfg_svrtsg&quot;&gt;dizk_xlmgvmg&lt;/rgvn&gt;&#10;    &lt;rgvn mznv=&quot;zmwilrw:ozblfg_nzitrmGlk&quot;&gt;87wk&lt;/rgvn&gt;&#10;    &lt;rgvn mznv=&quot;zmwilrw:lirvmgzgrlm&quot;&gt;sliralmgzo&lt;/rgvn&gt;&#10;    &lt;rgvn mznv=&quot;zmwilrw:tizergb&quot;&gt;xvmgvi_evigrxzo&lt;/rgvn&gt;&#10;&lt;/hgbov&gt;&#10;&#10;&lt;!-- 图标样式 --&gt;&#10;&lt;hgbov mznv=&quot;HvggrmtRgvnRxlm&quot;&gt;&#10;    &lt;rgvn mznv=&quot;zmwilrw:ozblfg_drwgs&quot;&gt;75wk&lt;/rgvn&gt;&#10;    &lt;rgvn mznv=&quot;zmwilrw:ozblfg_svrtsg&quot;&gt;75wk&lt;/rgvn&gt;&#10;    &lt;rgvn mznv=&quot;zmwilrw:grmg&quot;&gt;?zggi/xloliLmHfiuzxv&lt;/rgvn&gt;&#10;    &lt;rgvn mznv=&quot;zmwilrw:ozblfg_nzitrmVmw&quot;&gt;83wk&lt;/rgvn&gt;&#10;&lt;/hgbov&gt;&#10;&#10;&lt;!-- 文本样式 --&gt;&#10;&lt;hgbov mznv=&quot;HvggrmtRgvnGvcg&quot; kzivmg=&quot;GvcgZkkvzizmxv.NzgvirzoXlnklmvmgh.Ylwb8&quot;&gt;&#10;    &lt;rgvn mznv=&quot;zmwilrw:gvcgXloli&quot;&gt;?zggi/xloliLmHfiuzxv&lt;/rgvn&gt;&#10;    &lt;rgvn mznv=&quot;zmwilrw:gvcgHrav&quot;&gt;83hk&lt;/rgvn&gt;&#10;&lt;/hgbov&gt;&#10;```&#10;&#10;优化亮点：&#10;8. 使用XlmhgizrmgOzblfg减少布局层级，提升渲染性能&#10;7. 引入NzgvirzoXziwErvd增强视觉层次感&#10;6. 抽取公共样式到hgbovh.cno，方便统一维护&#10;5. 使用Nzgvirzo Wvhrtm组件和主题属性（?zggi）&#10;4. 添加合理的点击反馈效果&#10;3. 规范视图RW命名（ge_前缀表示GvcgErvd）&#10;2. 支持深色主题自动适配（通过主题属性）&#10;1. 使用矢量图标资源（建议替换为EvxgliWizdzyov）&#10;0. 添加合理的边距和间距系统&#10;89. 支持无障碍访问（可添加xlmgvmgWvhxirkgrlm）&#10;&#10;建议后续改进：&#10;8. 对动态内容（如版本号）使用WzgzYrmwrmt&#10;7. 添加IGO布局支持&#10;6. 实现配置变更时的布局优化&#10;5. 添加过渡动画&#10;4. 使用HszkvzyovRnztvErvd实现圆角图标&#10;3. 考虑折叠屏适配（使用HorwrmtKzmvOzblfg）" />
                <option name="chatResource" value="user" />
                <option name="codeReferences">
                  <list />
                </option>
                <option name="command" value="normal" />
                <option name="conversationId" value="01956fdf952a758c89b7613372c35305" />
                <option name="historyDocumentMap">
                  <map>
                    <entry key="file:///F:/Android%20Studio%20Data/projects/MT-Launcher/app/src/main/java/com/etang/mt_launcher/launcher/MainActivity.java" value="package com.etang.mt_launcher.launcher;&#10;&#10;import android.Manifest;&#10;import android.annotation.SuppressLint;&#10;import android.app.Activity;&#10;import android.app.Notification;&#10;import android.app.NotificationChannel;&#10;import android.app.NotificationManager;&#10;import android.app.PendingIntent;&#10;import android.app.WallpaperManager;&#10;import android.content.BroadcastReceiver;&#10;import android.content.Context;&#10;import android.content.Intent;&#10;import android.content.IntentFilter;&#10;import android.content.SharedPreferences;&#10;import android.content.pm.PackageManager;&#10;import android.content.res.Configuration;&#10;import android.content.res.Resources;&#10;import android.database.Cursor;&#10;import android.database.sqlite.SQLiteDatabase;&#10;import android.graphics.Bitmap;&#10;import android.graphics.BitmapFactory;&#10;import android.graphics.Canvas;&#10;import android.graphics.Color;&#10;import android.graphics.Paint;&#10;import android.graphics.drawable.BitmapDrawable;&#10;import android.os.BatteryManager;&#10;import android.os.Build;&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.os.Message;&#10;import android.util.DisplayMetrics;&#10;import android.util.Log;&#10;import android.view.KeyEvent;&#10;import android.view.View;&#10;import android.view.View.OnClickListener;&#10;import android.view.View.OnLongClickListener;&#10;import android.view.Window;&#10;import android.view.WindowManager;&#10;import android.widget.AdapterView;&#10;import android.widget.CompoundButton;&#10;import android.widget.CompoundButton.OnCheckedChangeListener;&#10;import android.widget.GridView;&#10;import android.widget.ImageView;&#10;import android.widget.LinearLayout;&#10;import android.widget.TextView;&#10;import android.widget.ToggleButton;&#10;&#10;import androidx.annotation.RequiresApi;&#10;import androidx.core.app.ActivityCompat;&#10;import androidx.core.app.NotificationCompat;&#10;&#10;import com.etang.mt_launcher.R;&#10;import com.etang.mt_launcher.launcher.settings.SettingActivity;&#10;import com.etang.mt_launcher.launcher.settings.about.AboutActivity;&#10;import com.etang.mt_launcher.launcher.settings.locker.MTLocker;&#10;import com.etang.mt_launcher.launcher.settings.uirefresh.UireFreshActivity;&#10;import com.etang.mt_launcher.launcher.settings.uselogs.AppUseLogsActivity;&#10;import com.etang.mt_launcher.launcher.settings.weather.WeatherActivity;&#10;import com.etang.mt_launcher.launcher.welecome.WelecomeActivity;&#10;import com.etang.mt_launcher.tool.beans.Bean_AppInfo;&#10;import com.etang.mt_launcher.tool.getapps.DeskTopGridViewBaseAdapter;&#10;import com.etang.mt_launcher.tool.getapps.GetApps;&#10;import com.etang.mt_launcher.tool.mtcore.MTCore;&#10;import com.etang.mt_launcher.tool.mtcore.dialog.UnInstallDialog;&#10;import com.etang.mt_launcher.tool.mtcore.savearrayutil.SaveArrayListUtil;&#10;import com.etang.mt_launcher.tool.server.AppInstallServer;&#10;import com.etang.mt_launcher.tool.sql.MyDataBaseHelper;&#10;&#10;import org.json.JSONArray;&#10;import org.json.JSONObject;&#10;&#10;import java.text.SimpleDateFormat;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Locale;&#10;&#10;// _   _   _   _       ___       ___  ___   _____   _   _____       ___   __   _   _____&#10;//| | | | | | | |     /   |     /   |/   | | ____| | | |_   _|     /   | |  \ | | /  ___|&#10;//| |_| | | | | |    / /| |    / /|   /| | | |__   | |   | |      / /| | |   \| | | |&#10;//|  _  | | | | |   / / | |   / / |__/ | | |  __|  | |   | |     / / | | | |\   | | |  _&#10;//| | | | | |_| |  / /  | |  / /       | | | |___  | |   | |    / /  | | | | \  | | |_| |&#10;//|_| |_| \_____/ /_/   |_| /_/        |_| |_____| |_|   |_|   /_/   |_| |_|  \_| \_____/&#10;&#10;/**&#10; * @Package: com.etang.nt_launcher.launcher&#10; * @ClassName: MainActivity&#10; * @Description: Main活动，主界面，桌面界面&#10; * @CreateDate: 2021/3/19 8:18&#10; * @UpdateDate: 2021/3/19 8:18&#10; * &lt;p&gt;&#10; * &lt;p&gt;&#10; * 于2021年12月11日 17点43分&#10; * 不会真的有人尝试看懂风滚草方式写出来的代码吧，不会吧不会吧。&#10; * 哦原来是我自己尝试看懂啊。&#10; * 坏了，看不懂了&#10; * 于2022年3月7日 09点27分&#10; * 别改了，好家伙，完全看不懂了，找时间重构吧&#10; * 于2022年4月6日 17点07分&#10; * 完了，摆烂，开始摆烂，这些代码就这样吧&#10; * 于2022年8月31日 21点05分&#10; * 摆烂！！！！！！！！！！！！&#10; * 2022年9月9日 18点08分&#10; * remake&#10; * 2022年9月12日 12点28分&#10; * 想办法重置吧，lite版也要重置了&#10; */&#10;public class MainActivity extends Activity implements OnClickListener {&#10;    private BroadcastReceiver batteryLevelRcvr;&#10;    private IntentFilter batteryLevelFilter;&#10;    private Handler handler;&#10;    private Runnable runnable;&#10;    private static MyDataBaseHelper dbHelper_name_sql;&#10;    private static SQLiteDatabase db;&#10;    public static TextView tv_user_id, tv_time_hour, tv_time_min, tv_main_batterystate, tv_city, tv_temp_state, tv_last_updatetime, tv_main_nowdate;&#10;    public static ImageView iv_setting_button, iv_setting_yinliang, iv_setting_refresh, iv_clean_button, iv_index_back;&#10;    public static ToggleButton tg_apps_state;&#10;    public static LinearLayout line_wather, line_bottom;&#10;    public static String string_app_info = &quot;&quot;;&#10;    public static GridView mListView;&#10;    public static List&lt;Bean_AppInfo&gt; beanAppInfos = new ArrayList&lt;Bean_AppInfo&gt;();&#10;    public static boolean offline_mode = false;&#10;    private AppInstallServer appinstallserver;&#10;    private SharedPreferences sharedPreferences;&#10;    private static String TAG = &quot;MainActivity&quot;;&#10;    //引入MTCore&#10;    private MTCore mtCore = new MTCore();&#10;&#10;    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR1)&#10;    @Override&#10;    protected void onCreate(final Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        //全屏&#10;        check_full_window();&#10;        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);&#10;        requestWindowFeature(Window.FEATURE_NO_TITLE);// 无Title&#10;        setContentView(R.layout.activity_main);&#10;        //绑定各类&#10;        initView();// 绑定控件&#10;        check_first_user();//检查是不是第一次使用&#10;        MTCore.check_save_permission(MainActivity.this);//检查存取权限&#10;        new_time_Thread();// 启用更新时间进程&#10;        read_info_help(MainActivity.this, sharedPreferences);//集中存放读取信息相关方法&#10;        // 长按弹出APP信息&#10;        mListView.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {&#10;            @Override&#10;            public boolean onItemLongClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {&#10;                try {&#10;                    String string_app_info = getAppInfo(position);&#10;                    UnInstallDialog.uninstall_app(position, beanAppInfos, MainActivity.this, MainActivity.this, string_app_info, beanAppInfos.get(position).getName());&#10;                } catch (Exception e) {&#10;                    MTCore.ErrorDialog(MainActivity.this, e.toString(), TAG);//显示错误信息&#10;                }&#10;                return true;&#10;            }&#10;        });&#10;        // 当点击GridView时，获取ID和应用包名并启动&#10;        mListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {&#10;            @Override&#10;            public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {&#10;                try {&#10;                    // Intent intent=appInfos.get(position).getIntent();&#10;                    // startActivity(intent);&#10;                    Intent intent = getPackageManager().getLaunchIntentForPackage(beanAppInfos.get(position).getPackageName());&#10;                    if (intent != null) {//点击的APP无异常&#10;                        try {&#10;                            db.execSQL(&quot;insert into appuselogs(appname,time)values(?,?)&quot;, new String[]{beanAppInfos.get(position).getName(), tv_main_nowdate.getText() + &quot;--&quot; + tv_time_hour.getText() + &quot;:&quot; + tv_time_min.getText()});&#10;                            intent.putExtra(&quot;type&quot;, &quot;110&quot;);&#10;                            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);&#10;                            startActivity(intent);&#10;                            overridePendingTransition(0, 0);&#10;                        } catch (Exception e) {&#10;                            db.execSQL(&quot;create table appuselogs (_id integer primary key autoincrement,appname text,time text)&quot;);&#10;                            MTCore.MessageDialog(&quot;数据库已部署，请再次点击你要打开的APP&quot;, MainActivity.this);&#10;                        }&#10;                    } else if (beanAppInfos.get(position).getPackageName().equals(getPackageName() + &quot;.weather&quot;)) {//点击了“天气”&#10;                        intent = new Intent(MainActivity.this, WeatherActivity.class);&#10;                        startActivity(intent);&#10;                        overridePendingTransition(0, 0);&#10;                    } else if (beanAppInfos.get(position).getPackageName().equals(getPackageName() + &quot;.locker&quot;)) {//点击了“锁屏”&#10;                        handler.removeCallbacks(runnable);&#10;                        intent = new Intent(MainActivity.this, MTLocker.class);&#10;                        startActivity(intent);&#10;                        finish();&#10;                    } else if (beanAppInfos.get(position).getPackageName().equals(getPackageName() + &quot;.appuserlogs&quot;)) {//点击了“使用记录”&#10;                        intent = new Intent(MainActivity.this, AppUseLogsActivity.class);&#10;                        startActivity(intent);&#10;                        overridePendingTransition(0, 0);&#10;                    } else if (beanAppInfos.get(position).getPackageName().equals(getPackageName() + &quot;.systemupdate&quot;)) {//点击了“检查更新”&#10;                        intent = new Intent(MainActivity.this, AboutActivity.class);&#10;                        startActivity(intent);&#10;                        overridePendingTransition(0, 0);&#10;                    } else if (beanAppInfos.get(position).getPackageName().equals(getPackageName() + &quot;.launchersetting&quot;)) {//点击了“桌面设置”&#10;                        intent = new Intent(MainActivity.this, SettingActivity.class);&#10;                        startActivity(intent);&#10;                        overridePendingTransition(0, 0);&#10;                    } else if (beanAppInfos.get(position).getPackageName().equals(getPackageName() + &quot;.uirefresh&quot;)) {//点击了“刷新屏幕”&#10;                        String s = Build.BRAND;&#10;                        if (s.equals(&quot;Allwinner&quot;)) {&#10;                            Intent intent_refresh = new Intent(&quot;android.eink.force.refresh&quot;);&#10;                            sendBroadcast(intent_refresh);&#10;                        } else {&#10;                            startActivity(new Intent(MainActivity.this, UireFreshActivity.class));&#10;                            overridePendingTransition(0, 0);&#10;                        }&#10;                    } else if (beanAppInfos.get(position).getPackageName().equals(getPackageName() + &quot;.systemclean&quot;)) {//点击了“清理”&#10;                        String s_clean = Build.BRAND;&#10;                        if (s_clean.equals(&quot;Allwinner&quot;)) {&#10;                            //唤醒广播&#10;                            Intent intent_clear = new Intent(&quot;com.mogu.clear_mem&quot;);&#10;                            sendBroadcast(intent_clear);&#10;                        }&#10;                    } else if (beanAppInfos.get(position).getPackageName().equals(getPackageName() + &quot;.userhelper&quot;)) {&#10;                        MTCore.showToast(getApplicationContext(), &quot;打开&quot;, true);&#10;                        intent.putExtra(&quot;state&quot;, &quot;false&quot;);&#10;                        intent = new Intent(MainActivity.this, WelecomeActivity.class);&#10;                        startActivity(intent);&#10;                        overridePendingTransition(0, 0);&#10;                    } else {//出现异常&#10;                        MTCore.ErrorDialog(MainActivity.this, &quot;启动APP时出现“Intent”相关的异常&quot;, TAG);&#10;                    }&#10;                } catch (Exception e) {&#10;                    MTCore.ErrorDialog(MainActivity.this, e.toString(), TAG);&#10;                }&#10;            }&#10;        });&#10;        //桌面壁纸长按事件&#10;        iv_index_back.setOnLongClickListener(new OnLongClickListener() {&#10;            @Override&#10;            public boolean onLongClick(View v) {&#10;                iv_index_back.setVisibility(View.GONE);&#10;                mListView.setVisibility(View.VISIBLE);&#10;                tg_apps_state.setChecked(true);&#10;                return true;&#10;            }&#10;        });&#10;        //切换应用列表&#10;        tg_apps_state.setOnCheckedChangeListener(new OnCheckedChangeListener() {&#10;&#10;            @Override&#10;            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {&#10;                // TODO Auto-generated method stub&#10;                if (isChecked) {&#10;                    mListView.setVisibility(View.VISIBLE);&#10;                    iv_index_back.setVisibility(View.GONE);&#10;                } else {&#10;                    mListView.setVisibility(View.GONE);&#10;                    iv_index_back.setVisibility(View.VISIBLE);&#10;                }&#10;            }&#10;        });&#10;        //长按“小时”进入设置&#10;        tv_time_hour.setOnLongClickListener(new OnLongClickListener() {&#10;            @Override&#10;            public boolean onLongClick(View v) {&#10;                startActivity(new Intent(MainActivity.this, SettingActivity.class));&#10;                overridePendingTransition(0, 0);&#10;                return true;&#10;            }&#10;        });&#10;        /**&#10;         * 每次回到桌面开启常驻通知&#10;         */&#10;        new Handler().postDelayed(new Runnable() {&#10;            @Override&#10;            public void run() {&#10;                setNotification();&#10;            }&#10;        }, 50);&#10;    }&#10;&#10;&#10;    private String getAppInfo(int position) {&#10;        return beanAppInfos.get(position).getPackageName();&#10;    }&#10;&#10;&#10;    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR1)&#10;    private void read_info_help(Context c, SharedPreferences sharedPreferences) {&#10;        initAppList(c);// 获取应用列表&#10;        monitorBatteryState();// 监听电池信息&#10;        check_text_size(c);//检查文本大小&#10;        rember_name(c);// 读取昵称&#10;        update_wathers(sharedPreferences);//更新天气&#10;        check_view_hind(c, sharedPreferences);//检查底栏是否隐藏&#10;        check_offline_mode(c, sharedPreferences);//检查离线模式是否打开&#10;        check_oldman_mode(c, sharedPreferences);//检查老年模式是否打开&#10;        check_Language(c, sharedPreferences);&#10;        get_applist_number(c, sharedPreferences);//获取设定的应用列表列数&#10;        images_upgrade(c, sharedPreferences);//更新图像信息&#10;        set_app_setStackFromBottomMode(sharedPreferences);//检查并设置APP列表排列方式&#10;        check_full_window();//检查全屏设置&#10;    }&#10;&#10;    private void check_full_window() {&#10;        try {&#10;            SharedPreferences sharedPreferences = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE);&#10;            if (sharedPreferences.getString(&quot;setting_full_windows&quot;, null).equals(&quot;true&quot;)) {&#10;                getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);&#10;            } else {&#10;                getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);&#10;            }&#10;        } catch (Exception e) {&#10;            SharedPreferences sharedPreferences = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE);&#10;            sharedPreferences.edit().putString(&quot;setting_full_windows&quot;, &quot;false&quot;).commit();&#10;            check_full_window();&#10;            MTCore.showToast_new(&quot;出现错误&quot;, true);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 设置中文&#10;     *&#10;     * @param context&#10;     * @param sharedPreferences&#10;     */&#10;    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN_MR1)&#10;    private void check_Language(Context context, SharedPreferences sharedPreferences) {&#10;        int language = 0;&#10;        try {&#10;            //读取SharedPreferences数据，默认选中第一项&#10;            language = Integer.valueOf(sharedPreferences.getString(&quot;language&quot;, null));&#10;        } catch (Exception e) {&#10;            sharedPreferences.edit().putString(&quot;language&quot;, &quot;0&quot;).commit();&#10;            check_Language(context, sharedPreferences);&#10;        }&#10;        //根据读取到的数据，进行设置&#10;        Resources resources = getResources();&#10;        DisplayMetrics displayMetrics = resources.getDisplayMetrics();&#10;        Configuration configuration = resources.getConfiguration();&#10;        switch (language) {&#10;            case 0:&#10;                //自动获取&#10;                configuration.setLocale(Locale.getDefault());&#10;                break;&#10;            case 1:&#10;                //中文&#10;                configuration.setLocale(Locale.CHINESE);&#10;                break;&#10;            case 2:&#10;                //英文&#10;                configuration.setLocale(Locale.ENGLISH);&#10;                break;&#10;            case 3:&#10;                //日文&#10;                configuration.setLocale(Locale.JAPANESE);&#10;                break;&#10;            default:&#10;                break;&#10;        }&#10;        resources.updateConfiguration(configuration, displayMetrics);&#10;    }&#10;&#10;&#10;    @Override&#10;    protected void onRestart() {&#10;        super.onRestart();&#10;        SharedPreferences sharedPreferences = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE);&#10;        check_view_hind(MainActivity.this, sharedPreferences);//检查底栏是否隐藏&#10;        check_offline_mode(MainActivity.this, sharedPreferences);//检查离线模式是否打开&#10;        get_applist_number(MainActivity.this, sharedPreferences);//获取设定的应用列表列数&#10;        images_upgrade(MainActivity.this, sharedPreferences);//更新图像信息&#10;        set_app_setStackFromBottomMode(sharedPreferences);//检查并设置APP列表排列方式&#10;    }&#10;&#10;&#10;    public static void initSkinMode(Context context, String s) {&#10;        try {&#10;            // 获取壁纸管理器&#10;            WallpaperManager wallpaperManager = WallpaperManager.getInstance(context);&#10;            // 获取当前壁纸&#10;            if (ActivityCompat.checkSelfPermission(context, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {&#10;                // TODO: Consider calling&#10;                //    ActivityCompat#requestPermissions&#10;                // here to request the missing permissions, and then overriding&#10;                //   public void onRequestPermissionsResult(int requestCode, String[] permissions,&#10;                //                                          int[] grantResults)&#10;                // to handle the case where the user grants the permission. See the documentation&#10;                // for ActivityCompat#requestPermissions for more details.&#10;                return;&#10;            }&#10;            BitmapDrawable wallpaperDrawable = (BitmapDrawable) wallpaperManager.getDrawable();&#10;            // 将Drawable,转成Bitmap&#10;            Bitmap bitmap = Bitmap.createBitmap(wallpaperDrawable.getBitmap());&#10;            // 设置 背景&#10;            if (s.equals(&quot;app_wallpaper&quot;)) {&#10;                MainActivity.iv_index_back.setVisibility(View.VISIBLE);&#10;                MainActivity.mListView.setVisibility(View.GONE);&#10;                MainActivity.iv_index_back.setImageBitmap(bitmap);&#10;                MainActivity.tg_apps_state.setVisibility(View.VISIBLE);&#10;                tg_apps_state.setChecked(false);&#10;            }&#10;            if (s.equals(&quot;app_wallpaper_applist&quot;)) {&#10;                MainActivity.iv_index_back.setVisibility(View.VISIBLE);&#10;                MainActivity.mListView.setVisibility(View.VISIBLE);&#10;                MainActivity.iv_index_back.setImageBitmap(bitmap);&#10;                MainActivity.tg_apps_state.setVisibility(View.GONE);&#10;            }&#10;        } catch (Exception e) {&#10;            /**&#10;             * 创建纯白bitmap&#10;             */&#10;            Bitmap bitmap = Bitmap.createBitmap(400, 400, Bitmap.Config.ARGB_8888); // 创建画布&#10;            drawCanvas(bitmap);&#10;            MainActivity.iv_index_back.setVisibility(View.VISIBLE);&#10;            MainActivity.mListView.setVisibility(View.VISIBLE);&#10;            MainActivity.iv_index_back.setImageBitmap(bitmap);&#10;            MainActivity.tg_apps_state.setVisibility(View.GONE);&#10;//            MTCore.showToast(context, &quot;系统壁纸出错，重置为白色&quot;, true);&#10;            MTCore.ErrorDialog(context, &quot;系统壁纸获取出错 \n 请更改其他壁纸设置 \n 错误信息：&quot; + e.toString(), TAG);&#10;        }&#10;    }&#10;&#10;    public static void drawCanvas(Bitmap bitmap) {&#10;        bitmap.eraseColor(Color.parseColor(&quot;#ff0000&quot;)); // 填充颜色&#10;        Canvas canvas = new Canvas(bitmap);&#10;        Paint paint = new Paint();&#10;        paint.setTextSize(100);&#10;        paint.setColor(Color.DKGRAY);&#10;        paint.setFlags(Paint.ANTI_ALIAS_FLAG);&#10;        paint.setStyle(Paint.Style.STROKE); //用于设置字体填充的类型&#10;//        canvas.drawText(&quot;Ken&quot;, 100, 100, paint);&#10;        //最后通过Imageview显示出来&#10;        MainActivity.iv_index_back.setImageBitmap(bitmap);&#10;    }&#10;&#10;&#10;    private void set_app_setStackFromBottomMode(SharedPreferences sharedPreferences) {&#10;        if (sharedPreferences.getBoolean(&quot;app_setStackFromBottomMode&quot;, true) == false) {&#10;            mListView.setStackFromBottom(false);&#10;        } else {&#10;            mListView.setStackFromBottom(true);&#10;        }&#10;    }&#10;&#10;    private void check_first_user() {&#10;        if (isFirstStart(MainActivity.this)) {//第一次&#10;            //第一次启动预填充数据，并且跳转至欢迎界面&#10;            //填充预设数据&#10;            fillPresetData();&#10;            //填充预设隐藏应用包名&#10;            ArrayList&lt;String&gt; arrayList = new ArrayList&lt;String&gt;();&#10;            arrayList.add(&quot;frist&quot;);&#10;            SaveArrayListUtil.saveArrayList(MainActivity.this, arrayList, &quot;start&quot;);//存储在本地&#10;            //跳转到欢迎界面&#10;            startActivity(new Intent(getApplicationContext(), WelecomeActivity.class));&#10;            overridePendingTransition(0, 0);&#10;            finish();&#10;        } else {&#10;            //更新桌面信息&#10;            images_upgrade(MainActivity.this, sharedPreferences);&#10;        }&#10;    }&#10;&#10;    private void fillPresetData() {&#10;        SharedPreferences.Editor editor = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE).edit();&#10;        editor.putString(&quot;images_info&quot;, &quot;applist&quot;);//默认显示内容&#10;        editor.putString(&quot;images_app_listifo&quot;, &quot;true&quot;);&#10;        editor.putString(&quot;appname_state&quot;, &quot;one&quot;);//是否显示APP名称&#10;        editor.putString(&quot;applist_number&quot;, &quot;5&quot;);//默认APP列表大小&#10;        editor.putString(&quot;timetext_min_size&quot;, &quot;40&quot;);//分钟时间大小&#10;        editor.putString(&quot;timetext_hour_size&quot;, &quot;70&quot;);//小时时间大小&#10;        editor.putString(&quot;nametext_size&quot;, &quot;16&quot;);//昵称文本大小&#10;        editor.putString(&quot;dianchitext_size&quot;, &quot;16&quot;);//电池文本大小&#10;        editor.putString(&quot;datetext_size&quot;, &quot;16&quot;);//日期文本大小&#10;        editor.putString(&quot;setting_ico_hind&quot;, &quot;false&quot;);//隐藏底栏&#10;        editor.putString(&quot;offline&quot;, &quot;false&quot;);//离线模式&#10;        editor.putString(&quot;oldman&quot;, &quot;false&quot;);//老年模式&#10;        editor.putBoolean(&quot;app_setStackFromBottomMode&quot;, false);//默认显示内容&#10;        editor.putString(&quot;icon_size&quot;, &quot;45&quot;);//图标大小&#10;        editor.putString(&quot;language&quot;, &quot;0&quot;);//设置语言&#10;        editor.apply();&#10;    }&#10;&#10;&#10;    public static void check_oldman_mode(Context context, SharedPreferences sharedPreferences) {&#10;        try {&#10;            String offline = sharedPreferences.getString(&quot;offline&quot;, null);&#10;            if (offline.equals(&quot;true&quot;)) {&#10;                offline_mode = true;&#10;            } else {&#10;                offline_mode = false;&#10;            }&#10;        } catch (Exception e) {&#10;            SharedPreferences.Editor editor = context.getSharedPreferences(&quot;info&quot;, context.MODE_PRIVATE).edit();&#10;            editor.putString(&quot;oldman&quot;, &quot;false&quot;);//日期文本大小&#10;            editor.apply();&#10;        }&#10;    }&#10;&#10;    public static void check_offline_mode(Context context, SharedPreferences sharedPreferences) {&#10;        try {&#10;            String offline = sharedPreferences.getString(&quot;offline&quot;, null);&#10;            if (offline.equals(&quot;true&quot;)) {&#10;                offline_mode = true;&#10;            } else {&#10;                offline_mode = false;&#10;            }&#10;        } catch (Exception e) {&#10;            SharedPreferences.Editor editor = context.getSharedPreferences(&quot;info&quot;, context.MODE_PRIVATE).edit();&#10;            editor.putString(&quot;offline&quot;, &quot;false&quot;);//日期文本大小&#10;            editor.apply();&#10;        }&#10;    }&#10;&#10;    public static void check_view_hind(Context context, SharedPreferences sharedPreferences) {&#10;//        if (Build.BRAND.toString().equals(&quot;Allwinner&quot;)) {&#10;//            iv_setting_refresh.setVisibility(View.GONE);&#10;//        }&#10;        try {&#10;            String ico_info = sharedPreferences.getString(&quot;setting_ico_hind&quot;, null);&#10;            if (ico_info.equals(&quot;true&quot;)) {&#10;                line_bottom.setVisibility(View.GONE);&#10;            } else {&#10;                line_bottom.setVisibility(View.VISIBLE);&#10;            }&#10;        } catch (Exception e) {&#10;            SharedPreferences.Editor editor = context.getSharedPreferences(&quot;info&quot;, context.MODE_PRIVATE).edit();&#10;            editor.putString(&quot;setting_ico_hind&quot;, &quot;false&quot;);//日期文本大小&#10;            editor.apply();&#10;        }&#10;    }&#10;&#10;    private void get_applist_number(Context context, SharedPreferences sharedPreferences) {&#10;        try {&#10;            String applist_number = sharedPreferences.getString(&quot;applist_number&quot;, null);&#10;            if (applist_number.equals(&quot;auto&quot;)) {&#10;                mListView.setNumColumns(GridView.AUTO_FIT);&#10;            }&#10;            if (!applist_number.equals(&quot;auto&quot;)) {&#10;                mListView.setNumColumns(Integer.valueOf(applist_number));&#10;            }&#10;        } catch (Exception e) {&#10;            SharedPreferences.Editor editor = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE).edit();&#10;            editor.putString(&quot;applist_number&quot;, &quot;auto&quot;);&#10;            editor.apply();&#10;            mListView.setNumColumns(GridView.AUTO_FIT);&#10;        }&#10;    }&#10;&#10;    public boolean isFirstStart(Context context) {&#10;        SharedPreferences preferences = context.getSharedPreferences(&quot;SHARE_APP_TAG&quot;, 0);&#10;        Boolean isFirst = preferences.getBoolean(&quot;FIRSTStart&quot;, true);&#10;        if (isFirst) {// 第一次&#10;            preferences.edit().putBoolean(&quot;FIRSTStart&quot;, false).commit();&#10;            return true;&#10;        } else {&#10;            return false;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 检查图片&#10;     */&#10;    private void images_upgrade(Context c, SharedPreferences sharedPreferences) {&#10;        try {&#10;            String images_mode = sharedPreferences.getString(&quot;images_info&quot;, null);&#10;            if (images_mode.equals(&quot;ql&quot;)) {&#10;                iv_index_back.setImageResource(R.drawable.mi_haole);&#10;                iv_index_back.setVisibility(View.VISIBLE);&#10;                mListView.setVisibility(View.GONE);&#10;                tg_apps_state.setVisibility(View.VISIBLE);&#10;                tg_apps_state.setChecked(false);&#10;            }&#10;            if (images_mode.equals(&quot;mz&quot;)) {&#10;                iv_index_back.setImageResource(R.drawable.mi_meizi);&#10;                iv_index_back.setVisibility(View.VISIBLE);&#10;                mListView.setVisibility(View.GONE);&#10;                tg_apps_state.setVisibility(View.VISIBLE);&#10;                tg_apps_state.setChecked(false);&#10;            }&#10;            if (images_mode.equals(&quot;ll&quot;)) {&#10;                iv_index_back.setImageResource(R.drawable.mi_luoli);&#10;                iv_index_back.setVisibility(View.VISIBLE);&#10;                mListView.setVisibility(View.GONE);&#10;                tg_apps_state.setVisibility(View.VISIBLE);&#10;                tg_apps_state.setChecked(false);&#10;            }&#10;            if (images_mode.equals(&quot;zy&quot;)) {&#10;                iv_index_back.setImageResource(R.drawable.mi_zhiyu);&#10;                iv_index_back.setVisibility(View.VISIBLE);&#10;                mListView.setVisibility(View.GONE);&#10;                tg_apps_state.setVisibility(View.VISIBLE);&#10;                tg_apps_state.setChecked(false);&#10;            }&#10;            if (images_mode.equals(&quot;applist&quot;)) {&#10;                iv_index_back.setImageResource(R.drawable.mi_haole);&#10;                iv_index_back.setVisibility(View.GONE);&#10;                mListView.setVisibility(View.VISIBLE);&#10;                tg_apps_state.setVisibility(View.GONE);&#10;            }&#10;            if (images_mode.equals(&quot;&quot;)) {&#10;                iv_index_back.setImageResource(R.drawable.mi_haole);&#10;                iv_index_back.setVisibility(View.GONE);&#10;                mListView.setVisibility(View.VISIBLE);&#10;                MTCore.showToast(this, &quot;请选择壁纸或者应用列表（设置-壁纸设置）&quot;, false);&#10;            }&#10;            if (images_mode.equals(&quot;app_wallpaper&quot;)) {&#10;                initSkinMode(MainActivity.this, images_mode);&#10;            }&#10;            if (images_mode.equals(&quot;app_wallpaper_applist&quot;)) {&#10;                initSkinMode(MainActivity.this, images_mode);&#10;            }&#10;        } catch (Exception e) {&#10;            MTCore.ErrorDialog(c, &quot;桌面壁纸出现错误，已重置为默认&quot;, TAG);&#10;            sharedPreferences.edit().putString(&quot;images_info&quot;, &quot;applist&quot;).apply();&#10;        }&#10;    }&#10;&#10;    @Override&#10;    protected void onResume() {&#10;        // TODO Auto-generated method stub&#10;        super.onResume();&#10;        initAppList(MainActivity.this);&#10;    }&#10;&#10;    /**&#10;     * +获取应用列表、隐藏应用&#10;     *&#10;     * @param context&#10;     */&#10;//    public static void initAppList(Context context) {&#10;//        beanAppInfos = GetApps.GetAppList1(context);&#10;//        ArrayList&lt;String&gt; hind_apparrayList = new ArrayList&lt;String&gt;();&#10;//        hind_apparrayList.clear();&#10;//        hind_apparrayList = SaveArrayListUtil.getSearchArrayList(context);&#10;//        String s = Build.BRAND;&#10;//        if (s.equals(&quot;Allwinner&quot;)) {&#10;//            hind_apparrayList.add(&quot;com.android.settings&quot;);&#10;//        }&#10;//        Log.i(TAG, &quot;initAppList: --------------removeing packname-----------&quot;);&#10;//        for (int j = 0; j &lt; hind_apparrayList.size(); j++) {&#10;//            for (int i = 0; i &lt; beanAppInfos.size(); i++) {&#10;//                if (hind_apparrayList.get(j).equals(beanAppInfos.get(i).getPackageName())) {&#10;//                    Log.i(TAG, &quot;initAppList: remove:&quot; + i);&#10;//                    beanAppInfos.remove(i);&#10;//                }&#10;//            }&#10;//        }&#10;//        DeskTopGridViewBaseAdapter deskTopGridViewBaseAdapter = new DeskTopGridViewBaseAdapter(beanAppInfos, context);&#10;//        mListView.setAdapter(deskTopGridViewBaseAdapter);&#10;//    }&#10;    public static void initAppList(Context context) {&#10;        try {&#10;            beanAppInfos = GetApps.GetAppList1(context);&#10;            ArrayList&lt;String&gt; hind_apparrayList = SaveArrayListUtil.getSearchArrayList(context);&#10;            String s = Build.BRAND;&#10;&#10;            // 如果品牌是Allwinner，添加特定的应用包名&#10;            if (s.equals(&quot;Allwinner&quot;)) {&#10;                hind_apparrayList.add(&quot;com.android.settings&quot;);&#10;            }&#10;            Log.i(TAG, &quot;initAppList: --------------hind_apparrayList-----------&quot;);&#10;            Log.i(TAG, &quot;initAppList: &quot; + hind_apparrayList);&#10;            Log.i(TAG, &quot;initAppList: --------------beanAppInfos-----------&quot;);&#10;            Log.i(TAG, &quot;initAppList: &quot; + beanAppInfos);&#10;&#10;            // 使用Stream API来过滤不需要的应用&#10;            // 注意：这里假设beanAppInfos是一个列表，并且getPackageName()方法不存在异常风险&#10;            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) {&#10;                beanAppInfos.removeIf(appInfo -&gt; hind_apparrayList.stream().anyMatch(hindApp -&gt; hindApp.equals(appInfo.getPackageName())));&#10;            } else {&#10;                for (int j = 0; j &lt; hind_apparrayList.size(); j++) {&#10;                    for (int i = 0; i &lt; beanAppInfos.size(); i++) {&#10;                        if (hind_apparrayList.get(j).equals(beanAppInfos.get(i).getPackageName())) {&#10;                            Log.i(TAG, &quot;initAppList: --------------removeing packname-----------&quot;);&#10;                            Log.i(TAG, &quot;initAppList: remove:&quot; + beanAppInfos.get(i).getPackageName());&#10;                            beanAppInfos.remove(i);&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // 创建适配器并设置到ListView&#10;            DeskTopGridViewBaseAdapter deskTopGridViewBaseAdapter = new DeskTopGridViewBaseAdapter(beanAppInfos, context);&#10;            mListView.setAdapter(deskTopGridViewBaseAdapter);&#10;        } catch (Exception e) {&#10;            // 记录异常信息，可以根据需要进行异常处理&#10;            Log.e(TAG, &quot;Error initializing app list&quot;, e);&#10;        }&#10;    }&#10;&#10;&#10;    /**&#10;     * 读取昵称&#10;     * &lt;p&gt;&#10;     * SQLite&#10;     */&#10;    public static void rember_name(Context c) {&#10;        Cursor cursor = MainActivity.db.rawQuery(&quot;select * from name&quot;, null);&#10;        if (cursor.getCount() != 0) {&#10;            cursor.moveToFirst();&#10;            @SuppressLint(&quot;Range&quot;) String username = cursor.getString(cursor.getColumnIndex(&quot;username&quot;));&#10;            MainActivity.tv_user_id.setText(username);&#10;            if (MainActivity.tv_user_id.getText().toString().isEmpty()) {&#10;                MainActivity.tv_user_id.setText(&quot;请设置文本（桌面设置中）&quot;);&#10;            } else if (MainActivity.tv_user_id.getText().toString().equals(&quot;&quot;)) {&#10;                MainActivity.tv_user_id.setText(&quot;请设置文本（桌面设置中）&quot;);&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 更新时间&#10;     */&#10;    private void new_time_Thread() {&#10;        handler = new Handler();&#10;        runnable = new Runnable() {&#10;&#10;            @Override&#10;            public void run() {&#10;                // TODO Auto-generated method stub&#10;                SimpleDateFormat simpleDateFormat_hour = new SimpleDateFormat(&quot;HH&quot;);&#10;                SimpleDateFormat simpleDateFormat_min = new SimpleDateFormat(&quot;mm&quot;);&#10;                SimpleDateFormat simpleDateFormat_date = new SimpleDateFormat(&quot;yyyy/MM/dd&quot;);&#10;                SimpleDateFormat simpleDateFormat_weekday = new SimpleDateFormat(&quot;EEEE&quot;); // 用于显示星期&#10;                // 获取当前日期和星期&#10;                String currentDate = simpleDateFormat_date.format(new java.util.Date());&#10;                String currentWeekday = simpleDateFormat_weekday.format(new java.util.Date());&#10;                // 设置文本，这里假设你想要日期和星期在同一行显示，用空格分隔&#10;                tv_main_nowdate.setText(currentDate + &quot; &quot; + currentWeekday);&#10;                tv_time_hour.setText(simpleDateFormat_hour.format(new java.util.Date()));&#10;                tv_time_min.setText(simpleDateFormat_min.format(new java.util.Date()));&#10;                handler.postDelayed(runnable, 1000);&#10;            }&#10;        };&#10;        handler.post(runnable);&#10;    }&#10;&#10;    /**&#10;     * 绑定控件&#10;     */&#10;    private void initView() {&#10;        sharedPreferences = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE);&#10;        line_bottom = (LinearLayout) findViewById(R.id.line_bottom);&#10;        tv_main_nowdate = (TextView) findViewById(R.id.tv_main_nowdate);&#10;        iv_clean_button = (ImageView) findViewById(R.id.iv_setting_clear);&#10;        iv_setting_refresh = (ImageView) findViewById(R.id.iv_setting_refresh);&#10;        mListView = (GridView) findViewById(R.id.mAppGridView);&#10;        iv_setting_button = (ImageView) findViewById(R.id.iv_setting_button);&#10;        tv_time_hour = (TextView) findViewById(R.id.tv_time_hour);&#10;        tg_apps_state = (ToggleButton) findViewById(R.id.tg_apps_state);&#10;        tv_time_min = (TextView) findViewById(R.id.tv_time_min);&#10;        tv_user_id = (TextView) findViewById(R.id.tv_user_id);&#10;        tv_main_batterystate = (TextView) findViewById(R.id.tv_main_batterystate);&#10;        line_wather = (LinearLayout) findViewById(R.id.line_wather);&#10;        tv_city = (TextView) findViewById(R.id.tv_city);&#10;        iv_index_back = (ImageView) findViewById(R.id.iv_index_back);&#10;        tv_temp_state = (TextView) findViewById(R.id.tv_temp_state);&#10;        tv_last_updatetime = (TextView) findViewById(R.id.tv_last_updatetime);&#10;        iv_setting_button.setOnClickListener(this);&#10;        line_wather.setOnClickListener(this);&#10;        iv_setting_refresh.setOnClickListener(this);&#10;        iv_clean_button.setOnClickListener(this);&#10;        String s_clean = Build.BRAND;&#10;        if (s_clean.equals(&quot;Allwinner&quot;)) {&#10;            iv_clean_button.setVisibility(View.VISIBLE);&#10;        } else {&#10;            iv_clean_button.setVisibility(View.GONE);&#10;        }&#10;        //数据库&#10;        dbHelper_name_sql = new MyDataBaseHelper(getApplicationContext(), &quot;info.db&quot;, null, 2);&#10;        db = dbHelper_name_sql.getWritableDatabase();&#10;        //动态注册&#10;        appinstallserver = new AppInstallServer();&#10;        appinstallserver.register(this);&#10;    }&#10;&#10;    private void update_wathers(SharedPreferences sharedPreferences) {&#10;        if (!offline_mode) {&#10;//            line_wather.setVisibility(View.VISIBLE);&#10;            tv_temp_state.setText(sharedPreferences.getString(&quot;wather_info_temp&quot;, null));&#10;            tv_last_updatetime.setText(sharedPreferences.getString(&quot;wather_info_updatetime&quot;, null));&#10;            tv_city.setText(sharedPreferences.getString(&quot;wather_info_citytype&quot;, null));&#10;            /**&#10;             * 判断设置是不是隐藏天气布局&#10;             */&#10;            check_weather_view(sharedPreferences);&#10;        } else {&#10;//            line_wather.setVisibility(View.INVISIBLE);&#10;        }&#10;    }&#10;&#10;    private void check_weather_view(SharedPreferences sharedPreferences) {&#10;        if (sharedPreferences.getBoolean(&quot;isHind_weather&quot;, false) == true) {&#10;//            line_wather.setVisibility(View.INVISIBLE);&#10;        } else if (sharedPreferences.getBoolean(&quot;isHind_weather&quot;, false) == false) {&#10;//            line_wather.setVisibility(View.VISIBLE);&#10;        } else {&#10;//            line_wather.setVisibility(View.VISIBLE);&#10;        }&#10;    }&#10;&#10;    private Handler mHandler = new Handler() {&#10;        public void handleMessage(Message msg) {&#10;            switch (msg.what) {&#10;                case 0:&#10;                    String fengxiang = &quot;&quot;;&#10;                    String fengli = &quot;&quot;;&#10;                    String high = &quot;&quot;;&#10;                    String type = &quot;&quot;;&#10;                    String low = &quot;&quot;;&#10;                    String date = &quot;&quot;;&#10;                    JSONArray dataArray = (JSONArray) msg.obj;&#10;                    try {&#10;                        String json_today = dataArray.getString(0);&#10;&#10;                        System.out.println(&quot;-----------&quot; + json_today);&#10;&#10;                        JSONObject jsonObject = dataArray.getJSONObject(0);&#10;                        System.out.println(jsonObject);&#10;                        if (jsonObject != null) {&#10;                            fengxiang = jsonObject.optString(&quot;fengxiang&quot;);&#10;                            fengli = jsonObject.optString(&quot;fengli&quot;);&#10;                            high = jsonObject.optString(&quot;high&quot;);&#10;                            type = jsonObject.optString(&quot;type&quot;);&#10;                            low = jsonObject.optString(&quot;low&quot;);&#10;                            date = jsonObject.optString(&quot;date&quot;);&#10;                        }&#10;                        Cursor cursor = db.rawQuery(&quot;select * from wather_city&quot;, null);&#10;                        if (cursor.getCount() != 0) {&#10;                            cursor.moveToFirst();&#10;                            @SuppressLint(&quot;Range&quot;) String city = cursor.getString(cursor.getColumnIndex(&quot;city&quot;));&#10;                            tv_city.setText(city + &quot;  &quot; + type);&#10;                        } else {&#10;                            MTCore.showToast(getApplicationContext(), &quot;请到“梅糖天气”设置位置信息&quot;, true);&#10;                        }&#10;                        @SuppressLint(&quot;Range&quot;) String city = cursor.getString(cursor.getColumnIndex(&quot;city&quot;));&#10;                        SharedPreferences.Editor editor = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE).edit();&#10;                        editor.putString(&quot;wather_info_citytype&quot;, city + &quot;  &quot; + type);&#10;                        editor.putString(&quot;wather_info_wind&quot;, fengxiang);&#10;                        editor.putString(&quot;wather_info_temp&quot;, high + &quot;  &quot; + low);&#10;                        editor.putString(&quot;wather_info_updatetime&quot;, &quot;于&quot; + tv_time_hour.getText().toString() + &quot;:&quot; + tv_time_min.getText().toString() + &quot;更新&quot;);&#10;                        editor.apply();&#10;                        /**&#10;                         * 更新天气信息&#10;                         */&#10;                        SharedPreferences sharedPreferences;&#10;                        sharedPreferences = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE);&#10;                        update_wathers(sharedPreferences);&#10;                    } catch (Exception e) {&#10;                        // TODO: handle exception&#10;                    }&#10;                    break;&#10;                case 1:&#10;                    MTCore.showToast(getApplicationContext(), &quot;城市无效（已重置为上海）&quot;, true);&#10;                    db.execSQL(&quot;update wather_city set city = ? &quot;, new String[]{&quot;上海&quot;});&#10;                    break;&#10;                case 2:&#10;                    SharedPreferences.Editor editor = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE).edit();&#10;                    editor.putString(&quot;wather_info_updatetime&quot;, &quot;于&quot; + tv_time_hour.getText().toString() + &quot;:&quot; + tv_time_min.getText().toString() + &quot;更新（离线状态）&quot;);&#10;                    editor.apply();&#10;                    SharedPreferences sharedPreferences;&#10;                    sharedPreferences = getSharedPreferences(&quot;info&quot;, MODE_PRIVATE);&#10;                    update_wathers(sharedPreferences);&#10;                    break;&#10;                default:&#10;                    break;&#10;            }&#10;        }&#10;    };&#10;&#10;    /**&#10;     * 拦截返回键、Home键&#10;     */&#10;    @Override&#10;    public boolean onKeyDown(int keyCode, KeyEvent event) {&#10;        // TODO Auto-generated method stub&#10;        if (keyCode == KeyEvent.KEYCODE_BACK) {&#10;            return false;&#10;        }&#10;        if (keyCode == KeyEvent.KEYCODE_HOME) {&#10;            MTCore.showToast(MainActivity.this, &quot;已经回到桌面&quot;, false);&#10;            return false;&#10;        }&#10;        return super.onKeyDown(keyCode, event);&#10;    }&#10;&#10;    /**&#10;     * Activity被销毁的同时销毁广播&#10;     */&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        unregisterReceiver(batteryLevelRcvr);&#10;        appinstallserver.unregister(this);&#10;    }&#10;&#10;    /**&#10;     * 充电状态显示&#10;     * &lt;p&gt;&#10;     * Code Copy from http://blog.sina.com.cn/s/blog_c79c5e3c0102uyun.html&#10;     */&#10;    private void monitorBatteryState() {&#10;        batteryLevelRcvr = new BroadcastReceiver() {&#10;            public void onReceive(Context context, Intent intent) {&#10;                StringBuilder sb = new StringBuilder();&#10;                int rawlevel = intent.getIntExtra(&quot;level&quot;, -1);&#10;                int scale = intent.getIntExtra(&quot;scale&quot;, -1);&#10;                int status = intent.getIntExtra(&quot;status&quot;, -1);&#10;                int health = intent.getIntExtra(&quot;health&quot;, -1);&#10;                int level = -1; // percentage, or -1 for unknown&#10;                if (rawlevel &gt;= 0 &amp;&amp; scale &gt; 0) {&#10;                    level = (rawlevel * 100) / scale;&#10;                }&#10;                if (BatteryManager.BATTERY_HEALTH_OVERHEAT == health) {&#10;                    sb.append(&quot;'s battery feels very hot!&quot;);&#10;                } else {&#10;                    if (status == BatteryManager.BATTERY_STATUS_FULL) {//充电完成&#10;                        sb.append(String.valueOf(level) + &quot;% 已充满 &quot;);&#10;                        tv_main_batterystate.setText(sb.toString());&#10;                    }&#10;                    if (status == BatteryManager.BATTERY_STATUS_CHARGING) {//充电&#10;                        sb.append(String.valueOf(level) + &quot;% 充电中 &quot;);&#10;                        tv_main_batterystate.setText(sb.toString());&#10;                    }&#10;                    if (status == BatteryManager.BATTERY_STATUS_DISCHARGING) {//放电&#10;                        sb.append(String.valueOf(level) + &quot;% &quot;);&#10;                        tv_main_batterystate.setText(sb.toString());&#10;                    }&#10;                    if (status == BatteryManager.BATTERY_STATUS_NOT_CHARGING) {//未在充电&#10;                        sb.append(String.valueOf(level) + &quot;% &quot;);&#10;                        tv_main_batterystate.setText(sb.toString());&#10;                    }&#10;                }&#10;                sb.append(' ');&#10;            }&#10;        };&#10;        batteryLevelFilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);&#10;        registerReceiver(batteryLevelRcvr, batteryLevelFilter);&#10;    }&#10;&#10;    /**&#10;     * 桌面底栏功能 点击事件监听&#10;     */&#10;    @Override&#10;    public void onClick(View v) {&#10;        // TODO Auto-generated method stub&#10;        switch (v.getId()) {&#10;            //设置&#10;            case R.id.iv_setting_button:&#10;                startActivity(new Intent(getApplicationContext(), SettingActivity.class));&#10;                overridePendingTransition(0, 0);&#10;                break;&#10;            case R.id.iv_setting_clear:&#10;                String s_clean = Build.BRAND;&#10;                if (s_clean.equals(&quot;Allwinner&quot;)) {&#10;                    Intent intent_clear = new Intent(&quot;com.mogu.clear_mem&quot;);&#10;                    sendBroadcast(intent_clear);&#10;//                    Intent intent = new Intent(&quot;android.eink.force.refresh&quot;);&#10;//                    sendBroadcast(intent);&#10;                }&#10;                break;&#10;            //刷新&#10;            case R.id.iv_setting_refresh:&#10;                String s = Build.BRAND;&#10;                if (s.equals(&quot;Allwinner&quot;)) {&#10;//                    Intent intent_clear = new Intent(&quot;com.mogu.clear_mem&quot;);&#10;//                    sendBroadcast(intent_clear);&#10;                    Intent intent = new Intent(&quot;android.eink.force.refresh&quot;);&#10;                    sendBroadcast(intent);&#10;                } else {&#10;                    startActivity(new Intent(MainActivity.this, UireFreshActivity.class));&#10;                    overridePendingTransition(0, 0);&#10;                }&#10;                break;&#10;            default:&#10;                break;&#10;        }&#10;    }&#10;&#10;    // 添加常驻通知&#10;    private void setNotification() {&#10;        NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);&#10;        NotificationCompat.Builder builder;&#10;        int channelId = 1;&#10;        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) {    //Android 8.0以上适配&#10;            NotificationChannel channel = new NotificationChannel(String.valueOf(channelId), &quot;channel_name&quot;, NotificationManager.IMPORTANCE_HIGH);&#10;            manager.createNotificationChannel(channel);&#10;            builder = new NotificationCompat.Builder(this, String.valueOf(channelId));&#10;        } else {&#10;            builder = new NotificationCompat.Builder(this);&#10;        }&#10;//        Intent intent = new Intent(this, MainActivity.class);&#10;        Intent intent = new Intent();// 创建Intent对象&#10;        intent.setAction(Intent.ACTION_MAIN);// 设置Intent动作&#10;        intent.addCategory(Intent.CATEGORY_HOME);// 设置Intent种类&#10;//        startActivity(intent);// 将Intent传递给Activity&#10;//        PendingIntent pi = PendingIntent.getActivity(this, 0, intent, 0);&#10;        // 创建一个可变的 PendingIntent&#10;        PendingIntent pi = PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);&#10;&#10;        builder.setContentTitle(&quot;点击此条通知回到桌面&quot;)//指定通知栏的标题内容&#10;                .setContentText(&quot;软件后台运行中&quot;)//通知的正文内容&#10;                .setWhen(0)//通知创建的时间&#10;                .setAutoCancel(false)//点击通知后，自动取消&#10;                .setStyle(new NotificationCompat.BigTextStyle().bigText(&quot;&quot;)).setSmallIcon(R.drawable.ic_launcher)//通知显示的小图标，只能用alpha图层的图片进行设置&#10;                .setPriority(NotificationCompat.PRIORITY_MAX)//通知重要程度&#10;                .setContentIntent(pi)//点击跳转&#10;                .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.drawable.ic_launcher));&#10;        Notification notification = builder.build();&#10;        notification.flags |= Notification.FLAG_ONGOING_EVENT;&#10;        manager.notify(channelId, notification);&#10;    }&#10;&#10;    /**&#10;     * 检查文本大小并设置&#10;     *&#10;     * @param context&#10;     */&#10;    public static void check_text_size(Context context) {&#10;        try {&#10;            SharedPreferences sharedPreferences = context.getSharedPreferences(&quot;info&quot;, MODE_PRIVATE);&#10;            MainActivity.tv_time_hour.setTextSize(Integer.valueOf(sharedPreferences.getString(&quot;timetext_hour_size&quot;, null)));&#10;            MainActivity.tv_time_min.setTextSize(Integer.valueOf(sharedPreferences.getString(&quot;timetext_min_size&quot;, null)));&#10;            MainActivity.tv_user_id.setTextSize(Integer.valueOf(sharedPreferences.getString(&quot;nametext_size&quot;, null)));&#10;            MainActivity.tv_main_batterystate.setTextSize(Integer.valueOf(sharedPreferences.getString(&quot;dianchitext_size&quot;, null)));&#10;        } catch (Exception e) {&#10;            SharedPreferences.Editor editor = context.getSharedPreferences(&quot;info&quot;, MODE_PRIVATE).edit();&#10;            /**&#10;             * 设定文本大小预填充&#10;             */&#10;            editor.putString(&quot;timetext_min_size&quot;, &quot;40&quot;);&#10;            editor.putString(&quot;timetext_hour_size&quot;, &quot;70&quot;);&#10;            editor.putString(&quot;nametext_size&quot;, &quot;17&quot;);//昵称文本大小&#10;            editor.putString(&quot;dianchitext_size&quot;, &quot;17&quot;);//电池文本大小&#10;            editor.putString(&quot;datetext_size&quot;, &quot;17&quot;);//日期文本大小&#10;            editor.apply();&#10;            check_text_size(context);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public void finish() {&#10;        super.finish();&#10;        overridePendingTransition(0, 0);&#10;    }&#10;&#10;}" />
                  </map>
                </option>
                <option name="messageId" value="01956fdf952a710f91d44704ce9607b7" />
                <option name="question" value="帮我优化一下zxgrergb_hvggrmt_mvd.cno" />
                <option name="rating" value="UNRATED" />
                <option name="referenceBeans">
                  <list />
                </option>
                <option name="status" value="SUCCESS" />
                <option name="variables">
                  <list />
                </option>
              </Turn>
            </list>
          </option>
          <option name="updateTime" value="1741338768329" />
        </Conversation>
        <Conversation>
          <option name="createTime" value="1741338301459" />
          <option name="id" value="01956fd9d413796ebb6fed5213c55569" />
          <option name="title" value="新对话 2025年3月07日 17:05:01" />
          <option name="updateTime" value="1741338301459" />
        </Conversation>
      </list>
    </option>
  </component>
</project>